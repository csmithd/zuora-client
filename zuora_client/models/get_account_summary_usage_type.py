# coding: utf-8




import pprint
import re  # noqa: F401

import six


class GETAccountSummaryUsageType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity': 'str',
        'start_date': 'date',
        'unit_of_measure': 'str'
    }

    attribute_map = {
        'quantity': 'quantity',
        'start_date': 'startDate',
        'unit_of_measure': 'unitOfMeasure'
    }

    def __init__(self, quantity=None, start_date=None, unit_of_measure=None):  # noqa: E501
        """GETAccountSummaryUsageType - a model defined in Swagger"""  # noqa: E501

        self._quantity = None
        self._start_date = None
        self._unit_of_measure = None
        self.discriminator = None

        if quantity is not None:
            self.quantity = quantity
        if start_date is not None:
            self.start_date = start_date
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure

    @property
    def quantity(self):
        """Gets the quantity of this GETAccountSummaryUsageType.  # noqa: E501

        Number of units used.   # noqa: E501

        :return: The quantity of this GETAccountSummaryUsageType.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GETAccountSummaryUsageType.

        Number of units used.   # noqa: E501

        :param quantity: The quantity of this GETAccountSummaryUsageType.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def start_date(self):
        """Gets the start_date of this GETAccountSummaryUsageType.  # noqa: E501

        The start date of a usage period as `yyyy-mm`. Zuora uses this field value to determine the usage date.   # noqa: E501

        :return: The start_date of this GETAccountSummaryUsageType.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GETAccountSummaryUsageType.

        The start date of a usage period as `yyyy-mm`. Zuora uses this field value to determine the usage date.   # noqa: E501

        :param start_date: The start_date of this GETAccountSummaryUsageType.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this GETAccountSummaryUsageType.  # noqa: E501

        Unit by which consumption is measured, as configured in the Billing Settings section of the web-based UI.   # noqa: E501

        :return: The unit_of_measure of this GETAccountSummaryUsageType.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this GETAccountSummaryUsageType.

        Unit by which consumption is measured, as configured in the Billing Settings section of the web-based UI.   # noqa: E501

        :param unit_of_measure: The unit_of_measure of this GETAccountSummaryUsageType.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETAccountSummaryUsageType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETAccountSummaryUsageType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
