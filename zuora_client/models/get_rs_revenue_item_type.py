# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.revenue_schedule_item_object_custom_fields import RevenueScheduleItemObjectCustomFields  # noqa: F401,E501


class GETRsRevenueItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_period_end_date': 'date',
        'accounting_period_name': 'str',
        'accounting_period_start_date': 'date',
        'amount': 'str',
        'currency': 'str',
        'deferred_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code_type': 'str',
        'is_accounting_period_closed': 'bool',
        'recognized_revenue_accounting_code': 'str',
        'recognized_revenue_accounting_code_type': 'str'
    }

    attribute_map = {
        'accounting_period_end_date': 'accountingPeriodEndDate',
        'accounting_period_name': 'accountingPeriodName',
        'accounting_period_start_date': 'accountingPeriodStartDate',
        'amount': 'amount',
        'currency': 'currency',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'deferred_revenue_accounting_code_type': 'deferredRevenueAccountingCodeType',
        'is_accounting_period_closed': 'isAccountingPeriodClosed',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'recognized_revenue_accounting_code_type': 'recognizedRevenueAccountingCodeType'
    }

    def __init__(self, accounting_period_end_date=None, accounting_period_name=None, accounting_period_start_date=None, amount=None, currency=None, deferred_revenue_accounting_code=None, deferred_revenue_accounting_code_type=None, is_accounting_period_closed=None, recognized_revenue_accounting_code=None, recognized_revenue_accounting_code_type=None):  # noqa: E501
        """GETRsRevenueItemType - a model defined in Swagger"""  # noqa: E501

        self._accounting_period_end_date = None
        self._accounting_period_name = None
        self._accounting_period_start_date = None
        self._amount = None
        self._currency = None
        self._deferred_revenue_accounting_code = None
        self._deferred_revenue_accounting_code_type = None
        self._is_accounting_period_closed = None
        self._recognized_revenue_accounting_code = None
        self._recognized_revenue_accounting_code_type = None
        self.discriminator = None

        if accounting_period_end_date is not None:
            self.accounting_period_end_date = accounting_period_end_date
        if accounting_period_name is not None:
            self.accounting_period_name = accounting_period_name
        if accounting_period_start_date is not None:
            self.accounting_period_start_date = accounting_period_start_date
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if deferred_revenue_accounting_code_type is not None:
            self.deferred_revenue_accounting_code_type = deferred_revenue_accounting_code_type
        if is_accounting_period_closed is not None:
            self.is_accounting_period_closed = is_accounting_period_closed
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if recognized_revenue_accounting_code_type is not None:
            self.recognized_revenue_accounting_code_type = recognized_revenue_accounting_code_type

    @property
    def accounting_period_end_date(self):
        """Gets the accounting_period_end_date of this GETRsRevenueItemType.  # noqa: E501

        The accounting period end date. The accounting period end date of the open-ended accounting period is null.   # noqa: E501

        :return: The accounting_period_end_date of this GETRsRevenueItemType.  # noqa: E501
        :rtype: date
        """
        return self._accounting_period_end_date

    @accounting_period_end_date.setter
    def accounting_period_end_date(self, accounting_period_end_date):
        """Sets the accounting_period_end_date of this GETRsRevenueItemType.

        The accounting period end date. The accounting period end date of the open-ended accounting period is null.   # noqa: E501

        :param accounting_period_end_date: The accounting_period_end_date of this GETRsRevenueItemType.  # noqa: E501
        :type: date
        """

        self._accounting_period_end_date = accounting_period_end_date

    @property
    def accounting_period_name(self):
        """Gets the accounting_period_name of this GETRsRevenueItemType.  # noqa: E501

        The name of the accounting period. The open-ended accounting period is named `Open-Ended`.   # noqa: E501

        :return: The accounting_period_name of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period_name

    @accounting_period_name.setter
    def accounting_period_name(self, accounting_period_name):
        """Sets the accounting_period_name of this GETRsRevenueItemType.

        The name of the accounting period. The open-ended accounting period is named `Open-Ended`.   # noqa: E501

        :param accounting_period_name: The accounting_period_name of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._accounting_period_name = accounting_period_name

    @property
    def accounting_period_start_date(self):
        """Gets the accounting_period_start_date of this GETRsRevenueItemType.  # noqa: E501

        The accounting period start date.   # noqa: E501

        :return: The accounting_period_start_date of this GETRsRevenueItemType.  # noqa: E501
        :rtype: date
        """
        return self._accounting_period_start_date

    @accounting_period_start_date.setter
    def accounting_period_start_date(self, accounting_period_start_date):
        """Sets the accounting_period_start_date of this GETRsRevenueItemType.

        The accounting period start date.   # noqa: E501

        :param accounting_period_start_date: The accounting_period_start_date of this GETRsRevenueItemType.  # noqa: E501
        :type: date
        """

        self._accounting_period_start_date = accounting_period_start_date

    @property
    def amount(self):
        """Gets the amount of this GETRsRevenueItemType.  # noqa: E501

        The amount of the revenue item.   # noqa: E501

        :return: The amount of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GETRsRevenueItemType.

        The amount of the revenue item.   # noqa: E501

        :param amount: The amount of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this GETRsRevenueItemType.  # noqa: E501

        The type of currency used.   # noqa: E501

        :return: The currency of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETRsRevenueItemType.

        The type of currency used.   # noqa: E501

        :param currency: The currency of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this GETRsRevenueItemType.  # noqa: E501

        The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :return: The deferred_revenue_accounting_code of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this GETRsRevenueItemType.

        The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code_type(self):
        """Gets the deferred_revenue_accounting_code_type of this GETRsRevenueItemType.  # noqa: E501

        The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :return: The deferred_revenue_accounting_code_type of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code_type

    @deferred_revenue_accounting_code_type.setter
    def deferred_revenue_accounting_code_type(self, deferred_revenue_accounting_code_type):
        """Sets the deferred_revenue_accounting_code_type of this GETRsRevenueItemType.

        The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :param deferred_revenue_accounting_code_type: The deferred_revenue_accounting_code_type of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code_type = deferred_revenue_accounting_code_type

    @property
    def is_accounting_period_closed(self):
        """Gets the is_accounting_period_closed of this GETRsRevenueItemType.  # noqa: E501

        Indicates if the accounting period is closed or open.   # noqa: E501

        :return: The is_accounting_period_closed of this GETRsRevenueItemType.  # noqa: E501
        :rtype: bool
        """
        return self._is_accounting_period_closed

    @is_accounting_period_closed.setter
    def is_accounting_period_closed(self, is_accounting_period_closed):
        """Sets the is_accounting_period_closed of this GETRsRevenueItemType.

        Indicates if the accounting period is closed or open.   # noqa: E501

        :param is_accounting_period_closed: The is_accounting_period_closed of this GETRsRevenueItemType.  # noqa: E501
        :type: bool
        """

        self._is_accounting_period_closed = is_accounting_period_closed

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this GETRsRevenueItemType.  # noqa: E501

        The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.   # noqa: E501

        :return: The recognized_revenue_accounting_code of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this GETRsRevenueItemType.

        The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def recognized_revenue_accounting_code_type(self):
        """Gets the recognized_revenue_accounting_code_type of this GETRsRevenueItemType.  # noqa: E501

        The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :return: The recognized_revenue_accounting_code_type of this GETRsRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code_type

    @recognized_revenue_accounting_code_type.setter
    def recognized_revenue_accounting_code_type(self, recognized_revenue_accounting_code_type):
        """Sets the recognized_revenue_accounting_code_type of this GETRsRevenueItemType.

        The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :param recognized_revenue_accounting_code_type: The recognized_revenue_accounting_code_type of this GETRsRevenueItemType.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code_type = recognized_revenue_accounting_code_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETRsRevenueItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETRsRevenueItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
