# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.revenue_schedule_object_custom_fields import RevenueScheduleObjectCustomFields  # noqa: F401,E501


class PUTRSBasicInfoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'notes': 'notes',
        'reference_id': 'referenceId'
    }

    def __init__(self, notes=None, reference_id=None):  # noqa: E501
        """PUTRSBasicInfoType - a model defined in Swagger"""  # noqa: E501

        self._notes = None
        self._reference_id = None
        self.discriminator = None

        if notes is not None:
            self.notes = notes
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def notes(self):
        """Gets the notes of this PUTRSBasicInfoType.  # noqa: E501

        Additional information about this record.   # noqa: E501

        :return: The notes of this PUTRSBasicInfoType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PUTRSBasicInfoType.

        Additional information about this record.   # noqa: E501

        :param notes: The notes of this PUTRSBasicInfoType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def reference_id(self):
        """Gets the reference_id of this PUTRSBasicInfoType.  # noqa: E501

        Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.  Use this field only when the revenue schedule is not linked to an invoice item or invoice item adjustment, such as for revenue schedules based on the Custom - Unlimited recognition model.   # noqa: E501

        :return: The reference_id of this PUTRSBasicInfoType.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PUTRSBasicInfoType.

        Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.  Use this field only when the revenue schedule is not linked to an invoice item or invoice item adjustment, such as for revenue schedules based on the Custom - Unlimited recognition model.   # noqa: E501

        :param reference_id: The reference_id of this PUTRSBasicInfoType.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PUTRSBasicInfoType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PUTRSBasicInfoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
