# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.account_credit_card_holder import AccountCreditCardHolder  # noqa: F401,E501


class CreditCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_holder_info': 'AccountCreditCardHolder',
        'card_number': 'str',
        'card_type': 'str',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'security_code': 'str'
    }

    attribute_map = {
        'card_holder_info': 'cardHolderInfo',
        'card_number': 'cardNumber',
        'card_type': 'cardType',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'security_code': 'securityCode'
    }

    def __init__(self, card_holder_info=None, card_number=None, card_type=None, expiration_month=None, expiration_year=None, security_code=None):  # noqa: E501
        """CreditCard - a model defined in Swagger"""  # noqa: E501

        self._card_holder_info = None
        self._card_number = None
        self._card_type = None
        self._expiration_month = None
        self._expiration_year = None
        self._security_code = None
        self.discriminator = None

        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        if card_number is not None:
            self.card_number = card_number
        if card_type is not None:
            self.card_type = card_type
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if security_code is not None:
            self.security_code = security_code

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this CreditCard.  # noqa: E501


        :return: The card_holder_info of this CreditCard.  # noqa: E501
        :rtype: AccountCreditCardHolder
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this CreditCard.


        :param card_holder_info: The card_holder_info of this CreditCard.  # noqa: E501
        :type: AccountCreditCardHolder
        """

        self._card_holder_info = card_holder_info

    @property
    def card_number(self):
        """Gets the card_number of this CreditCard.  # noqa: E501

        Card number. Once set, you cannot update or query the value of this field. The value of this field is only available in masked format. For example, XXXX-XXXX-XXXX-1234.   # noqa: E501

        :return: The card_number of this CreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CreditCard.

        Card number. Once set, you cannot update or query the value of this field. The value of this field is only available in masked format. For example, XXXX-XXXX-XXXX-1234.   # noqa: E501

        :param card_number: The card_number of this CreditCard.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this CreditCard.  # noqa: E501

        Type of card.   # noqa: E501

        :return: The card_type of this CreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CreditCard.

        Type of card.   # noqa: E501

        :param card_type: The card_type of this CreditCard.  # noqa: E501
        :type: str
        """
        allowed_values = ["Visa", "MasterCard", "AmericanExpress", "Discover", "JCB", "Diners", "CUP", "Maestro", "Electron", "AppleVisa", "AppleMasterCard", "AppleAmericanExpress", "AppleDiscover", "AppleJCB", "Elo", "Hipercard", "Naranja", "Nativa", "TarjetaShopping", "Cencosud", "Argencard", "Cabal"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CreditCard.  # noqa: E501

        Expiration date of the card.   # noqa: E501

        :return: The expiration_month of this CreditCard.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CreditCard.

        Expiration date of the card.   # noqa: E501

        :param expiration_month: The expiration_month of this CreditCard.  # noqa: E501
        :type: int
        """
        if expiration_month is not None and expiration_month > 12:  # noqa: E501
            raise ValueError("Invalid value for `expiration_month`, must be a value less than or equal to `12`")  # noqa: E501
        if expiration_month is not None and expiration_month < 1:  # noqa: E501
            raise ValueError("Invalid value for `expiration_month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CreditCard.  # noqa: E501

        Expiration year of the card.   # noqa: E501

        :return: The expiration_year of this CreditCard.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CreditCard.

        Expiration year of the card.   # noqa: E501

        :param expiration_year: The expiration_year of this CreditCard.  # noqa: E501
        :type: int
        """
        if expiration_year is not None and expiration_year > 2500:  # noqa: E501
            raise ValueError("Invalid value for `expiration_year`, must be a value less than or equal to `2500`")  # noqa: E501
        if expiration_year is not None and expiration_year < 1980:  # noqa: E501
            raise ValueError("Invalid value for `expiration_year`, must be a value greater than or equal to `1980`")  # noqa: E501

        self._expiration_year = expiration_year

    @property
    def security_code(self):
        """Gets the security_code of this CreditCard.  # noqa: E501

        CVV or CVV2 security code of the card. To ensure PCI compliance, Zuora does not store the value of this field.   # noqa: E501

        :return: The security_code of this CreditCard.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this CreditCard.

        CVV or CVV2 security code of the card. To ensure PCI compliance, Zuora does not store the value of this field.   # noqa: E501

        :param security_code: The security_code of this CreditCard.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
