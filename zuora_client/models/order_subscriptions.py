# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.order_action import OrderAction  # noqa: F401,E501
from zuora_client.models.subscription_object_custom_fields import SubscriptionObjectCustomFields  # noqa: F401,E501


class OrderSubscriptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_version': 'int',
        'custom_fields': 'SubscriptionObjectCustomFields',
        'new_version': 'int',
        'order_actions': 'list[OrderAction]',
        'sequence': 'int',
        'subscription_number': 'str'
    }

    attribute_map = {
        'base_version': 'baseVersion',
        'custom_fields': 'customFields',
        'new_version': 'newVersion',
        'order_actions': 'orderActions',
        'sequence': 'sequence',
        'subscription_number': 'subscriptionNumber'
    }

    def __init__(self, base_version=None, custom_fields=None, new_version=None, order_actions=None, sequence=None, subscription_number=None):  # noqa: E501
        """OrderSubscriptions - a model defined in Swagger"""  # noqa: E501

        self._base_version = None
        self._custom_fields = None
        self._new_version = None
        self._order_actions = None
        self._sequence = None
        self._subscription_number = None
        self.discriminator = None

        if base_version is not None:
            self.base_version = base_version
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if new_version is not None:
            self.new_version = new_version
        if order_actions is not None:
            self.order_actions = order_actions
        if sequence is not None:
            self.sequence = sequence
        if subscription_number is not None:
            self.subscription_number = subscription_number

    @property
    def base_version(self):
        """Gets the base_version of this OrderSubscriptions.  # noqa: E501

        The base version of the subscription.  # noqa: E501

        :return: The base_version of this OrderSubscriptions.  # noqa: E501
        :rtype: int
        """
        return self._base_version

    @base_version.setter
    def base_version(self, base_version):
        """Sets the base_version of this OrderSubscriptions.

        The base version of the subscription.  # noqa: E501

        :param base_version: The base_version of this OrderSubscriptions.  # noqa: E501
        :type: int
        """

        self._base_version = base_version

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderSubscriptions.  # noqa: E501


        :return: The custom_fields of this OrderSubscriptions.  # noqa: E501
        :rtype: SubscriptionObjectCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderSubscriptions.


        :param custom_fields: The custom_fields of this OrderSubscriptions.  # noqa: E501
        :type: SubscriptionObjectCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def new_version(self):
        """Gets the new_version of this OrderSubscriptions.  # noqa: E501

        The latest version of the subscription.  # noqa: E501

        :return: The new_version of this OrderSubscriptions.  # noqa: E501
        :rtype: int
        """
        return self._new_version

    @new_version.setter
    def new_version(self, new_version):
        """Sets the new_version of this OrderSubscriptions.

        The latest version of the subscription.  # noqa: E501

        :param new_version: The new_version of this OrderSubscriptions.  # noqa: E501
        :type: int
        """

        self._new_version = new_version

    @property
    def order_actions(self):
        """Gets the order_actions of this OrderSubscriptions.  # noqa: E501


        :return: The order_actions of this OrderSubscriptions.  # noqa: E501
        :rtype: list[OrderAction]
        """
        return self._order_actions

    @order_actions.setter
    def order_actions(self, order_actions):
        """Sets the order_actions of this OrderSubscriptions.


        :param order_actions: The order_actions of this OrderSubscriptions.  # noqa: E501
        :type: list[OrderAction]
        """

        self._order_actions = order_actions

    @property
    def sequence(self):
        """Gets the sequence of this OrderSubscriptions.  # noqa: E501

        The sequence number of a certain subscription processed by the order.  # noqa: E501

        :return: The sequence of this OrderSubscriptions.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this OrderSubscriptions.

        The sequence number of a certain subscription processed by the order.  # noqa: E501

        :param sequence: The sequence of this OrderSubscriptions.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def subscription_number(self):
        """Gets the subscription_number of this OrderSubscriptions.  # noqa: E501

        The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.  # noqa: E501

        :return: The subscription_number of this OrderSubscriptions.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this OrderSubscriptions.

        The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.  # noqa: E501

        :param subscription_number: The subscription_number of this OrderSubscriptions.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderSubscriptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderSubscriptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
