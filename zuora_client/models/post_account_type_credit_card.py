# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.payment_method_object_custom_fields import PaymentMethodObjectCustomFields  # noqa: F401,E501
from zuora_client.models.post_account_type_credit_card_card_holder_info import POSTAccountTypeCreditCardCardHolderInfo  # noqa: F401,E501


class POSTAccountTypeCreditCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_holder_info': 'POSTAccountTypeCreditCardCardHolderInfo',
        'card_number': 'str',
        'card_type': 'str',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'security_code': 'str'
    }

    attribute_map = {
        'card_holder_info': 'cardHolderInfo',
        'card_number': 'cardNumber',
        'card_type': 'cardType',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'security_code': 'securityCode'
    }

    def __init__(self, card_holder_info=None, card_number=None, card_type=None, expiration_month=None, expiration_year=None, security_code=None):  # noqa: E501
        """POSTAccountTypeCreditCard - a model defined in Swagger"""  # noqa: E501

        self._card_holder_info = None
        self._card_number = None
        self._card_type = None
        self._expiration_month = None
        self._expiration_year = None
        self._security_code = None
        self.discriminator = None

        self.card_holder_info = card_holder_info
        self.card_number = card_number
        self.card_type = card_type
        self.expiration_month = expiration_month
        self.expiration_year = expiration_year
        if security_code is not None:
            self.security_code = security_code

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this POSTAccountTypeCreditCard.  # noqa: E501


        :return: The card_holder_info of this POSTAccountTypeCreditCard.  # noqa: E501
        :rtype: POSTAccountTypeCreditCardCardHolderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this POSTAccountTypeCreditCard.


        :param card_holder_info: The card_holder_info of this POSTAccountTypeCreditCard.  # noqa: E501
        :type: POSTAccountTypeCreditCardCardHolderInfo
        """
        if card_holder_info is None:
            raise ValueError("Invalid value for `card_holder_info`, must not be `None`")  # noqa: E501

        self._card_holder_info = card_holder_info

    @property
    def card_number(self):
        """Gets the card_number of this POSTAccountTypeCreditCard.  # noqa: E501

        Card number, up to 16 characters. Once created, this field can't be updated or queried, and is only available in masked format (e.g., XXXX-XXXX-XXXX-1234).   # noqa: E501

        :return: The card_number of this POSTAccountTypeCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this POSTAccountTypeCreditCard.

        Card number, up to 16 characters. Once created, this field can't be updated or queried, and is only available in masked format (e.g., XXXX-XXXX-XXXX-1234).   # noqa: E501

        :param card_number: The card_number of this POSTAccountTypeCreditCard.  # noqa: E501
        :type: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")  # noqa: E501

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this POSTAccountTypeCreditCard.  # noqa: E501

        The type of the credit card.  Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The card_type of this POSTAccountTypeCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this POSTAccountTypeCreditCard.

        The type of the credit card.  Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param card_type: The card_type of this POSTAccountTypeCreditCard.  # noqa: E501
        :type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501

        self._card_type = card_type

    @property
    def expiration_month(self):
        """Gets the expiration_month of this POSTAccountTypeCreditCard.  # noqa: E501

        Two-digit expiration month (01-12).   # noqa: E501

        :return: The expiration_month of this POSTAccountTypeCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this POSTAccountTypeCreditCard.

        Two-digit expiration month (01-12).   # noqa: E501

        :param expiration_month: The expiration_month of this POSTAccountTypeCreditCard.  # noqa: E501
        :type: str
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this POSTAccountTypeCreditCard.  # noqa: E501

        Four-digit expiration year.   # noqa: E501

        :return: The expiration_year of this POSTAccountTypeCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this POSTAccountTypeCreditCard.

        Four-digit expiration year.   # noqa: E501

        :param expiration_year: The expiration_year of this POSTAccountTypeCreditCard.  # noqa: E501
        :type: str
        """
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")  # noqa: E501

        self._expiration_year = expiration_year

    @property
    def security_code(self):
        """Gets the security_code of this POSTAccountTypeCreditCard.  # noqa: E501

        The CVV or CVV2 security code of the card. To ensure PCI compliance, this value isn't stored and can't be queried.   # noqa: E501

        :return: The security_code of this POSTAccountTypeCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this POSTAccountTypeCreditCard.

        The CVV or CVV2 security code of the card. To ensure PCI compliance, this value isn't stored and can't be queried.   # noqa: E501

        :param security_code: The security_code of this POSTAccountTypeCreditCard.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTAccountTypeCreditCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTAccountTypeCreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
