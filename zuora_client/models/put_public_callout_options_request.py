# coding: utf-8




import pprint
import re  # noqa: F401

import six


class PUTPublicCalloutOptionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirm_suc_from_res_content': 'bool',
        'interval_time': 'int',
        'retry_number': 'int'
    }

    attribute_map = {
        'confirm_suc_from_res_content': 'confirmSucFromResContent',
        'interval_time': 'intervalTime',
        'retry_number': 'retryNumber'
    }

    def __init__(self, confirm_suc_from_res_content=None, interval_time=None, retry_number=None):  # noqa: E501
        """PUTPublicCalloutOptionsRequest - a model defined in Swagger"""  # noqa: E501

        self._confirm_suc_from_res_content = None
        self._interval_time = None
        self._retry_number = None
        self.discriminator = None

        if confirm_suc_from_res_content is not None:
            self.confirm_suc_from_res_content = confirm_suc_from_res_content
        if interval_time is not None:
            self.interval_time = interval_time
        if retry_number is not None:
            self.retry_number = retry_number

    @property
    def confirm_suc_from_res_content(self):
        """Gets the confirm_suc_from_res_content of this PUTPublicCalloutOptionsRequest.  # noqa: E501

        If the value is `false`, callout is successful when response code is 200. If value is `true`, when the response code is 200, and ONLY when response `Content-Type` is `application/json` and body payload is `{success:true}`, the callout is succesful.  # noqa: E501

        :return: The confirm_suc_from_res_content of this PUTPublicCalloutOptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._confirm_suc_from_res_content

    @confirm_suc_from_res_content.setter
    def confirm_suc_from_res_content(self, confirm_suc_from_res_content):
        """Sets the confirm_suc_from_res_content of this PUTPublicCalloutOptionsRequest.

        If the value is `false`, callout is successful when response code is 200. If value is `true`, when the response code is 200, and ONLY when response `Content-Type` is `application/json` and body payload is `{success:true}`, the callout is succesful.  # noqa: E501

        :param confirm_suc_from_res_content: The confirm_suc_from_res_content of this PUTPublicCalloutOptionsRequest.  # noqa: E501
        :type: bool
        """

        self._confirm_suc_from_res_content = confirm_suc_from_res_content

    @property
    def interval_time(self):
        """Gets the interval_time of this PUTPublicCalloutOptionsRequest.  # noqa: E501

        The interval, in minutes, between callout retries.  # noqa: E501

        :return: The interval_time of this PUTPublicCalloutOptionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._interval_time

    @interval_time.setter
    def interval_time(self, interval_time):
        """Sets the interval_time of this PUTPublicCalloutOptionsRequest.

        The interval, in minutes, between callout retries.  # noqa: E501

        :param interval_time: The interval_time of this PUTPublicCalloutOptionsRequest.  # noqa: E501
        :type: int
        """
        if interval_time is not None and interval_time < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval_time = interval_time

    @property
    def retry_number(self):
        """Gets the retry_number of this PUTPublicCalloutOptionsRequest.  # noqa: E501

        The number of retries when the callout fails.  # noqa: E501

        :return: The retry_number of this PUTPublicCalloutOptionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._retry_number

    @retry_number.setter
    def retry_number(self, retry_number):
        """Sets the retry_number of this PUTPublicCalloutOptionsRequest.

        The number of retries when the callout fails.  # noqa: E501

        :param retry_number: The retry_number of this PUTPublicCalloutOptionsRequest.  # noqa: E501
        :type: int
        """
        if retry_number is not None and retry_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `retry_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._retry_number = retry_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PUTPublicCalloutOptionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PUTPublicCalloutOptionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
