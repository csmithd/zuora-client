# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_revenue_item_type import GETRevenueItemType  # noqa: F401,E501


class GETChargeRSDetailType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'amount': 'str',
        'currency': 'str',
        'notes': 'str',
        'number': 'str',
        'recognition_rule_name': 'str',
        'recognized_revenue': 'str',
        'revenue_items': 'list[GETRevenueItemType]',
        'subscription_charge_id': 'str',
        'subscription_id': 'str',
        'success': 'bool',
        'undistributed_unrecognized_revenue': 'str',
        'unrecognized_revenue': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'currency': 'currency',
        'notes': 'notes',
        'number': 'number',
        'recognition_rule_name': 'recognitionRuleName',
        'recognized_revenue': 'recognizedRevenue',
        'revenue_items': 'revenueItems',
        'subscription_charge_id': 'subscriptionChargeId',
        'subscription_id': 'subscriptionId',
        'success': 'success',
        'undistributed_unrecognized_revenue': 'undistributedUnrecognizedRevenue',
        'unrecognized_revenue': 'unrecognizedRevenue'
    }

    def __init__(self, account_id=None, amount=None, currency=None, notes=None, number=None, recognition_rule_name=None, recognized_revenue=None, revenue_items=None, subscription_charge_id=None, subscription_id=None, success=None, undistributed_unrecognized_revenue=None, unrecognized_revenue=None):  # noqa: E501
        """GETChargeRSDetailType - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._amount = None
        self._currency = None
        self._notes = None
        self._number = None
        self._recognition_rule_name = None
        self._recognized_revenue = None
        self._revenue_items = None
        self._subscription_charge_id = None
        self._subscription_id = None
        self._success = None
        self._undistributed_unrecognized_revenue = None
        self._unrecognized_revenue = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if notes is not None:
            self.notes = notes
        if number is not None:
            self.number = number
        if recognition_rule_name is not None:
            self.recognition_rule_name = recognition_rule_name
        if recognized_revenue is not None:
            self.recognized_revenue = recognized_revenue
        if revenue_items is not None:
            self.revenue_items = revenue_items
        if subscription_charge_id is not None:
            self.subscription_charge_id = subscription_charge_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if success is not None:
            self.success = success
        if undistributed_unrecognized_revenue is not None:
            self.undistributed_unrecognized_revenue = undistributed_unrecognized_revenue
        if unrecognized_revenue is not None:
            self.unrecognized_revenue = unrecognized_revenue

    @property
    def account_id(self):
        """Gets the account_id of this GETChargeRSDetailType.  # noqa: E501

        An account ID.   # noqa: E501

        :return: The account_id of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GETChargeRSDetailType.

        An account ID.   # noqa: E501

        :param account_id: The account_id of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this GETChargeRSDetailType.  # noqa: E501

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or USD *30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  *\"Allocation amount with wrong decimal places.\"*   # noqa: E501

        :return: The amount of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GETChargeRSDetailType.

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or USD *30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  *\"Allocation amount with wrong decimal places.\"*   # noqa: E501

        :param amount: The amount of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this GETChargeRSDetailType.  # noqa: E501

        The type of currency used.    # noqa: E501

        :return: The currency of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETChargeRSDetailType.

        The type of currency used.    # noqa: E501

        :param currency: The currency of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def notes(self):
        """Gets the notes of this GETChargeRSDetailType.  # noqa: E501

        Additional information about this record.   # noqa: E501

        :return: The notes of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GETChargeRSDetailType.

        Additional information about this record.   # noqa: E501

        :param notes: The notes of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def number(self):
        """Gets the number of this GETChargeRSDetailType.  # noqa: E501

        The charge revenue summary number.   # noqa: E501

        :return: The number of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GETChargeRSDetailType.

        The charge revenue summary number.   # noqa: E501

        :param number: The number of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def recognition_rule_name(self):
        """Gets the recognition_rule_name of this GETChargeRSDetailType.  # noqa: E501

        The name of the recognition rule.   # noqa: E501

        :return: The recognition_rule_name of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._recognition_rule_name

    @recognition_rule_name.setter
    def recognition_rule_name(self, recognition_rule_name):
        """Sets the recognition_rule_name of this GETChargeRSDetailType.

        The name of the recognition rule.   # noqa: E501

        :param recognition_rule_name: The recognition_rule_name of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._recognition_rule_name = recognition_rule_name

    @property
    def recognized_revenue(self):
        """Gets the recognized_revenue of this GETChargeRSDetailType.  # noqa: E501

        The revenue that was distributed in a closed accounting period.   # noqa: E501

        :return: The recognized_revenue of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue

    @recognized_revenue.setter
    def recognized_revenue(self, recognized_revenue):
        """Sets the recognized_revenue of this GETChargeRSDetailType.

        The revenue that was distributed in a closed accounting period.   # noqa: E501

        :param recognized_revenue: The recognized_revenue of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._recognized_revenue = recognized_revenue

    @property
    def revenue_items(self):
        """Gets the revenue_items of this GETChargeRSDetailType.  # noqa: E501

        Revenue items are listed in ascending order by the accounting period start date.   # noqa: E501

        :return: The revenue_items of this GETChargeRSDetailType.  # noqa: E501
        :rtype: list[GETRevenueItemType]
        """
        return self._revenue_items

    @revenue_items.setter
    def revenue_items(self, revenue_items):
        """Sets the revenue_items of this GETChargeRSDetailType.

        Revenue items are listed in ascending order by the accounting period start date.   # noqa: E501

        :param revenue_items: The revenue_items of this GETChargeRSDetailType.  # noqa: E501
        :type: list[GETRevenueItemType]
        """

        self._revenue_items = revenue_items

    @property
    def subscription_charge_id(self):
        """Gets the subscription_charge_id of this GETChargeRSDetailType.  # noqa: E501

        The original subscription charge ID.   # noqa: E501

        :return: The subscription_charge_id of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._subscription_charge_id

    @subscription_charge_id.setter
    def subscription_charge_id(self, subscription_charge_id):
        """Sets the subscription_charge_id of this GETChargeRSDetailType.

        The original subscription charge ID.   # noqa: E501

        :param subscription_charge_id: The subscription_charge_id of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._subscription_charge_id = subscription_charge_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this GETChargeRSDetailType.  # noqa: E501

        The original subscription ID.   # noqa: E501

        :return: The subscription_id of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this GETChargeRSDetailType.

        The original subscription ID.   # noqa: E501

        :param subscription_id: The subscription_id of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def success(self):
        """Gets the success of this GETChargeRSDetailType.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this GETChargeRSDetailType.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GETChargeRSDetailType.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this GETChargeRSDetailType.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def undistributed_unrecognized_revenue(self):
        """Gets the undistributed_unrecognized_revenue of this GETChargeRSDetailType.  # noqa: E501

        Revenue in the open-ended accounting period.   # noqa: E501

        :return: The undistributed_unrecognized_revenue of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._undistributed_unrecognized_revenue

    @undistributed_unrecognized_revenue.setter
    def undistributed_unrecognized_revenue(self, undistributed_unrecognized_revenue):
        """Sets the undistributed_unrecognized_revenue of this GETChargeRSDetailType.

        Revenue in the open-ended accounting period.   # noqa: E501

        :param undistributed_unrecognized_revenue: The undistributed_unrecognized_revenue of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._undistributed_unrecognized_revenue = undistributed_unrecognized_revenue

    @property
    def unrecognized_revenue(self):
        """Gets the unrecognized_revenue of this GETChargeRSDetailType.  # noqa: E501

        Revenue distributed in all open accounting periods, which includes the open-ended accounting period.   # noqa: E501

        :return: The unrecognized_revenue of this GETChargeRSDetailType.  # noqa: E501
        :rtype: str
        """
        return self._unrecognized_revenue

    @unrecognized_revenue.setter
    def unrecognized_revenue(self, unrecognized_revenue):
        """Sets the unrecognized_revenue of this GETChargeRSDetailType.

        Revenue distributed in all open accounting periods, which includes the open-ended accounting period.   # noqa: E501

        :param unrecognized_revenue: The unrecognized_revenue of this GETChargeRSDetailType.  # noqa: E501
        :type: str
        """

        self._unrecognized_revenue = unrecognized_revenue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETChargeRSDetailType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETChargeRSDetailType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
