# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.revenue_event_object_custom_fields import RevenueEventObjectCustomFields  # noqa: F401,E501


class PUTSpecificDateAllocationType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'distribute_on': 'date',
        'distribution_type': 'str',
        'event_type': 'str',
        'event_type_system_id': 'str',
        'notes': 'str',
        'percentage': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'distribute_on': 'distributeOn',
        'distribution_type': 'distributionType',
        'event_type': 'eventType',
        'event_type_system_id': 'eventTypeSystemId',
        'notes': 'notes',
        'percentage': 'percentage'
    }

    def __init__(self, amount=None, distribute_on=None, distribution_type=None, event_type=None, event_type_system_id=None, notes=None, percentage=None):  # noqa: E501
        """PUTSpecificDateAllocationType - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._distribute_on = None
        self._distribution_type = None
        self._event_type = None
        self._event_type_system_id = None
        self._notes = None
        self._percentage = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        self.distribute_on = distribute_on
        self.distribution_type = distribution_type
        if event_type is not None:
            self.event_type = event_type
        if event_type_system_id is not None:
            self.event_type_system_id = event_type_system_id
        if notes is not None:
            self.notes = notes
        if percentage is not None:
            self.percentage = percentage

    @property
    def amount(self):
        """Gets the amount of this PUTSpecificDateAllocationType.  # noqa: E501

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`   # noqa: E501

        :return: The amount of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PUTSpecificDateAllocationType.

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`   # noqa: E501

        :param amount: The amount of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def distribute_on(self):
        """Gets the distribute_on of this PUTSpecificDateAllocationType.  # noqa: E501

        The recognition date on which to distribute revenue for milestone-based recognition.  Type: date in `yyyy-mm-dd` format.   # noqa: E501

        :return: The distribute_on of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: date
        """
        return self._distribute_on

    @distribute_on.setter
    def distribute_on(self, distribute_on):
        """Sets the distribute_on of this PUTSpecificDateAllocationType.

        The recognition date on which to distribute revenue for milestone-based recognition.  Type: date in `yyyy-mm-dd` format.   # noqa: E501

        :param distribute_on: The distribute_on of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: date
        """
        if distribute_on is None:
            raise ValueError("Invalid value for `distribute_on`, must not be `None`")  # noqa: E501

        self._distribute_on = distribute_on

    @property
    def distribution_type(self):
        """Gets the distribution_type of this PUTSpecificDateAllocationType.  # noqa: E501

        How to distribute the revenue for milestone-based recognition.   # noqa: E501

        :return: The distribution_type of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: str
        """
        return self._distribution_type

    @distribution_type.setter
    def distribution_type(self, distribution_type):
        """Sets the distribution_type of this PUTSpecificDateAllocationType.

        How to distribute the revenue for milestone-based recognition.   # noqa: E501

        :param distribution_type: The distribution_type of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: str
        """
        if distribution_type is None:
            raise ValueError("Invalid value for `distribution_type`, must not be `None`")  # noqa: E501
        allowed_values = ["specific date (delta fixed amount)", "specific date (delta percent total)", "specific date (delta percent undistributed)"]  # noqa: E501
        if distribution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `distribution_type` ({0}), must be one of {1}"  # noqa: E501
                .format(distribution_type, allowed_values)
            )

        self._distribution_type = distribution_type

    @property
    def event_type(self):
        """Gets the event_type of this PUTSpecificDateAllocationType.  # noqa: E501

        Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.  Note that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Invoice Settlement feature.   # noqa: E501

        :return: The event_type of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PUTSpecificDateAllocationType.

        Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.  Note that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Invoice Settlement feature.   # noqa: E501

        :param event_type: The event_type of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Invoice Posted", "Invoice Item Adjustment Created", "Invoice Canceled", "Invoice Item Adjustment Canceled", "Revenue Distributed", "Credit Memo Posted", "Debit Memo Posted"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def event_type_system_id(self):
        """Gets the event_type_system_id of this PUTSpecificDateAllocationType.  # noqa: E501

        System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.   # noqa: E501

        :return: The event_type_system_id of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: str
        """
        return self._event_type_system_id

    @event_type_system_id.setter
    def event_type_system_id(self, event_type_system_id):
        """Sets the event_type_system_id of this PUTSpecificDateAllocationType.

        System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.   # noqa: E501

        :param event_type_system_id: The event_type_system_id of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: str
        """

        self._event_type_system_id = event_type_system_id

    @property
    def notes(self):
        """Gets the notes of this PUTSpecificDateAllocationType.  # noqa: E501

        Additional information about this record.   # noqa: E501

        :return: The notes of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PUTSpecificDateAllocationType.

        Additional information about this record.   # noqa: E501

        :param notes: The notes of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def percentage(self):
        """Gets the percentage of this PUTSpecificDateAllocationType.  # noqa: E501

        Percentage of the total recognition amount or total undistributed to distribute.  Required if distributionType is either: * specific date (delta percent total) * specific date (delta percent undistributed)   # noqa: E501

        :return: The percentage of this PUTSpecificDateAllocationType.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PUTSpecificDateAllocationType.

        Percentage of the total recognition amount or total undistributed to distribute.  Required if distributionType is either: * specific date (delta percent total) * specific date (delta percent undistributed)   # noqa: E501

        :param percentage: The percentage of this PUTSpecificDateAllocationType.  # noqa: E501
        :type: str
        """

        self._percentage = percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PUTSpecificDateAllocationType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PUTSpecificDateAllocationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
