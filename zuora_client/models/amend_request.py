# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.amend_request_amend_options import AmendRequestAmendOptions  # noqa: F401,E501
from zuora_client.models.amend_request_preview_options import AmendRequestPreviewOptions  # noqa: F401,E501
from zuora_client.models.amendment import Amendment  # noqa: F401,E501


class AmendRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amend_options': 'AmendRequestAmendOptions',
        'amendments': 'list[Amendment]',
        'preview_options': 'AmendRequestPreviewOptions'
    }

    attribute_map = {
        'amend_options': 'AmendOptions',
        'amendments': 'Amendments',
        'preview_options': 'PreviewOptions'
    }

    def __init__(self, amend_options=None, amendments=None, preview_options=None):  # noqa: E501
        """AmendRequest - a model defined in Swagger"""  # noqa: E501

        self._amend_options = None
        self._amendments = None
        self._preview_options = None
        self.discriminator = None

        if amend_options is not None:
            self.amend_options = amend_options
        self.amendments = amendments
        if preview_options is not None:
            self.preview_options = preview_options

    @property
    def amend_options(self):
        """Gets the amend_options of this AmendRequest.  # noqa: E501


        :return: The amend_options of this AmendRequest.  # noqa: E501
        :rtype: AmendRequestAmendOptions
        """
        return self._amend_options

    @amend_options.setter
    def amend_options(self, amend_options):
        """Sets the amend_options of this AmendRequest.


        :param amend_options: The amend_options of this AmendRequest.  # noqa: E501
        :type: AmendRequestAmendOptions
        """

        self._amend_options = amend_options

    @property
    def amendments(self):
        """Gets the amendments of this AmendRequest.  # noqa: E501

        The `Amendment` object holds the changes that you want to make to the Subscription specified by the `SubscriptionId`,  including its `RatePlan`, `RatePlanCharge`, and `RatePlanChargeTier`.   # noqa: E501

        :return: The amendments of this AmendRequest.  # noqa: E501
        :rtype: list[Amendment]
        """
        return self._amendments

    @amendments.setter
    def amendments(self, amendments):
        """Sets the amendments of this AmendRequest.

        The `Amendment` object holds the changes that you want to make to the Subscription specified by the `SubscriptionId`,  including its `RatePlan`, `RatePlanCharge`, and `RatePlanChargeTier`.   # noqa: E501

        :param amendments: The amendments of this AmendRequest.  # noqa: E501
        :type: list[Amendment]
        """
        if amendments is None:
            raise ValueError("Invalid value for `amendments`, must not be `None`")  # noqa: E501

        self._amendments = amendments

    @property
    def preview_options(self):
        """Gets the preview_options of this AmendRequest.  # noqa: E501


        :return: The preview_options of this AmendRequest.  # noqa: E501
        :rtype: AmendRequestPreviewOptions
        """
        return self._preview_options

    @preview_options.setter
    def preview_options(self, preview_options):
        """Sets the preview_options of this AmendRequest.


        :param preview_options: The preview_options of this AmendRequest.  # noqa: E501
        :type: AmendRequestPreviewOptions
        """

        self._preview_options = preview_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmendRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmendRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
