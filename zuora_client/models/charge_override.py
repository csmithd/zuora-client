# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.charge_override_billing import ChargeOverrideBilling  # noqa: F401,E501
from zuora_client.models.charge_override_pricing import ChargeOverridePricing  # noqa: F401,E501
from zuora_client.models.end_conditions import EndConditions  # noqa: F401,E501
from zuora_client.models.rate_plan_charge_object_custom_fields import RatePlanChargeObjectCustomFields  # noqa: F401,E501
from zuora_client.models.trigger_params import TriggerParams  # noqa: F401,E501


class ChargeOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing': 'ChargeOverrideBilling',
        'charge_number': 'str',
        'custom_fields': 'RatePlanChargeObjectCustomFields',
        'description': 'str',
        'end_date': 'EndConditions',
        'pricing': 'ChargeOverridePricing',
        'product_rate_plan_charge_id': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'str',
        'revenue_recognition_rule_name': 'str',
        'start_date': 'TriggerParams',
        'unique_token': 'str'
    }

    attribute_map = {
        'billing': 'billing',
        'charge_number': 'chargeNumber',
        'custom_fields': 'customFields',
        'description': 'description',
        'end_date': 'endDate',
        'pricing': 'pricing',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'rev_rec_code': 'revRecCode',
        'rev_rec_trigger_condition': 'revRecTriggerCondition',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'start_date': 'startDate',
        'unique_token': 'uniqueToken'
    }

    def __init__(self, billing=None, charge_number=None, custom_fields=None, description=None, end_date=None, pricing=None, product_rate_plan_charge_id=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, start_date=None, unique_token=None):  # noqa: E501
        """ChargeOverride - a model defined in Swagger"""  # noqa: E501

        self._billing = None
        self._charge_number = None
        self._custom_fields = None
        self._description = None
        self._end_date = None
        self._pricing = None
        self._product_rate_plan_charge_id = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._start_date = None
        self._unique_token = None
        self.discriminator = None

        if billing is not None:
            self.billing = billing
        if charge_number is not None:
            self.charge_number = charge_number
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if end_date is not None:
            self.end_date = end_date
        if pricing is not None:
            self.pricing = pricing
        self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if start_date is not None:
            self.start_date = start_date
        if unique_token is not None:
            self.unique_token = unique_token

    @property
    def billing(self):
        """Gets the billing of this ChargeOverride.  # noqa: E501


        :return: The billing of this ChargeOverride.  # noqa: E501
        :rtype: ChargeOverrideBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this ChargeOverride.


        :param billing: The billing of this ChargeOverride.  # noqa: E501
        :type: ChargeOverrideBilling
        """

        self._billing = billing

    @property
    def charge_number(self):
        """Gets the charge_number of this ChargeOverride.  # noqa: E501

        Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number.   # noqa: E501

        :return: The charge_number of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this ChargeOverride.

        Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number.   # noqa: E501

        :param charge_number: The charge_number of this ChargeOverride.  # noqa: E501
        :type: str
        """
        if charge_number is not None and len(charge_number) > 50:
            raise ValueError("Invalid value for `charge_number`, length must be less than or equal to `50`")  # noqa: E501

        self._charge_number = charge_number

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ChargeOverride.  # noqa: E501


        :return: The custom_fields of this ChargeOverride.  # noqa: E501
        :rtype: RatePlanChargeObjectCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ChargeOverride.


        :param custom_fields: The custom_fields of this ChargeOverride.  # noqa: E501
        :type: RatePlanChargeObjectCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this ChargeOverride.  # noqa: E501

        Description of the charge.   # noqa: E501

        :return: The description of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChargeOverride.

        Description of the charge.   # noqa: E501

        :param description: The description of this ChargeOverride.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this ChargeOverride.  # noqa: E501


        :return: The end_date of this ChargeOverride.  # noqa: E501
        :rtype: EndConditions
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ChargeOverride.


        :param end_date: The end_date of this ChargeOverride.  # noqa: E501
        :type: EndConditions
        """

        self._end_date = end_date

    @property
    def pricing(self):
        """Gets the pricing of this ChargeOverride.  # noqa: E501


        :return: The pricing of this ChargeOverride.  # noqa: E501
        :rtype: ChargeOverridePricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this ChargeOverride.


        :param pricing: The pricing of this ChargeOverride.  # noqa: E501
        :type: ChargeOverridePricing
        """

        self._pricing = pricing

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this ChargeOverride.  # noqa: E501

        Internal identifier of the product rate plan charge that the charge is based on.   # noqa: E501

        :return: The product_rate_plan_charge_id of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this ChargeOverride.

        Internal identifier of the product rate plan charge that the charge is based on.   # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this ChargeOverride.  # noqa: E501
        :type: str
        """
        if product_rate_plan_charge_id is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this ChargeOverride.  # noqa: E501

        Revenue Recognition Code   # noqa: E501

        :return: The rev_rec_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this ChargeOverride.

        Revenue Recognition Code   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this ChargeOverride.  # noqa: E501
        :type: str
        """
        if rev_rec_code is not None and len(rev_rec_code) > 70:
            raise ValueError("Invalid value for `rev_rec_code`, length must be less than or equal to `70`")  # noqa: E501

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this ChargeOverride.  # noqa: E501

        Specifies the revenue recognition trigger condition.    * `Contract Effective Date`    * `Service Activation Date`   * `Customer Acceptance Date`   # noqa: E501

        :return: The rev_rec_trigger_condition of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this ChargeOverride.

        Specifies the revenue recognition trigger condition.    * `Contract Effective Date`    * `Service Activation Date`   * `Customer Acceptance Date`   # noqa: E501

        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this ChargeOverride.  # noqa: E501
        :type: str
        """
        allowed_values = ["Contract Effective Date", "Service Activation Date", "Customer Acceptance Date"]  # noqa: E501
        if rev_rec_trigger_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `rev_rec_trigger_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(rev_rec_trigger_condition, allowed_values)
            )

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this ChargeOverride.  # noqa: E501

        Specifies the revenue recognition rule.    * `Recognize upon invoicing`    * `Recognize daily over time`   # noqa: E501

        :return: The revenue_recognition_rule_name of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this ChargeOverride.

        Specifies the revenue recognition rule.    * `Recognize upon invoicing`    * `Recognize daily over time`   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this ChargeOverride.  # noqa: E501
        :type: str
        """
        allowed_values = ["Recognize upon invoicing", "Recognize daily over time"]  # noqa: E501
        if revenue_recognition_rule_name not in allowed_values:
            raise ValueError(
                "Invalid value for `revenue_recognition_rule_name` ({0}), must be one of {1}"  # noqa: E501
                .format(revenue_recognition_rule_name, allowed_values)
            )

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def start_date(self):
        """Gets the start_date of this ChargeOverride.  # noqa: E501


        :return: The start_date of this ChargeOverride.  # noqa: E501
        :rtype: TriggerParams
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ChargeOverride.


        :param start_date: The start_date of this ChargeOverride.  # noqa: E501
        :type: TriggerParams
        """

        self._start_date = start_date

    @property
    def unique_token(self):
        """Gets the unique_token of this ChargeOverride.  # noqa: E501

        Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.   # noqa: E501

        :return: The unique_token of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._unique_token

    @unique_token.setter
    def unique_token(self, unique_token):
        """Sets the unique_token of this ChargeOverride.

        Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.   # noqa: E501

        :param unique_token: The unique_token of this ChargeOverride.  # noqa: E501
        :type: str
        """
        if unique_token is not None and len(unique_token) > 50:
            raise ValueError("Invalid value for `unique_token`, length must be less than or equal to `50`")  # noqa: E501

        self._unique_token = unique_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargeOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
