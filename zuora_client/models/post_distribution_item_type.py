# coding: utf-8




import pprint
import re  # noqa: F401

import six


class POSTDistributionItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_period_name': 'str',
        'new_amount': 'str'
    }

    attribute_map = {
        'accounting_period_name': 'accountingPeriodName',
        'new_amount': 'newAmount'
    }

    def __init__(self, accounting_period_name=None, new_amount=None):  # noqa: E501
        """POSTDistributionItemType - a model defined in Swagger"""  # noqa: E501

        self._accounting_period_name = None
        self._new_amount = None
        self.discriminator = None

        self.accounting_period_name = accounting_period_name
        self.new_amount = new_amount

    @property
    def accounting_period_name(self):
        """Gets the accounting_period_name of this POSTDistributionItemType.  # noqa: E501

        Name of the accounting period. The open-ended accounting period is named `Open-Ended`.   The accounting period must be open.   # noqa: E501

        :return: The accounting_period_name of this POSTDistributionItemType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period_name

    @accounting_period_name.setter
    def accounting_period_name(self, accounting_period_name):
        """Sets the accounting_period_name of this POSTDistributionItemType.

        Name of the accounting period. The open-ended accounting period is named `Open-Ended`.   The accounting period must be open.   # noqa: E501

        :param accounting_period_name: The accounting_period_name of this POSTDistributionItemType.  # noqa: E501
        :type: str
        """
        if accounting_period_name is None:
            raise ValueError("Invalid value for `accounting_period_name`, must not be `None`")  # noqa: E501

        self._accounting_period_name = accounting_period_name

    @property
    def new_amount(self):
        """Gets the new_amount of this POSTDistributionItemType.  # noqa: E501

        Amount of revenue you want to distribute into the accounting period.  The value must be formatted based on the currency, for example, `JPY 30` or `USD 30.15`. If the value is formatted incorrectly, the following error message is returned: `Allocation amount with wrong decimal places.`   # noqa: E501

        :return: The new_amount of this POSTDistributionItemType.  # noqa: E501
        :rtype: str
        """
        return self._new_amount

    @new_amount.setter
    def new_amount(self, new_amount):
        """Sets the new_amount of this POSTDistributionItemType.

        Amount of revenue you want to distribute into the accounting period.  The value must be formatted based on the currency, for example, `JPY 30` or `USD 30.15`. If the value is formatted incorrectly, the following error message is returned: `Allocation amount with wrong decimal places.`   # noqa: E501

        :param new_amount: The new_amount of this POSTDistributionItemType.  # noqa: E501
        :type: str
        """
        if new_amount is None:
            raise ValueError("Invalid value for `new_amount`, must not be `None`")  # noqa: E501

        self._new_amount = new_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTDistributionItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTDistributionItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
