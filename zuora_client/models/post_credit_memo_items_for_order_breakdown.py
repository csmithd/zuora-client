# coding: utf-8




import pprint
import re  # noqa: F401

import six


class POSTCreditMemoItemsForOrderBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'memo_item_ids': 'list[str]',
        'memo_number': 'str'
    }

    attribute_map = {
        'memo_item_ids': 'memoItemIds',
        'memo_number': 'memoNumber'
    }

    def __init__(self, memo_item_ids=None, memo_number=None):  # noqa: E501
        """POSTCreditMemoItemsForOrderBreakdown - a model defined in Swagger"""  # noqa: E501

        self._memo_item_ids = None
        self._memo_number = None
        self.discriminator = None

        self.memo_item_ids = memo_item_ids
        self.memo_number = memo_number

    @property
    def memo_item_ids(self):
        """Gets the memo_item_ids of this POSTCreditMemoItemsForOrderBreakdown.  # noqa: E501

        The credit memo items to break down.  # noqa: E501

        :return: The memo_item_ids of this POSTCreditMemoItemsForOrderBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._memo_item_ids

    @memo_item_ids.setter
    def memo_item_ids(self, memo_item_ids):
        """Sets the memo_item_ids of this POSTCreditMemoItemsForOrderBreakdown.

        The credit memo items to break down.  # noqa: E501

        :param memo_item_ids: The memo_item_ids of this POSTCreditMemoItemsForOrderBreakdown.  # noqa: E501
        :type: list[str]
        """
        if memo_item_ids is None:
            raise ValueError("Invalid value for `memo_item_ids`, must not be `None`")  # noqa: E501

        self._memo_item_ids = memo_item_ids

    @property
    def memo_number(self):
        """Gets the memo_number of this POSTCreditMemoItemsForOrderBreakdown.  # noqa: E501

        The credit memo number which the invoice items belong to.  # noqa: E501

        :return: The memo_number of this POSTCreditMemoItemsForOrderBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._memo_number

    @memo_number.setter
    def memo_number(self, memo_number):
        """Sets the memo_number of this POSTCreditMemoItemsForOrderBreakdown.

        The credit memo number which the invoice items belong to.  # noqa: E501

        :param memo_number: The memo_number of this POSTCreditMemoItemsForOrderBreakdown.  # noqa: E501
        :type: str
        """
        if memo_number is None:
            raise ValueError("Invalid value for `memo_number`, must not be `None`")  # noqa: E501

        self._memo_number = memo_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTCreditMemoItemsForOrderBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTCreditMemoItemsForOrderBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
