# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.product_object_custom_fields import ProductObjectCustomFields  # noqa: F401,E501
from zuora_client.models.product_object_ns_fields import ProductObjectNSFields  # noqa: F401,E501


class ProxyCreateProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'str',
        'sync_date__ns': 'str',
        'allow_feature_changes': 'bool',
        'category': 'str',
        'description': 'str',
        'effective_end_date': 'date',
        'effective_start_date': 'date',
        'name': 'str',
        'sku': 'str'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'sync_date__ns': 'SyncDate__NS',
        'allow_feature_changes': 'AllowFeatureChanges',
        'category': 'Category',
        'description': 'Description',
        'effective_end_date': 'EffectiveEndDate',
        'effective_start_date': 'EffectiveStartDate',
        'name': 'Name',
        'sku': 'SKU'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, sync_date__ns=None, allow_feature_changes=None, category=None, description=None, effective_end_date=None, effective_start_date=None, name=None, sku=None):  # noqa: E501
        """ProxyCreateProduct - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._sync_date__ns = None
        self._allow_feature_changes = None
        self._category = None
        self._description = None
        self._effective_end_date = None
        self._effective_start_date = None
        self._name = None
        self._sku = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if allow_feature_changes is not None:
            self.allow_feature_changes = allow_feature_changes
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        self.effective_end_date = effective_end_date
        self.effective_start_date = effective_start_date
        self.name = name
        if sku is not None:
            self.sku = sku

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyCreateProduct.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyCreateProduct.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyCreateProduct.  # noqa: E501

        Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyCreateProduct.

        Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this ProxyCreateProduct.  # noqa: E501

        Type of item that is created in NetSuite for the product. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The item_type__ns of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this ProxyCreateProduct.

        Type of item that is created in NetSuite for the product. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param item_type__ns: The item_type__ns of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """
        allowed_values = ["Inventory", "Non Inventory", "Service"]  # noqa: E501
        if item_type__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(item_type__ns, allowed_values)
            )

        self._item_type__ns = item_type__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyCreateProduct.  # noqa: E501

        Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyCreateProduct.

        Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def allow_feature_changes(self):
        """Gets the allow_feature_changes of this ProxyCreateProduct.  # noqa: E501

         Controls whether to allow your users to add or remove features while creating or amending a subscription. **Character** **limit**: n/a **Values**: true, false (default)   # noqa: E501

        :return: The allow_feature_changes of this ProxyCreateProduct.  # noqa: E501
        :rtype: bool
        """
        return self._allow_feature_changes

    @allow_feature_changes.setter
    def allow_feature_changes(self, allow_feature_changes):
        """Sets the allow_feature_changes of this ProxyCreateProduct.

         Controls whether to allow your users to add or remove features while creating or amending a subscription. **Character** **limit**: n/a **Values**: true, false (default)   # noqa: E501

        :param allow_feature_changes: The allow_feature_changes of this ProxyCreateProduct.  # noqa: E501
        :type: bool
        """

        self._allow_feature_changes = allow_feature_changes

    @property
    def category(self):
        """Gets the category of this ProxyCreateProduct.  # noqa: E501

         Category of the product. Used by Zuora Quotes Guided Product Selector. **Character** **limit**: 100 **Values**: One of the following:  - Base Products - Add On Services - Miscellaneous Products   # noqa: E501

        :return: The category of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProxyCreateProduct.

         Category of the product. Used by Zuora Quotes Guided Product Selector. **Character** **limit**: 100 **Values**: One of the following:  - Base Products - Add On Services - Miscellaneous Products   # noqa: E501

        :param category: The category of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this ProxyCreateProduct.  # noqa: E501

         A descriptionof the product. **Character limit**: 500 **Values**: a string of 500 characters or fewer   # noqa: E501

        :return: The description of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProxyCreateProduct.

         A descriptionof the product. **Character limit**: 500 **Values**: a string of 500 characters or fewer   # noqa: E501

        :param description: The description of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this ProxyCreateProduct.  # noqa: E501

        The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format. **Character limit**: 29   # noqa: E501

        :return: The effective_end_date of this ProxyCreateProduct.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this ProxyCreateProduct.

        The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format. **Character limit**: 29   # noqa: E501

        :param effective_end_date: The effective_end_date of this ProxyCreateProduct.  # noqa: E501
        :type: date
        """
        if effective_end_date is None:
            raise ValueError("Invalid value for `effective_end_date`, must not be `None`")  # noqa: E501

        self._effective_end_date = effective_end_date

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this ProxyCreateProduct.  # noqa: E501

        The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format. **Character limit**: 29   # noqa: E501

        :return: The effective_start_date of this ProxyCreateProduct.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this ProxyCreateProduct.

        The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format. **Character limit**: 29   # noqa: E501

        :param effective_start_date: The effective_start_date of this ProxyCreateProduct.  # noqa: E501
        :type: date
        """
        if effective_start_date is None:
            raise ValueError("Invalid value for `effective_start_date`, must not be `None`")  # noqa: E501

        self._effective_start_date = effective_start_date

    @property
    def name(self):
        """Gets the name of this ProxyCreateProduct.  # noqa: E501

        The name of the product. This information is displayed in the product catalog pages in the web-based UI. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :return: The name of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProxyCreateProduct.

        The name of the product. This information is displayed in the product catalog pages in the web-based UI. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :param name: The name of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this ProxyCreateProduct.  # noqa: E501

        The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:  - leave null for automatic generated - an alphanumeric string of 50 characters or fewer   # noqa: E501

        :return: The sku of this ProxyCreateProduct.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProxyCreateProduct.

        The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:  - leave null for automatic generated - an alphanumeric string of 50 characters or fewer   # noqa: E501

        :param sku: The sku of this ProxyCreateProduct.  # noqa: E501
        :type: str
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCreateProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCreateProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
