# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.journal_entry_object_custom_fields import JournalEntryObjectCustomFields  # noqa: F401,E501
from zuora_client.models.put_journal_entry_item_type import PUTJournalEntryItemType  # noqa: F401,E501


class PUTBasicSummaryJournalEntryType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'journal_entry_items': 'list[PUTJournalEntryItemType]',
        'notes': 'str',
        'transferred_to_accounting': 'str'
    }

    attribute_map = {
        'journal_entry_items': 'journalEntryItems',
        'notes': 'notes',
        'transferred_to_accounting': 'transferredToAccounting'
    }

    def __init__(self, journal_entry_items=None, notes=None, transferred_to_accounting=None):  # noqa: E501
        """PUTBasicSummaryJournalEntryType - a model defined in Swagger"""  # noqa: E501

        self._journal_entry_items = None
        self._notes = None
        self._transferred_to_accounting = None
        self.discriminator = None

        if journal_entry_items is not None:
            self.journal_entry_items = journal_entry_items
        if notes is not None:
            self.notes = notes
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting

    @property
    def journal_entry_items(self):
        """Gets the journal_entry_items of this PUTBasicSummaryJournalEntryType.  # noqa: E501

        Key name that represents the list of journal entry items.   # noqa: E501

        :return: The journal_entry_items of this PUTBasicSummaryJournalEntryType.  # noqa: E501
        :rtype: list[PUTJournalEntryItemType]
        """
        return self._journal_entry_items

    @journal_entry_items.setter
    def journal_entry_items(self, journal_entry_items):
        """Sets the journal_entry_items of this PUTBasicSummaryJournalEntryType.

        Key name that represents the list of journal entry items.   # noqa: E501

        :param journal_entry_items: The journal_entry_items of this PUTBasicSummaryJournalEntryType.  # noqa: E501
        :type: list[PUTJournalEntryItemType]
        """

        self._journal_entry_items = journal_entry_items

    @property
    def notes(self):
        """Gets the notes of this PUTBasicSummaryJournalEntryType.  # noqa: E501

        Additional information about this record.  ***Character limit:*** 2,000   # noqa: E501

        :return: The notes of this PUTBasicSummaryJournalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PUTBasicSummaryJournalEntryType.

        Additional information about this record.  ***Character limit:*** 2,000   # noqa: E501

        :param notes: The notes of this PUTBasicSummaryJournalEntryType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this PUTBasicSummaryJournalEntryType.  # noqa: E501

        Status shows whether the journal entry has been transferred to an accounting system.   This field cannot be changed after the summary journal entry has been canceled.  **Note:** The Zuora Finance ***Override Transferred to Accounting*** permission is required to change `transferredToAccounting` from `Yes` to any other value.   # noqa: E501

        :return: The transferred_to_accounting of this PUTBasicSummaryJournalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this PUTBasicSummaryJournalEntryType.

        Status shows whether the journal entry has been transferred to an accounting system.   This field cannot be changed after the summary journal entry has been canceled.  **Note:** The Zuora Finance ***Override Transferred to Accounting*** permission is required to change `transferredToAccounting` from `Yes` to any other value.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this PUTBasicSummaryJournalEntryType.  # noqa: E501
        :type: str
        """
        allowed_values = ["No", "Processing", "Yes", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PUTBasicSummaryJournalEntryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PUTBasicSummaryJournalEntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
