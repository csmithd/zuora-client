# coding: utf-8




import pprint
import re  # noqa: F401

import six


class ProxyCreateExport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'convert_to_currencies': 'str',
        'encrypted': 'bool',
        'file_id': 'str',
        'format': 'str',
        'name': 'str',
        'query': 'str',
        'size': 'int',
        'status': 'str',
        'status_reason': 'str',
        'zip': 'bool'
    }

    attribute_map = {
        'convert_to_currencies': 'ConvertToCurrencies',
        'encrypted': 'Encrypted',
        'file_id': 'FileId',
        'format': 'Format',
        'name': 'Name',
        'query': 'Query',
        'size': 'Size',
        'status': 'Status',
        'status_reason': 'StatusReason',
        'zip': 'Zip'
    }

    def __init__(self, convert_to_currencies=None, encrypted=None, file_id=None, format=None, name=None, query=None, size=None, status=None, status_reason=None, zip=None):  # noqa: E501
        """ProxyCreateExport - a model defined in Swagger"""  # noqa: E501

        self._convert_to_currencies = None
        self._encrypted = None
        self._file_id = None
        self._format = None
        self._name = None
        self._query = None
        self._size = None
        self._status = None
        self._status_reason = None
        self._zip = None
        self.discriminator = None

        if convert_to_currencies is not None:
            self.convert_to_currencies = convert_to_currencies
        if encrypted is not None:
            self.encrypted = encrypted
        if file_id is not None:
            self.file_id = file_id
        self.format = format
        if name is not None:
            self.name = name
        self.query = query
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if status_reason is not None:
            self.status_reason = status_reason
        if zip is not None:
            self.zip = zip

    @property
    def convert_to_currencies(self):
        """Gets the convert_to_currencies of this ProxyCreateExport.  # noqa: E501

         The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their Foreign Currency Conversion enabled to use this field. **Character limit**: **Values**: a list of valid currency codes   # noqa: E501

        :return: The convert_to_currencies of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._convert_to_currencies

    @convert_to_currencies.setter
    def convert_to_currencies(self, convert_to_currencies):
        """Sets the convert_to_currencies of this ProxyCreateExport.

         The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their Foreign Currency Conversion enabled to use this field. **Character limit**: **Values**: a list of valid currency codes   # noqa: E501

        :param convert_to_currencies: The convert_to_currencies of this ProxyCreateExport.  # noqa: E501
        :type: str
        """

        self._convert_to_currencies = convert_to_currencies

    @property
    def encrypted(self):
        """Gets the encrypted of this ProxyCreateExport.  # noqa: E501

         Exports a secure version of encrypted data source fields. such as the AchAccountNumber field of the PaymentMethod object and the DefaultPaymentMethod data souce objects. **Character limit**: 5 **Values:** true, false   # noqa: E501

        :return: The encrypted of this ProxyCreateExport.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ProxyCreateExport.

         Exports a secure version of encrypted data source fields. such as the AchAccountNumber field of the PaymentMethod object and the DefaultPaymentMethod data souce objects. **Character limit**: 5 **Values:** true, false   # noqa: E501

        :param encrypted: The encrypted of this ProxyCreateExport.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def file_id(self):
        """Gets the file_id of this ProxyCreateExport.  # noqa: E501

         The ID of the file generated by an export query. This file is automatically generated when an Export object is created. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the export file. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The file_id of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ProxyCreateExport.

         The ID of the file generated by an export query. This file is automatically generated when an Export object is created. Use this file ID with [Get files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) to download the export file. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param file_id: The file_id of this ProxyCreateExport.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def format(self):
        """Gets the format of this ProxyCreateExport.  # noqa: E501

         The format that you want the export file to use. **Character limit**: 5   # noqa: E501

        :return: The format of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ProxyCreateExport.

         The format that you want the export file to use. **Character limit**: 5   # noqa: E501

        :param format: The format of this ProxyCreateExport.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["csv", "html", "Excel"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name(self):
        """Gets the name of this ProxyCreateExport.  # noqa: E501

         The name of the export. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The name of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProxyCreateExport.

         The name of the export. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param name: The name of this ProxyCreateExport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def query(self):
        """Gets the query of this ProxyCreateExport.  # noqa: E501

        [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) query.   # noqa: E501

        :return: The query of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ProxyCreateExport.

        [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) query.   # noqa: E501

        :param query: The query of this ProxyCreateExport.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def size(self):
        """Gets the size of this ProxyCreateExport.  # noqa: E501

         The number of records or rows exported. This field value is null until the export status is Completed. **Character limit**: **Values**: automatically generated   # noqa: E501

        :return: The size of this ProxyCreateExport.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ProxyCreateExport.

         The number of records or rows exported. This field value is null until the export status is Completed. **Character limit**: **Values**: automatically generated   # noqa: E501

        :param size: The size of this ProxyCreateExport.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this ProxyCreateExport.  # noqa: E501

         The status of the export. Type: string (enum) **Character limit**: 10 **Values**: automatically generated to be one of the following values:  - Pending - Processing - Completed - Canceled - Failed   # noqa: E501

        :return: The status of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyCreateExport.

         The status of the export. Type: string (enum) **Character limit**: 10 **Values**: automatically generated to be one of the following values:  - Pending - Processing - Completed - Canceled - Failed   # noqa: E501

        :param status: The status of this ProxyCreateExport.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this ProxyCreateExport.  # noqa: E501

         The reason for the given status. Use this information to help ascertain why an export failed. **Character limi**t: 255 **Values**: automatically generated   # noqa: E501

        :return: The status_reason of this ProxyCreateExport.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ProxyCreateExport.

         The reason for the given status. Use this information to help ascertain why an export failed. **Character limi**t: 255 **Values**: automatically generated   # noqa: E501

        :param status_reason: The status_reason of this ProxyCreateExport.  # noqa: E501
        :type: str
        """

        self._status_reason = status_reason

    @property
    def zip(self):
        """Gets the zip of this ProxyCreateExport.  # noqa: E501

         Indicates if you want the resulting export file to be compressed into a zip file. **Character limit**: **Values**: true, false (default)   # noqa: E501

        :return: The zip of this ProxyCreateExport.  # noqa: E501
        :rtype: bool
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this ProxyCreateExport.

         Indicates if you want the resulting export file to be compressed into a zip file. **Character limit**: **Values**: true, false (default)   # noqa: E501

        :param zip: The zip of this ProxyCreateExport.  # noqa: E501
        :type: bool
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCreateExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCreateExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
