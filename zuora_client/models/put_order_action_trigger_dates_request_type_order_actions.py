# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.put_order_action_trigger_dates_request_type_charges import PUTOrderActionTriggerDatesRequestTypeCharges  # noqa: F401,E501
from zuora_client.models.put_order_action_trigger_dates_request_type_trigger_dates import PUTOrderActionTriggerDatesRequestTypeTriggerDates  # noqa: F401,E501


class PUTOrderActionTriggerDatesRequestTypeOrderActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charges': 'list[PUTOrderActionTriggerDatesRequestTypeCharges]',
        'sequence': 'int',
        'trigger_dates': 'list[PUTOrderActionTriggerDatesRequestTypeTriggerDates]'
    }

    attribute_map = {
        'charges': 'charges',
        'sequence': 'sequence',
        'trigger_dates': 'triggerDates'
    }

    def __init__(self, charges=None, sequence=None, trigger_dates=None):  # noqa: E501
        """PUTOrderActionTriggerDatesRequestTypeOrderActions - a model defined in Swagger"""  # noqa: E501

        self._charges = None
        self._sequence = None
        self._trigger_dates = None
        self.discriminator = None

        if charges is not None:
            self.charges = charges
        self.sequence = sequence
        if trigger_dates is not None:
            self.trigger_dates = trigger_dates

    @property
    def charges(self):
        """Gets the charges of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501


        :return: The charges of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501
        :rtype: list[PUTOrderActionTriggerDatesRequestTypeCharges]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this PUTOrderActionTriggerDatesRequestTypeOrderActions.


        :param charges: The charges of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501
        :type: list[PUTOrderActionTriggerDatesRequestTypeCharges]
        """

        self._charges = charges

    @property
    def sequence(self):
        """Gets the sequence of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501

        Identifies which order action will have its triggering dates updated. Currently, you can only update the triggering dates of `CreateSubscription` order actions. This means that you must set `sequence` to 0, as there is only one `CreateSubscription` order action that affects each subscription.   # noqa: E501

        :return: The sequence of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this PUTOrderActionTriggerDatesRequestTypeOrderActions.

        Identifies which order action will have its triggering dates updated. Currently, you can only update the triggering dates of `CreateSubscription` order actions. This means that you must set `sequence` to 0, as there is only one `CreateSubscription` order action that affects each subscription.   # noqa: E501

        :param sequence: The sequence of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501
        :type: int
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def trigger_dates(self):
        """Gets the trigger_dates of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501

        Container for the service activation and customer acceptance dates of the order action.  # noqa: E501

        :return: The trigger_dates of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501
        :rtype: list[PUTOrderActionTriggerDatesRequestTypeTriggerDates]
        """
        return self._trigger_dates

    @trigger_dates.setter
    def trigger_dates(self, trigger_dates):
        """Sets the trigger_dates of this PUTOrderActionTriggerDatesRequestTypeOrderActions.

        Container for the service activation and customer acceptance dates of the order action.  # noqa: E501

        :param trigger_dates: The trigger_dates of this PUTOrderActionTriggerDatesRequestTypeOrderActions.  # noqa: E501
        :type: list[PUTOrderActionTriggerDatesRequestTypeTriggerDates]
        """

        self._trigger_dates = trigger_dates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PUTOrderActionTriggerDatesRequestTypeOrderActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PUTOrderActionTriggerDatesRequestTypeOrderActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
