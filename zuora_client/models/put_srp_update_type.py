# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.put_sc_update_type import PUTScUpdateType  # noqa: F401,E501
from zuora_client.models.rate_plan_object_custom_fields import RatePlanObjectCustomFields  # noqa: F401,E501


class PUTSrpUpdateType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_update_details': 'list[PUTScUpdateType]',
        'contract_effective_date': 'date',
        'customer_acceptance_date': 'date',
        'rate_plan_id': 'str',
        'service_activation_date': 'date',
        'specific_update_date': 'date'
    }

    attribute_map = {
        'charge_update_details': 'chargeUpdateDetails',
        'contract_effective_date': 'contractEffectiveDate',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'rate_plan_id': 'ratePlanId',
        'service_activation_date': 'serviceActivationDate',
        'specific_update_date': 'specificUpdateDate'
    }

    def __init__(self, charge_update_details=None, contract_effective_date=None, customer_acceptance_date=None, rate_plan_id=None, service_activation_date=None, specific_update_date=None):  # noqa: E501
        """PUTSrpUpdateType - a model defined in Swagger"""  # noqa: E501

        self._charge_update_details = None
        self._contract_effective_date = None
        self._customer_acceptance_date = None
        self._rate_plan_id = None
        self._service_activation_date = None
        self._specific_update_date = None
        self.discriminator = None

        if charge_update_details is not None:
            self.charge_update_details = charge_update_details
        self.contract_effective_date = contract_effective_date
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        self.rate_plan_id = rate_plan_id
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        if specific_update_date is not None:
            self.specific_update_date = specific_update_date

    @property
    def charge_update_details(self):
        """Gets the charge_update_details of this PUTSrpUpdateType.  # noqa: E501

        Container for one or more product rate plan charges.    # noqa: E501

        :return: The charge_update_details of this PUTSrpUpdateType.  # noqa: E501
        :rtype: list[PUTScUpdateType]
        """
        return self._charge_update_details

    @charge_update_details.setter
    def charge_update_details(self, charge_update_details):
        """Sets the charge_update_details of this PUTSrpUpdateType.

        Container for one or more product rate plan charges.    # noqa: E501

        :param charge_update_details: The charge_update_details of this PUTSrpUpdateType.  # noqa: E501
        :type: list[PUTScUpdateType]
        """

        self._charge_update_details = charge_update_details

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this PUTSrpUpdateType.  # noqa: E501

        The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.  If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.   # noqa: E501

        :return: The contract_effective_date of this PUTSrpUpdateType.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this PUTSrpUpdateType.

        The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.  If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this PUTSrpUpdateType.  # noqa: E501
        :type: date
        """
        if contract_effective_date is None:
            raise ValueError("Invalid value for `contract_effective_date`, must not be `None`")  # noqa: E501

        self._contract_effective_date = contract_effective_date

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this PUTSrpUpdateType.  # noqa: E501

        The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :return: The customer_acceptance_date of this PUTSrpUpdateType.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this PUTSrpUpdateType.

        The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this PUTSrpUpdateType.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def rate_plan_id(self):
        """Gets the rate_plan_id of this PUTSrpUpdateType.  # noqa: E501

        ID of a rate plan for this subscription.   # noqa: E501

        :return: The rate_plan_id of this PUTSrpUpdateType.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_id

    @rate_plan_id.setter
    def rate_plan_id(self, rate_plan_id):
        """Sets the rate_plan_id of this PUTSrpUpdateType.

        ID of a rate plan for this subscription.   # noqa: E501

        :param rate_plan_id: The rate_plan_id of this PUTSrpUpdateType.  # noqa: E501
        :type: str
        """
        if rate_plan_id is None:
            raise ValueError("Invalid value for `rate_plan_id`, must not be `None`")  # noqa: E501

        self._rate_plan_id = rate_plan_id

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this PUTSrpUpdateType.  # noqa: E501

        The date when the update amendment is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :return: The service_activation_date of this PUTSrpUpdateType.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this PUTSrpUpdateType.

        The date when the update amendment is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :param service_activation_date: The service_activation_date of this PUTSrpUpdateType.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def specific_update_date(self):
        """Gets the specific_update_date of this PUTSrpUpdateType.  # noqa: E501

        The date when the Update Product amendment takes effect. This field is only applicable if there is already a future-dated Update Product amendment on the subscription. The format of the date is yyyy-mm-dd.  Required only for Update Product amendments if there is already a future-dated Update Product amendment on the subscription.   # noqa: E501

        :return: The specific_update_date of this PUTSrpUpdateType.  # noqa: E501
        :rtype: date
        """
        return self._specific_update_date

    @specific_update_date.setter
    def specific_update_date(self, specific_update_date):
        """Sets the specific_update_date of this PUTSrpUpdateType.

        The date when the Update Product amendment takes effect. This field is only applicable if there is already a future-dated Update Product amendment on the subscription. The format of the date is yyyy-mm-dd.  Required only for Update Product amendments if there is already a future-dated Update Product amendment on the subscription.   # noqa: E501

        :param specific_update_date: The specific_update_date of this PUTSrpUpdateType.  # noqa: E501
        :type: date
        """

        self._specific_update_date = specific_update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PUTSrpUpdateType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PUTSrpUpdateType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
