# coding: utf-8




import pprint
import re  # noqa: F401

import six


class AmendmentRatePlanChargeTier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price_format': 'str',
        'rate_plan_charge_id': 'str'
    }

    attribute_map = {
        'price_format': 'PriceFormat',
        'rate_plan_charge_id': 'RatePlanChargeId'
    }

    def __init__(self, price_format=None, rate_plan_charge_id=None):  # noqa: E501
        """AmendmentRatePlanChargeTier - a model defined in Swagger"""  # noqa: E501

        self._price_format = None
        self._rate_plan_charge_id = None
        self.discriminator = None

        if price_format is not None:
            self.price_format = price_format
        self.rate_plan_charge_id = rate_plan_charge_id

    @property
    def price_format(self):
        """Gets the price_format of this AmendmentRatePlanChargeTier.  # noqa: E501

         Indicates if the price is a flat fee or is per unit.   **Character limit**: 8   **Values**: `Flat Fee`, `Per Unit`   # noqa: E501

        :return: The price_format of this AmendmentRatePlanChargeTier.  # noqa: E501
        :rtype: str
        """
        return self._price_format

    @price_format.setter
    def price_format(self, price_format):
        """Sets the price_format of this AmendmentRatePlanChargeTier.

         Indicates if the price is a flat fee or is per unit.   **Character limit**: 8   **Values**: `Flat Fee`, `Per Unit`   # noqa: E501

        :param price_format: The price_format of this AmendmentRatePlanChargeTier.  # noqa: E501
        :type: str
        """

        self._price_format = price_format

    @property
    def rate_plan_charge_id(self):
        """Gets the rate_plan_charge_id of this AmendmentRatePlanChargeTier.  # noqa: E501

         The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.   **Character limit**: 32   **Values**: inherited from `RatePlanCharge`.`Id`   # noqa: E501

        :return: The rate_plan_charge_id of this AmendmentRatePlanChargeTier.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_charge_id

    @rate_plan_charge_id.setter
    def rate_plan_charge_id(self, rate_plan_charge_id):
        """Sets the rate_plan_charge_id of this AmendmentRatePlanChargeTier.

         The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.   **Character limit**: 32   **Values**: inherited from `RatePlanCharge`.`Id`   # noqa: E501

        :param rate_plan_charge_id: The rate_plan_charge_id of this AmendmentRatePlanChargeTier.  # noqa: E501
        :type: str
        """
        if rate_plan_charge_id is None:
            raise ValueError("Invalid value for `rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._rate_plan_charge_id = rate_plan_charge_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmendmentRatePlanChargeTier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmendmentRatePlanChargeTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
