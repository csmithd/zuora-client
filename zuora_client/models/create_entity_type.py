# coding: utf-8




import pprint
import re  # noqa: F401

import six


class CreateEntityType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'locale': 'str',
        'name': 'str',
        'parent_id': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'locale': 'locale',
        'name': 'name',
        'parent_id': 'parentId',
        'timezone': 'timezone'
    }

    def __init__(self, display_name=None, locale=None, name=None, parent_id=None, timezone=None):  # noqa: E501
        """CreateEntityType - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._locale = None
        self._name = None
        self._parent_id = None
        self._timezone = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        self.locale = locale
        self.name = name
        self.parent_id = parent_id
        self.timezone = timezone

    @property
    def display_name(self):
        """Gets the display_name of this CreateEntityType.  # noqa: E501

        The display name of the entity that is shown in the Zuora UI and APIs  **Note:** If you do not specify the display name in the request, the entity name is used as the display name.  # noqa: E501

        :return: The display_name of this CreateEntityType.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateEntityType.

        The display name of the entity that is shown in the Zuora UI and APIs  **Note:** If you do not specify the display name in the request, the entity name is used as the display name.  # noqa: E501

        :param display_name: The display_name of this CreateEntityType.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501

        self._display_name = display_name

    @property
    def locale(self):
        """Gets the locale of this CreateEntityType.  # noqa: E501

        The locale that is used in this entity.  # noqa: E501

        :return: The locale of this CreateEntityType.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this CreateEntityType.

        The locale that is used in this entity.  # noqa: E501

        :param locale: The locale of this CreateEntityType.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this CreateEntityType.  # noqa: E501

        The name of the entity that is the entity identifier and is unique across all entities in a multi-entity hierarchy.  **Note:** Only alphanumeric characters (letters A–Z and a–z, and digits 0–9), space, period, and hyphen are allowed to be used in entity names.   # noqa: E501

        :return: The name of this CreateEntityType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEntityType.

        The name of the entity that is the entity identifier and is unique across all entities in a multi-entity hierarchy.  **Note:** Only alphanumeric characters (letters A–Z and a–z, and digits 0–9), space, period, and hyphen are allowed to be used in entity names.   # noqa: E501

        :param name: The name of this CreateEntityType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this CreateEntityType.  # noqa: E501

        The Id of the entity under which you want to create an entity. You can get the parent entity Id by using the GET Entities call.   # noqa: E501

        :return: The parent_id of this CreateEntityType.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CreateEntityType.

        The Id of the entity under which you want to create an entity. You can get the parent entity Id by using the GET Entities call.   # noqa: E501

        :param parent_id: The parent_id of this CreateEntityType.  # noqa: E501
        :type: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def timezone(self):
        """Gets the timezone of this CreateEntityType.  # noqa: E501

        The time zone that is used in this entity.  # noqa: E501

        :return: The timezone of this CreateEntityType.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CreateEntityType.

        The time zone that is used in this entity.  # noqa: E501

        :param timezone: The timezone of this CreateEntityType.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateEntityType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateEntityType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
