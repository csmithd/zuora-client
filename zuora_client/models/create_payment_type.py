# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.create_payment_type_finance_information import CreatePaymentTypeFinanceInformation  # noqa: F401,E501
from zuora_client.models.payment_debit_memo_application_create_request_type import PaymentDebitMemoApplicationCreateRequestType  # noqa: F401,E501
from zuora_client.models.payment_invoice_application_create_request_type import PaymentInvoiceApplicationCreateRequestType  # noqa: F401,E501
from zuora_client.models.payment_object_custom_fields import PaymentObjectCustomFields  # noqa: F401,E501
from zuora_client.models.payment_object_ns_fields import PaymentObjectNSFields  # noqa: F401,E501


class CreatePaymentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'transaction__ns': 'str',
        'account_id': 'str',
        'amount': 'float',
        'comment': 'str',
        'currency': 'str',
        'debit_memos': 'list[PaymentDebitMemoApplicationCreateRequestType]',
        'effective_date': 'date',
        'finance_information': 'CreatePaymentTypeFinanceInformation',
        'gateway_id': 'str',
        'invoices': 'list[PaymentInvoiceApplicationCreateRequestType]',
        'payment_method_id': 'str',
        'reference_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'transaction__ns': 'Transaction__NS',
        'account_id': 'accountId',
        'amount': 'amount',
        'comment': 'comment',
        'currency': 'currency',
        'debit_memos': 'debitMemos',
        'effective_date': 'effectiveDate',
        'finance_information': 'financeInformation',
        'gateway_id': 'gatewayId',
        'invoices': 'invoices',
        'payment_method_id': 'paymentMethodId',
        'reference_id': 'referenceId',
        'type': 'type'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, transaction__ns=None, account_id=None, amount=None, comment=None, currency=None, debit_memos=None, effective_date=None, finance_information=None, gateway_id=None, invoices=None, payment_method_id=None, reference_id=None, type=None):  # noqa: E501
        """CreatePaymentType - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._transaction__ns = None
        self._account_id = None
        self._amount = None
        self._comment = None
        self._currency = None
        self._debit_memos = None
        self._effective_date = None
        self._finance_information = None
        self._gateway_id = None
        self._invoices = None
        self._payment_method_id = None
        self._reference_id = None
        self._type = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if transaction__ns is not None:
            self.transaction__ns = transaction__ns
        if account_id is not None:
            self.account_id = account_id
        self.amount = amount
        if comment is not None:
            self.comment = comment
        self.currency = currency
        if debit_memos is not None:
            self.debit_memos = debit_memos
        if effective_date is not None:
            self.effective_date = effective_date
        if finance_information is not None:
            self.finance_information = finance_information
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if invoices is not None:
            self.invoices = invoices
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if reference_id is not None:
            self.reference_id = reference_id
        self.type = type

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this CreatePaymentType.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this CreatePaymentType.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this CreatePaymentType.  # noqa: E501

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this CreatePaymentType.

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this CreatePaymentType.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this CreatePaymentType.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if origin__ns is not None and len(origin__ns) > 255:
            raise ValueError("Invalid value for `origin__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this CreatePaymentType.  # noqa: E501

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this CreatePaymentType.

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def transaction__ns(self):
        """Gets the transaction__ns of this CreatePaymentType.  # noqa: E501

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The transaction__ns of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._transaction__ns

    @transaction__ns.setter
    def transaction__ns(self, transaction__ns):
        """Sets the transaction__ns of this CreatePaymentType.

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param transaction__ns: The transaction__ns of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if transaction__ns is not None and len(transaction__ns) > 255:
            raise ValueError("Invalid value for `transaction__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._transaction__ns = transaction__ns

    @property
    def account_id(self):
        """Gets the account_id of this CreatePaymentType.  # noqa: E501

        The ID of the customer account that the payment is created for.   # noqa: E501

        :return: The account_id of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreatePaymentType.

        The ID of the customer account that the payment is created for.   # noqa: E501

        :param account_id: The account_id of this CreatePaymentType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this CreatePaymentType.  # noqa: E501

        The total amount of the payment.   # noqa: E501

        :return: The amount of this CreatePaymentType.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreatePaymentType.

        The total amount of the payment.   # noqa: E501

        :param amount: The amount of this CreatePaymentType.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def comment(self):
        """Gets the comment of this CreatePaymentType.  # noqa: E501

        Additional information related to the payment.   # noqa: E501

        :return: The comment of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreatePaymentType.

        Additional information related to the payment.   # noqa: E501

        :param comment: The comment of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 255:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `255`")  # noqa: E501
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def currency(self):
        """Gets the currency of this CreatePaymentType.  # noqa: E501

        A currency defined in the web-based UI administrative settings.   # noqa: E501

        :return: The currency of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreatePaymentType.

        A currency defined in the web-based UI administrative settings.   # noqa: E501

        :param currency: The currency of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def debit_memos(self):
        """Gets the debit_memos of this CreatePaymentType.  # noqa: E501

        Container for debit memos.   # noqa: E501

        :return: The debit_memos of this CreatePaymentType.  # noqa: E501
        :rtype: list[PaymentDebitMemoApplicationCreateRequestType]
        """
        return self._debit_memos

    @debit_memos.setter
    def debit_memos(self, debit_memos):
        """Sets the debit_memos of this CreatePaymentType.

        Container for debit memos.   # noqa: E501

        :param debit_memos: The debit_memos of this CreatePaymentType.  # noqa: E501
        :type: list[PaymentDebitMemoApplicationCreateRequestType]
        """

        self._debit_memos = debit_memos

    @property
    def effective_date(self):
        """Gets the effective_date of this CreatePaymentType.  # noqa: E501

        The date when the payment takes effect, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The effective_date of this CreatePaymentType.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this CreatePaymentType.

        The date when the payment takes effect, in `yyyy-mm-dd` format.   # noqa: E501

        :param effective_date: The effective_date of this CreatePaymentType.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def finance_information(self):
        """Gets the finance_information of this CreatePaymentType.  # noqa: E501


        :return: The finance_information of this CreatePaymentType.  # noqa: E501
        :rtype: CreatePaymentTypeFinanceInformation
        """
        return self._finance_information

    @finance_information.setter
    def finance_information(self, finance_information):
        """Sets the finance_information of this CreatePaymentType.


        :param finance_information: The finance_information of this CreatePaymentType.  # noqa: E501
        :type: CreatePaymentTypeFinanceInformation
        """

        self._finance_information = finance_information

    @property
    def gateway_id(self):
        """Gets the gateway_id of this CreatePaymentType.  # noqa: E501

        The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method.   - When creating electronic payments, this field is required.  - When creating external payments, this field is optional.   # noqa: E501

        :return: The gateway_id of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this CreatePaymentType.

        The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method.   - When creating electronic payments, this field is required.  - When creating external payments, this field is optional.   # noqa: E501

        :param gateway_id: The gateway_id of this CreatePaymentType.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def invoices(self):
        """Gets the invoices of this CreatePaymentType.  # noqa: E501

        Container for invoices.   # noqa: E501

        :return: The invoices of this CreatePaymentType.  # noqa: E501
        :rtype: list[PaymentInvoiceApplicationCreateRequestType]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this CreatePaymentType.

        Container for invoices.   # noqa: E501

        :param invoices: The invoices of this CreatePaymentType.  # noqa: E501
        :type: list[PaymentInvoiceApplicationCreateRequestType]
        """

        self._invoices = invoices

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this CreatePaymentType.  # noqa: E501

        The unique ID of the payment method that the customer used to make the payment.   If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs.   # noqa: E501

        :return: The payment_method_id of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this CreatePaymentType.

        The unique ID of the payment method that the customer used to make the payment.   If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs.   # noqa: E501

        :param payment_method_id: The payment_method_id of this CreatePaymentType.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def reference_id(self):
        """Gets the reference_id of this CreatePaymentType.  # noqa: E501

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :return: The reference_id of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this CreatePaymentType.

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :param reference_id: The reference_id of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if reference_id is not None and len(reference_id) > 60:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `60`")  # noqa: E501
        if reference_id is not None and len(reference_id) < 0:
            raise ValueError("Invalid value for `reference_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def type(self):
        """Gets the type of this CreatePaymentType.  # noqa: E501

        The type of the payment.   # noqa: E501

        :return: The type of this CreatePaymentType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePaymentType.

        The type of the payment.   # noqa: E501

        :param type: The type of this CreatePaymentType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["External", "Electronic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
