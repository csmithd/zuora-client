# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.debit_memo_from_charge_detail_type_finance_information import DebitMemoFromChargeDetailTypeFinanceInformation  # noqa: F401,E501
from zuora_client.models.debit_memo_item_object_custom_fields import DebitMemoItemObjectCustomFields  # noqa: F401,E501


class DebitMemoFromChargeDetailType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'charge_id': 'str',
        'comment': 'str',
        'finance_information': 'DebitMemoFromChargeDetailTypeFinanceInformation',
        'memo_item_amount': 'float',
        'service_end_date': 'date',
        'service_start_date': 'date'
    }

    attribute_map = {
        'amount': 'amount',
        'charge_id': 'chargeId',
        'comment': 'comment',
        'finance_information': 'financeInformation',
        'memo_item_amount': 'memoItemAmount',
        'service_end_date': 'serviceEndDate',
        'service_start_date': 'serviceStartDate'
    }

    def __init__(self, amount=None, charge_id=None, comment=None, finance_information=None, memo_item_amount=None, service_end_date=None, service_start_date=None):  # noqa: E501
        """DebitMemoFromChargeDetailType - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._charge_id = None
        self._comment = None
        self._finance_information = None
        self._memo_item_amount = None
        self._service_end_date = None
        self._service_start_date = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        self.charge_id = charge_id
        if comment is not None:
            self.comment = comment
        if finance_information is not None:
            self.finance_information = finance_information
        if memo_item_amount is not None:
            self.memo_item_amount = memo_item_amount
        if service_end_date is not None:
            self.service_end_date = service_end_date
        if service_start_date is not None:
            self.service_start_date = service_start_date

    @property
    def amount(self):
        """Gets the amount of this DebitMemoFromChargeDetailType.  # noqa: E501

        The amount of the debit memo item.  **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later.   # noqa: E501

        :return: The amount of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DebitMemoFromChargeDetailType.

        The amount of the debit memo item.  **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later.   # noqa: E501

        :param amount: The amount of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def charge_id(self):
        """Gets the charge_id of this DebitMemoFromChargeDetailType.  # noqa: E501

        The ID of the product rate plan charge that the debit memo is created from.   # noqa: E501

        :return: The charge_id of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: str
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this DebitMemoFromChargeDetailType.

        The ID of the product rate plan charge that the debit memo is created from.   # noqa: E501

        :param charge_id: The charge_id of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: str
        """
        if charge_id is None:
            raise ValueError("Invalid value for `charge_id`, must not be `None`")  # noqa: E501

        self._charge_id = charge_id

    @property
    def comment(self):
        """Gets the comment of this DebitMemoFromChargeDetailType.  # noqa: E501

        Comments about the product rate plan charge.   # noqa: E501

        :return: The comment of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DebitMemoFromChargeDetailType.

        Comments about the product rate plan charge.   # noqa: E501

        :param comment: The comment of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 255:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `255`")  # noqa: E501
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def finance_information(self):
        """Gets the finance_information of this DebitMemoFromChargeDetailType.  # noqa: E501


        :return: The finance_information of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: DebitMemoFromChargeDetailTypeFinanceInformation
        """
        return self._finance_information

    @finance_information.setter
    def finance_information(self, finance_information):
        """Sets the finance_information of this DebitMemoFromChargeDetailType.


        :param finance_information: The finance_information of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: DebitMemoFromChargeDetailTypeFinanceInformation
        """

        self._finance_information = finance_information

    @property
    def memo_item_amount(self):
        """Gets the memo_item_amount of this DebitMemoFromChargeDetailType.  # noqa: E501

        The amount of the debit memo item.  **Note**: This field is not available if you set the `zuora-version` request header to `224.0` or later.   # noqa: E501

        :return: The memo_item_amount of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: float
        """
        return self._memo_item_amount

    @memo_item_amount.setter
    def memo_item_amount(self, memo_item_amount):
        """Sets the memo_item_amount of this DebitMemoFromChargeDetailType.

        The amount of the debit memo item.  **Note**: This field is not available if you set the `zuora-version` request header to `224.0` or later.   # noqa: E501

        :param memo_item_amount: The memo_item_amount of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: float
        """

        self._memo_item_amount = memo_item_amount

    @property
    def service_end_date(self):
        """Gets the service_end_date of this DebitMemoFromChargeDetailType.  # noqa: E501

        The service end date of the debit memo item. If not specified, the effective end date of the corresponding product rate plan will be used.   # noqa: E501

        :return: The service_end_date of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: date
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """Sets the service_end_date of this DebitMemoFromChargeDetailType.

        The service end date of the debit memo item. If not specified, the effective end date of the corresponding product rate plan will be used.   # noqa: E501

        :param service_end_date: The service_end_date of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: date
        """

        self._service_end_date = service_end_date

    @property
    def service_start_date(self):
        """Gets the service_start_date of this DebitMemoFromChargeDetailType.  # noqa: E501

        The service start date of the debit memo item. If not specified, the effective start date of the corresponding product rate plan will be used.   # noqa: E501

        :return: The service_start_date of this DebitMemoFromChargeDetailType.  # noqa: E501
        :rtype: date
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """Sets the service_start_date of this DebitMemoFromChargeDetailType.

        The service start date of the debit memo item. If not specified, the effective start date of the corresponding product rate plan will be used.   # noqa: E501

        :param service_start_date: The service_start_date of this DebitMemoFromChargeDetailType.  # noqa: E501
        :type: date
        """

        self._service_start_date = service_start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebitMemoFromChargeDetailType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebitMemoFromChargeDetailType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
