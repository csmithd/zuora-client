# coding: utf-8




import pprint
import re  # noqa: F401

import six


class DiscountPricingOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_discount_to': 'str',
        'discount_amount': 'float',
        'discount_level': 'str',
        'discount_percentage': 'float',
        'price_change_option': 'str'
    }

    attribute_map = {
        'apply_discount_to': 'applyDiscountTo',
        'discount_amount': 'discountAmount',
        'discount_level': 'discountLevel',
        'discount_percentage': 'discountPercentage',
        'price_change_option': 'priceChangeOption'
    }

    def __init__(self, apply_discount_to=None, discount_amount=None, discount_level=None, discount_percentage=None, price_change_option=None):  # noqa: E501
        """DiscountPricingOverride - a model defined in Swagger"""  # noqa: E501

        self._apply_discount_to = None
        self._discount_amount = None
        self._discount_level = None
        self._discount_percentage = None
        self._price_change_option = None
        self.discriminator = None

        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_level is not None:
            self.discount_level = discount_level
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if price_change_option is not None:
            self.price_change_option = price_change_option

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this DiscountPricingOverride.  # noqa: E501

        Specifies which type of charge the discount charge applies to.   # noqa: E501

        :return: The apply_discount_to of this DiscountPricingOverride.  # noqa: E501
        :rtype: str
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this DiscountPricingOverride.

        Specifies which type of charge the discount charge applies to.   # noqa: E501

        :param apply_discount_to: The apply_discount_to of this DiscountPricingOverride.  # noqa: E501
        :type: str
        """
        allowed_values = ["ONETIME", "RECURRING", "USAGE", "ONETIMERECURRING", "ONETIMEUSAGE", "RECURRINGUSAGE", "ONETIMERECURRINGUSAGE"]  # noqa: E501
        if apply_discount_to not in allowed_values:
            raise ValueError(
                "Invalid value for `apply_discount_to` ({0}), must be one of {1}"  # noqa: E501
                .format(apply_discount_to, allowed_values)
            )

        self._apply_discount_to = apply_discount_to

    @property
    def discount_amount(self):
        """Gets the discount_amount of this DiscountPricingOverride.  # noqa: E501

        Only applicable if the discount charge is a fixed-amount discount.   # noqa: E501

        :return: The discount_amount of this DiscountPricingOverride.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this DiscountPricingOverride.

        Only applicable if the discount charge is a fixed-amount discount.   # noqa: E501

        :param discount_amount: The discount_amount of this DiscountPricingOverride.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_level(self):
        """Gets the discount_level of this DiscountPricingOverride.  # noqa: E501

        Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.   # noqa: E501

        :return: The discount_level of this DiscountPricingOverride.  # noqa: E501
        :rtype: str
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this DiscountPricingOverride.

        Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.   # noqa: E501

        :param discount_level: The discount_level of this DiscountPricingOverride.  # noqa: E501
        :type: str
        """
        allowed_values = ["rateplan", "subscription", "account"]  # noqa: E501
        if discount_level not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_level` ({0}), must be one of {1}"  # noqa: E501
                .format(discount_level, allowed_values)
            )

        self._discount_level = discount_level

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this DiscountPricingOverride.  # noqa: E501

        Only applicable if the discount charge is a percentage discount.   # noqa: E501

        :return: The discount_percentage of this DiscountPricingOverride.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this DiscountPricingOverride.

        Only applicable if the discount charge is a percentage discount.   # noqa: E501

        :param discount_percentage: The discount_percentage of this DiscountPricingOverride.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def price_change_option(self):
        """Gets the price_change_option of this DiscountPricingOverride.  # noqa: E501

        Specifies how Zuora changes the price of the charge each time the subscription renews.   # noqa: E501

        :return: The price_change_option of this DiscountPricingOverride.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this DiscountPricingOverride.

        Specifies how Zuora changes the price of the charge each time the subscription renews.   # noqa: E501

        :param price_change_option: The price_change_option of this DiscountPricingOverride.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoChange", "UseLatestProductCatalogPricing"]  # noqa: E501
        if price_change_option not in allowed_values:
            raise ValueError(
                "Invalid value for `price_change_option` ({0}), must be one of {1}"  # noqa: E501
                .format(price_change_option, allowed_values)
            )

        self._price_change_option = price_change_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscountPricingOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscountPricingOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
