# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.account_object_custom_fields import AccountObjectCustomFields  # noqa: F401,E501
from zuora_client.models.bill_to_contact import BillToContact  # noqa: F401,E501
from zuora_client.models.credit_card import CreditCard  # noqa: F401,E501
from zuora_client.models.sold_to_contact import SoldToContact  # noqa: F401,E501
from zuora_client.models.tax_info import TaxInfo  # noqa: F401,E501


class CreateSubscriptionNewSubscriptionOwnerAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'auto_pay': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'bill_to_contact': 'BillToContact',
        'communication_profile_id': 'str',
        'credit_card': 'CreditCard',
        'crm_id': 'str',
        'currency': 'str',
        'custom_fields': 'AccountObjectCustomFields',
        'hpm_credit_card_payment_method_id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'parent_id': 'str',
        'payment_gateway': 'str',
        'payment_term': 'str',
        'sold_to_contact': 'SoldToContact',
        'tax_info': 'TaxInfo'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'auto_pay': 'autoPay',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'bill_to_contact': 'billToContact',
        'communication_profile_id': 'communicationProfileId',
        'credit_card': 'creditCard',
        'crm_id': 'crmId',
        'currency': 'currency',
        'custom_fields': 'customFields',
        'hpm_credit_card_payment_method_id': 'hpmCreditCardPaymentMethodId',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'invoice_template_id': 'invoiceTemplateId',
        'name': 'name',
        'notes': 'notes',
        'parent_id': 'parentId',
        'payment_gateway': 'paymentGateway',
        'payment_term': 'paymentTerm',
        'sold_to_contact': 'soldToContact',
        'tax_info': 'taxInfo'
    }

    def __init__(self, account_number=None, auto_pay=None, batch=None, bill_cycle_day=None, bill_to_contact=None, communication_profile_id=None, credit_card=None, crm_id=None, currency=None, custom_fields=None, hpm_credit_card_payment_method_id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, invoice_template_id=None, name=None, notes=None, parent_id=None, payment_gateway=None, payment_term=None, sold_to_contact=None, tax_info=None):  # noqa: E501
        """CreateSubscriptionNewSubscriptionOwnerAccount - a model defined in Swagger"""  # noqa: E501

        self._account_number = None
        self._auto_pay = None
        self._batch = None
        self._bill_cycle_day = None
        self._bill_to_contact = None
        self._communication_profile_id = None
        self._credit_card = None
        self._crm_id = None
        self._currency = None
        self._custom_fields = None
        self._hpm_credit_card_payment_method_id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._parent_id = None
        self._payment_gateway = None
        self._payment_term = None
        self._sold_to_contact = None
        self._tax_info = None
        self.discriminator = None

        if account_number is not None:
            self.account_number = account_number
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        self.bill_cycle_day = bill_cycle_day
        self.bill_to_contact = bill_to_contact
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if credit_card is not None:
            self.credit_card = credit_card
        if crm_id is not None:
            self.crm_id = crm_id
        self.currency = currency
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if hpm_credit_card_payment_method_id is not None:
            self.hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        self.name = name
        if notes is not None:
            self.notes = notes
        if parent_id is not None:
            self.parent_id = parent_id
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_term is not None:
            self.payment_term = payment_term
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if tax_info is not None:
            self.tax_info = tax_info

    @property
    def account_number(self):
        """Gets the account_number of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Account number. For example, A00000001.   # noqa: E501

        :return: The account_number of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Account number. For example, A00000001.   # noqa: E501

        :param account_number: The account_number of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """
        if account_number is not None and len(account_number) > 70:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `70`")  # noqa: E501

        self._account_number = account_number

    @property
    def auto_pay(self):
        """Gets the auto_pay of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Specifies whether future payments are automatically billed when they are due.   # noqa: E501

        :return: The auto_pay of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Specifies whether future payments are automatically billed when they are due.   # noqa: E501

        :param auto_pay: The auto_pay of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Name of the billing batch that the account belongs to. For example, Batch1.   # noqa: E501

        :return: The batch of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Name of the billing batch that the account belongs to. For example, Batch1.   # noqa: E501

        :param batch: The batch of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".   # noqa: E501

        :return: The bill_cycle_day of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: int
        """
        if bill_cycle_day is None:
            raise ValueError("Invalid value for `bill_cycle_day`, must not be `None`")  # noqa: E501
        if bill_cycle_day is not None and bill_cycle_day > 31:  # noqa: E501
            raise ValueError("Invalid value for `bill_cycle_day`, must be a value less than or equal to `31`")  # noqa: E501
        if bill_cycle_day is not None and bill_cycle_day < 1:  # noqa: E501
            raise ValueError("Invalid value for `bill_cycle_day`, must be a value greater than or equal to `1`")  # noqa: E501

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501


        :return: The bill_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: BillToContact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.


        :param bill_to_contact: The bill_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: BillToContact
        """
        if bill_to_contact is None:
            raise ValueError("Invalid value for `bill_to_contact`, must not be `None`")  # noqa: E501

        self._bill_to_contact = bill_to_contact

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Internal identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.   # noqa: E501

        :return: The communication_profile_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Internal identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.   # noqa: E501

        :param communication_profile_id: The communication_profile_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def credit_card(self):
        """Gets the credit_card of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501


        :return: The credit_card of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: CreditCard
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this CreateSubscriptionNewSubscriptionOwnerAccount.


        :param credit_card: The credit_card of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: CreditCard
        """

        self._credit_card = credit_card

    @property
    def crm_id(self):
        """Gets the crm_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        External identifier of the account in a CRM system.   # noqa: E501

        :return: The crm_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this CreateSubscriptionNewSubscriptionOwnerAccount.

        External identifier of the account in a CRM system.   # noqa: E501

        :param crm_id: The crm_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """
        if crm_id is not None and len(crm_id) > 100:
            raise ValueError("Invalid value for `crm_id`, length must be less than or equal to `100`")  # noqa: E501

        self._crm_id = crm_id

    @property
    def currency(self):
        """Gets the currency of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        ISO 3-letter currency code (uppercase). For example, USD.   # noqa: E501

        :return: The currency of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateSubscriptionNewSubscriptionOwnerAccount.

        ISO 3-letter currency code (uppercase). For example, USD.   # noqa: E501

        :param currency: The currency of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501


        :return: The custom_fields of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: AccountObjectCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreateSubscriptionNewSubscriptionOwnerAccount.


        :param custom_fields: The custom_fields of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: AccountObjectCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def hpm_credit_card_payment_method_id(self):
        """Gets the hpm_credit_card_payment_method_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Internal identifier of the hosted payment method (HPM) credit card payment method associated with the account.   # noqa: E501

        :return: The hpm_credit_card_payment_method_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._hpm_credit_card_payment_method_id

    @hpm_credit_card_payment_method_id.setter
    def hpm_credit_card_payment_method_id(self, hpm_credit_card_payment_method_id):
        """Sets the hpm_credit_card_payment_method_id of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Internal identifier of the hosted payment method (HPM) credit card payment method associated with the account.   # noqa: E501

        :param hpm_credit_card_payment_method_id: The hpm_credit_card_payment_method_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """

        self._hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Specifies whether to turn on the invoice delivery method 'Email' for the new account.  Values are:   * `true` (default). Turn on the invoice delivery method 'Email' for the new account. * `false`. Turn off the invoice delivery method 'Email' for the new account.            # noqa: E501

        :return: The invoice_delivery_prefs_email of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Specifies whether to turn on the invoice delivery method 'Email' for the new account.  Values are:   * `true` (default). Turn on the invoice delivery method 'Email' for the new account. * `false`. Turn off the invoice delivery method 'Email' for the new account.            # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Specifies whether to turn on the invoice delivery method 'Print' for the new account. Values are:   * `true`. Turn on the invoice delivery method 'Print' for the new account. * `false` (default). Turn off the invoice delivery method 'Print' for the new account.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Specifies whether to turn on the invoice delivery method 'Print' for the new account. Values are:   * `true`. Turn on the invoice delivery method 'Print' for the new account. * `false` (default). Turn off the invoice delivery method 'Print' for the new account.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Internal identifier of the invoice template that Zuora uses when generating invoices for the account.   # noqa: E501

        :return: The invoice_template_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Internal identifier of the invoice template that Zuora uses when generating invoices for the account.   # noqa: E501

        :param invoice_template_id: The invoice_template_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Account name.   # noqa: E501

        :return: The name of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Account name.   # noqa: E501

        :param name: The name of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Notes about the account. These notes are only visible to Zuora users.   # noqa: E501

        :return: The notes of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Notes about the account. These notes are only visible to Zuora users.   # noqa: E501

        :param notes: The notes of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """
        if notes is not None and len(notes) > 65535:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `65535`")  # noqa: E501

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled.  # noqa: E501

        :return: The parent_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled.  # noqa: E501

        :param parent_id: The parent_id of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        The payment gateway that Zuora uses when processing electronic payments and refunds for the account. If you do not specify this field or if the value of this field is null, Zuora uses your default payment gateway.   # noqa: E501

        :return: The payment_gateway of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this CreateSubscriptionNewSubscriptionOwnerAccount.

        The payment gateway that Zuora uses when processing electronic payments and refunds for the account. If you do not specify this field or if the value of this field is null, Zuora uses your default payment gateway.   # noqa: E501

        :param payment_gateway: The payment_gateway of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """
        if payment_gateway is not None and len(payment_gateway) > 40:
            raise ValueError("Invalid value for `payment_gateway`, length must be less than or equal to `40`")  # noqa: E501

        self._payment_gateway = payment_gateway

    @property
    def payment_term(self):
        """Gets the payment_term of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501

        Name of the payment term associated with the account. For example, \"Net 30\". The payment term determines the due dates of invoices.   # noqa: E501

        :return: The payment_term of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this CreateSubscriptionNewSubscriptionOwnerAccount.

        Name of the payment term associated with the account. For example, \"Net 30\". The payment term determines the due dates of invoices.   # noqa: E501

        :param payment_term: The payment_term of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501


        :return: The sold_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: SoldToContact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.


        :param sold_to_contact: The sold_to_contact of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: SoldToContact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def tax_info(self):
        """Gets the tax_info of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501


        :return: The tax_info of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :rtype: TaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this CreateSubscriptionNewSubscriptionOwnerAccount.


        :param tax_info: The tax_info of this CreateSubscriptionNewSubscriptionOwnerAccount.  # noqa: E501
        :type: TaxInfo
        """

        self._tax_info = tax_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionNewSubscriptionOwnerAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionNewSubscriptionOwnerAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
