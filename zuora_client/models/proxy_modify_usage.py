# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.usage_object_custom_fields import UsageObjectCustomFields  # noqa: F401,E501


class ProxyModifyUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date_time': 'datetime',
        'quantity': 'float',
        'rbe_status': 'str',
        'start_date_time': 'datetime',
        'submission_date_time': 'datetime',
        'uom': 'str'
    }

    attribute_map = {
        'end_date_time': 'EndDateTime',
        'quantity': 'Quantity',
        'rbe_status': 'RbeStatus',
        'start_date_time': 'StartDateTime',
        'submission_date_time': 'SubmissionDateTime',
        'uom': 'UOM'
    }

    def __init__(self, end_date_time=None, quantity=None, rbe_status=None, start_date_time=None, submission_date_time=None, uom=None):  # noqa: E501
        """ProxyModifyUsage - a model defined in Swagger"""  # noqa: E501

        self._end_date_time = None
        self._quantity = None
        self._rbe_status = None
        self._start_date_time = None
        self._submission_date_time = None
        self._uom = None
        self.discriminator = None

        if end_date_time is not None:
            self.end_date_time = end_date_time
        if quantity is not None:
            self.quantity = quantity
        if rbe_status is not None:
            self.rbe_status = rbe_status
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if submission_date_time is not None:
            self.submission_date_time = submission_date_time
        if uom is not None:
            self.uom = uom

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ProxyModifyUsage.  # noqa: E501

         The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation. **Character limit**: 29 **Values**: a valid date and time value   # noqa: E501

        :return: The end_date_time of this ProxyModifyUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ProxyModifyUsage.

         The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation. **Character limit**: 29 **Values**: a valid date and time value   # noqa: E501

        :param end_date_time: The end_date_time of this ProxyModifyUsage.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def quantity(self):
        """Gets the quantity of this ProxyModifyUsage.  # noqa: E501

         Indicates the number of units used. **Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0   # noqa: E501

        :return: The quantity of this ProxyModifyUsage.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProxyModifyUsage.

         Indicates the number of units used. **Character limit**: 16 **Values**: a valid decimal amount equal to or greater than 0   # noqa: E501

        :param quantity: The quantity of this ProxyModifyUsage.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def rbe_status(self):
        """Gets the rbe_status of this ProxyModifyUsage.  # noqa: E501

         Indicates if the rating and billing engine (RBE) processed usage data for an invoice. **Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed`   # noqa: E501

        :return: The rbe_status of this ProxyModifyUsage.  # noqa: E501
        :rtype: str
        """
        return self._rbe_status

    @rbe_status.setter
    def rbe_status(self, rbe_status):
        """Sets the rbe_status of this ProxyModifyUsage.

         Indicates if the rating and billing engine (RBE) processed usage data for an invoice. **Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed`   # noqa: E501

        :param rbe_status: The rbe_status of this ProxyModifyUsage.  # noqa: E501
        :type: str
        """

        self._rbe_status = rbe_status

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ProxyModifyUsage.  # noqa: E501

         The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation. **Character limit**: 29 **Values**: a valid date and time value   # noqa: E501

        :return: The start_date_time of this ProxyModifyUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ProxyModifyUsage.

         The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation. **Character limit**: 29 **Values**: a valid date and time value   # noqa: E501

        :param start_date_time: The start_date_time of this ProxyModifyUsage.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def submission_date_time(self):
        """Gets the submission_date_time of this ProxyModifyUsage.  # noqa: E501

         The date when usage was submitted. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The submission_date_time of this ProxyModifyUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._submission_date_time

    @submission_date_time.setter
    def submission_date_time(self, submission_date_time):
        """Sets the submission_date_time of this ProxyModifyUsage.

         The date when usage was submitted. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param submission_date_time: The submission_date_time of this ProxyModifyUsage.  # noqa: E501
        :type: datetime
        """

        self._submission_date_time = submission_date_time

    @property
    def uom(self):
        """Gets the uom of this ProxyModifyUsage.  # noqa: E501

         Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**. **Character limit**: **Values**: a valid unit of measure   # noqa: E501

        :return: The uom of this ProxyModifyUsage.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this ProxyModifyUsage.

         Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**. **Character limit**: **Values**: a valid unit of measure   # noqa: E501

        :param uom: The uom of this ProxyModifyUsage.  # noqa: E501
        :type: str
        """

        self._uom = uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyModifyUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyModifyUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
