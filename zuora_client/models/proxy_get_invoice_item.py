# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.invoice_item_object_custom_fields import InvoiceItemObjectCustomFields  # noqa: F401,E501
from zuora_client.models.invoice_item_object_ns_fields import InvoiceItemObjectNSFields  # noqa: F401,E501


class ProxyGetInvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str',
        'accounting_code': 'str',
        'applied_to_invoice_item_id': 'str',
        'charge_amount': 'float',
        'charge_date': 'datetime',
        'charge_name': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'id': 'str',
        'invoice_id': 'str',
        'processing_type': 'float',
        'product_description': 'str',
        'product_name': 'str',
        'quantity': 'float',
        'rate_plan_charge_id': 'str',
        'rev_rec_start_date': 'date',
        'sku': 'str',
        'service_end_date': 'date',
        'service_start_date': 'date',
        'subscription_id': 'str',
        'tax_amount': 'float',
        'tax_code': 'str',
        'tax_exempt_amount': 'float',
        'tax_mode': 'str',
        'uom': 'str',
        'unit_price': 'float',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS',
        'accounting_code': 'AccountingCode',
        'applied_to_invoice_item_id': 'AppliedToInvoiceItemId',
        'charge_amount': 'ChargeAmount',
        'charge_date': 'ChargeDate',
        'charge_name': 'ChargeName',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'id': 'Id',
        'invoice_id': 'InvoiceId',
        'processing_type': 'ProcessingType',
        'product_description': 'ProductDescription',
        'product_name': 'ProductName',
        'quantity': 'Quantity',
        'rate_plan_charge_id': 'RatePlanChargeId',
        'rev_rec_start_date': 'RevRecStartDate',
        'sku': 'SKU',
        'service_end_date': 'ServiceEndDate',
        'service_start_date': 'ServiceStartDate',
        'subscription_id': 'SubscriptionId',
        'tax_amount': 'TaxAmount',
        'tax_code': 'TaxCode',
        'tax_exempt_amount': 'TaxExemptAmount',
        'tax_mode': 'TaxMode',
        'uom': 'UOM',
        'unit_price': 'UnitPrice',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None, accounting_code=None, applied_to_invoice_item_id=None, charge_amount=None, charge_date=None, charge_name=None, created_by_id=None, created_date=None, id=None, invoice_id=None, processing_type=None, product_description=None, product_name=None, quantity=None, rate_plan_charge_id=None, rev_rec_start_date=None, sku=None, service_end_date=None, service_start_date=None, subscription_id=None, tax_amount=None, tax_code=None, tax_exempt_amount=None, tax_mode=None, uom=None, unit_price=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """ProxyGetInvoiceItem - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self._accounting_code = None
        self._applied_to_invoice_item_id = None
        self._charge_amount = None
        self._charge_date = None
        self._charge_name = None
        self._created_by_id = None
        self._created_date = None
        self._id = None
        self._invoice_id = None
        self._processing_type = None
        self._product_description = None
        self._product_name = None
        self._quantity = None
        self._rate_plan_charge_id = None
        self._rev_rec_start_date = None
        self._sku = None
        self._service_end_date = None
        self._service_start_date = None
        self._subscription_id = None
        self._tax_amount = None
        self._tax_code = None
        self._tax_exempt_amount = None
        self._tax_mode = None
        self._uom = None
        self._unit_price = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if applied_to_invoice_item_id is not None:
            self.applied_to_invoice_item_id = applied_to_invoice_item_id
        if charge_amount is not None:
            self.charge_amount = charge_amount
        if charge_date is not None:
            self.charge_date = charge_date
        if charge_name is not None:
            self.charge_name = charge_name
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if id is not None:
            self.id = id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if processing_type is not None:
            self.processing_type = processing_type
        if product_description is not None:
            self.product_description = product_description
        if product_name is not None:
            self.product_name = product_name
        if quantity is not None:
            self.quantity = quantity
        if rate_plan_charge_id is not None:
            self.rate_plan_charge_id = rate_plan_charge_id
        if rev_rec_start_date is not None:
            self.rev_rec_start_date = rev_rec_start_date
        if sku is not None:
            self.sku = sku
        if service_end_date is not None:
            self.service_end_date = service_end_date
        if service_start_date is not None:
            self.service_start_date = service_start_date
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_exempt_amount is not None:
            self.tax_exempt_amount = tax_exempt_amount
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if uom is not None:
            self.uom = uom
        if unit_price is not None:
            self.unit_price = unit_price
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyGetInvoiceItem.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyGetInvoiceItem.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyGetInvoiceItem.  # noqa: E501

        Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyGetInvoiceItem.

        Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyGetInvoiceItem.  # noqa: E501

        Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyGetInvoiceItem.

        Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyGetInvoiceItem.  # noqa: E501

         The accounting code for the item's charge. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: inherited from `RatePlanCharge.AccountingCode`   # noqa: E501

        :return: The accounting_code of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyGetInvoiceItem.

         The accounting code for the item's charge. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: inherited from `RatePlanCharge.AccountingCode`   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def applied_to_invoice_item_id(self):
        """Gets the applied_to_invoice_item_id of this ProxyGetInvoiceItem.  # noqa: E501

         Associates a discount invoice item to a specific invoice item.  **Character limit**: 32  **Values**: inherited from `InvoiceItem.Id` for the invoice item that the discount charge is applied to   # noqa: E501

        :return: The applied_to_invoice_item_id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._applied_to_invoice_item_id

    @applied_to_invoice_item_id.setter
    def applied_to_invoice_item_id(self, applied_to_invoice_item_id):
        """Sets the applied_to_invoice_item_id of this ProxyGetInvoiceItem.

         Associates a discount invoice item to a specific invoice item.  **Character limit**: 32  **Values**: inherited from `InvoiceItem.Id` for the invoice item that the discount charge is applied to   # noqa: E501

        :param applied_to_invoice_item_id: The applied_to_invoice_item_id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._applied_to_invoice_item_id = applied_to_invoice_item_id

    @property
    def charge_amount(self):
        """Gets the charge_amount of this ProxyGetInvoiceItem.  # noqa: E501

         The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive. **Character limit**: **Values**: automatically calculated from multiple fields in multiple objects   # noqa: E501

        :return: The charge_amount of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this ProxyGetInvoiceItem.

         The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive. **Character limit**: **Values**: automatically calculated from multiple fields in multiple objects   # noqa: E501

        :param charge_amount: The charge_amount of this ProxyGetInvoiceItem.  # noqa: E501
        :type: float
        """

        self._charge_amount = charge_amount

    @property
    def charge_date(self):
        """Gets the charge_date of this ProxyGetInvoiceItem.  # noqa: E501

         The date when the Invoice Item is created . **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The charge_date of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._charge_date

    @charge_date.setter
    def charge_date(self, charge_date):
        """Sets the charge_date of this ProxyGetInvoiceItem.

         The date when the Invoice Item is created . **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param charge_date: The charge_date of this ProxyGetInvoiceItem.  # noqa: E501
        :type: datetime
        """

        self._charge_date = charge_date

    @property
    def charge_name(self):
        """Gets the charge_name of this ProxyGetInvoiceItem.  # noqa: E501

         The name of the invoice item's charge. **Character limi**t: 50 **Values: **inherited from `RatePlanCharge.Name`   # noqa: E501

        :return: The charge_name of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_name

    @charge_name.setter
    def charge_name(self, charge_name):
        """Sets the charge_name of this ProxyGetInvoiceItem.

         The name of the invoice item's charge. **Character limi**t: 50 **Values: **inherited from `RatePlanCharge.Name`   # noqa: E501

        :param charge_name: The charge_name of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_name = charge_name

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProxyGetInvoiceItem.  # noqa: E501

         The user ID of the person who created the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProxyGetInvoiceItem.

         The user ID of the person who created the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProxyGetInvoiceItem.  # noqa: E501

         The date the invoice item was created. **Character limit:** 29 **Values**: automatically generated   # noqa: E501

        :return: The created_date of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProxyGetInvoiceItem.

         The date the invoice item was created. **Character limit:** 29 **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this ProxyGetInvoiceItem.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this ProxyGetInvoiceItem.  # noqa: E501

        Object identifier.  # noqa: E501

        :return: The id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyGetInvoiceItem.

        Object identifier.  # noqa: E501

        :param id: The id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ProxyGetInvoiceItem.  # noqa: E501

         The ID of the invoice that's associated with this invoice item. **Character limit**: 32 **Values**: inherited from `Invoice.Id`   # noqa: E501

        :return: The invoice_id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ProxyGetInvoiceItem.

         The ID of the invoice that's associated with this invoice item. **Character limit**: 32 **Values**: inherited from `Invoice.Id`   # noqa: E501

        :param invoice_id: The invoice_id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def processing_type(self):
        """Gets the processing_type of this ProxyGetInvoiceItem.  # noqa: E501

         Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources. **Character limit**: **Values: **  - 0: charge - 1: discount - 2: prepayment - 3: tax   # noqa: E501

        :return: The processing_type of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this ProxyGetInvoiceItem.

         Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources. **Character limit**: **Values: **  - 0: charge - 1: discount - 2: prepayment - 3: tax   # noqa: E501

        :param processing_type: The processing_type of this ProxyGetInvoiceItem.  # noqa: E501
        :type: float
        """

        self._processing_type = processing_type

    @property
    def product_description(self):
        """Gets the product_description of this ProxyGetInvoiceItem.  # noqa: E501

         A description of the product associated with this invoice item.  **Character limit**: 500  **Values**: inherited from `Product.Description`  **Note**: This value changes if `Product.Description` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Description` is updated.   # noqa: E501

        :return: The product_description of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this ProxyGetInvoiceItem.

         A description of the product associated with this invoice item.  **Character limit**: 500  **Values**: inherited from `Product.Description`  **Note**: This value changes if `Product.Description` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Description` is updated.   # noqa: E501

        :param product_description: The product_description of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def product_name(self):
        """Gets the product_name of this ProxyGetInvoiceItem.  # noqa: E501

         The name of the product associated with this invoice item.  **Character limit**: 255  **Values**: inherited from `Product.Name`  **Note**: This value changes if `Product.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Name` is updated.   # noqa: E501

        :return: The product_name of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ProxyGetInvoiceItem.

         The name of the product associated with this invoice item.  **Character limit**: 255  **Values**: inherited from `Product.Name`  **Note**: This value changes if `Product.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Name` is updated.   # noqa: E501

        :param product_name: The product_name of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def quantity(self):
        """Gets the quantity of this ProxyGetInvoiceItem.  # noqa: E501

         The number of units for this invoice item. **Values**: inherited from `RatePlanCharge.Quantity`   # noqa: E501

        :return: The quantity of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProxyGetInvoiceItem.

         The number of units for this invoice item. **Values**: inherited from `RatePlanCharge.Quantity`   # noqa: E501

        :param quantity: The quantity of this ProxyGetInvoiceItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def rate_plan_charge_id(self):
        """Gets the rate_plan_charge_id of this ProxyGetInvoiceItem.  # noqa: E501

         The ID of the rate plan charge that's associated with this invoice item. **Character limit**: 32 **Values**: inherited from `RatePlanCharge.Id`   # noqa: E501

        :return: The rate_plan_charge_id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_charge_id

    @rate_plan_charge_id.setter
    def rate_plan_charge_id(self, rate_plan_charge_id):
        """Sets the rate_plan_charge_id of this ProxyGetInvoiceItem.

         The ID of the rate plan charge that's associated with this invoice item. **Character limit**: 32 **Values**: inherited from `RatePlanCharge.Id`   # noqa: E501

        :param rate_plan_charge_id: The rate_plan_charge_id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._rate_plan_charge_id = rate_plan_charge_id

    @property
    def rev_rec_start_date(self):
        """Gets the rev_rec_start_date of this ProxyGetInvoiceItem.  # noqa: E501

         The date when revenue recognition is triggered. **Character limit**: 29 **Values**: generated from `InvoiceItem.RevRecTriggerCondition`   # noqa: E501

        :return: The rev_rec_start_date of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._rev_rec_start_date

    @rev_rec_start_date.setter
    def rev_rec_start_date(self, rev_rec_start_date):
        """Sets the rev_rec_start_date of this ProxyGetInvoiceItem.

         The date when revenue recognition is triggered. **Character limit**: 29 **Values**: generated from `InvoiceItem.RevRecTriggerCondition`   # noqa: E501

        :param rev_rec_start_date: The rev_rec_start_date of this ProxyGetInvoiceItem.  # noqa: E501
        :type: date
        """

        self._rev_rec_start_date = rev_rec_start_date

    @property
    def sku(self):
        """Gets the sku of this ProxyGetInvoiceItem.  # noqa: E501

         The unique SKU for the product associated with this invoice item. **Character limit**: 255 **Values**: inherited from `Product.SKU`   # noqa: E501

        :return: The sku of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProxyGetInvoiceItem.

         The unique SKU for the product associated with this invoice item. **Character limit**: 255 **Values**: inherited from `Product.SKU`   # noqa: E501

        :param sku: The sku of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def service_end_date(self):
        """Gets the service_end_date of this ProxyGetInvoiceItem.  # noqa: E501

         The end date of the service period associated with this invoice item. Service ends one second before the date in this value. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The service_end_date of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """Sets the service_end_date of this ProxyGetInvoiceItem.

         The end date of the service period associated with this invoice item. Service ends one second before the date in this value. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param service_end_date: The service_end_date of this ProxyGetInvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_end_date = service_end_date

    @property
    def service_start_date(self):
        """Gets the service_start_date of this ProxyGetInvoiceItem.  # noqa: E501

         The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge. **Character limit:** 29 **Values**: automatically generated   # noqa: E501

        :return: The service_start_date of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """Sets the service_start_date of this ProxyGetInvoiceItem.

         The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge. **Character limit:** 29 **Values**: automatically generated   # noqa: E501

        :param service_start_date: The service_start_date of this ProxyGetInvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_start_date = service_start_date

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ProxyGetInvoiceItem.  # noqa: E501

         The ID of the subscription associated with the invoice item. **Character limit**: 32 **Values**: inherited from `Subscription.Id`   # noqa: E501

        :return: The subscription_id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ProxyGetInvoiceItem.

         The ID of the subscription associated with the invoice item. **Character limit**: 32 **Values**: inherited from `Subscription.Id`   # noqa: E501

        :param subscription_id: The subscription_id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ProxyGetInvoiceItem.  # noqa: E501

         The amount of tax applied to the invoice item's charge. **Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object   # noqa: E501

        :return: The tax_amount of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ProxyGetInvoiceItem.

         The amount of tax applied to the invoice item's charge. **Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object   # noqa: E501

        :param tax_amount: The tax_amount of this ProxyGetInvoiceItem.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_code(self):
        """Gets the tax_code of this ProxyGetInvoiceItem.  # noqa: E501

         Specifies the tax code for taxation rules. **Character limit**: 6 **Values**: inherited from `ProductRatePlanCharge.TaxCode`   # noqa: E501

        :return: The tax_code of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this ProxyGetInvoiceItem.

         Specifies the tax code for taxation rules. **Character limit**: 6 **Values**: inherited from `ProductRatePlanCharge.TaxCode`   # noqa: E501

        :param tax_code: The tax_code of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_exempt_amount(self):
        """Gets the tax_exempt_amount of this ProxyGetInvoiceItem.  # noqa: E501

         The amount of the invoice item's charge that's tax exempt. **Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object   # noqa: E501

        :return: The tax_exempt_amount of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_exempt_amount

    @tax_exempt_amount.setter
    def tax_exempt_amount(self, tax_exempt_amount):
        """Sets the tax_exempt_amount of this ProxyGetInvoiceItem.

         The amount of the invoice item's charge that's tax exempt. **Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object   # noqa: E501

        :param tax_exempt_amount: The tax_exempt_amount of this ProxyGetInvoiceItem.  # noqa: E501
        :type: float
        """

        self._tax_exempt_amount = tax_exempt_amount

    @property
    def tax_mode(self):
        """Gets the tax_mode of this ProxyGetInvoiceItem.  # noqa: E501

         The tax mode of the invoice item. **Character limit**: 12 **Values**: `TaxExclusive`, `TaxInclusive`   # noqa: E501

        :return: The tax_mode of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this ProxyGetInvoiceItem.

         The tax mode of the invoice item. **Character limit**: 12 **Values**: `TaxExclusive`, `TaxInclusive`   # noqa: E501

        :param tax_mode: The tax_mode of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._tax_mode = tax_mode

    @property
    def uom(self):
        """Gets the uom of this ProxyGetInvoiceItem.  # noqa: E501

         Specifies the units to measure usage. **Character limit**: **Values**: inherited from `ProductRatePlanCharge.UOM`   # noqa: E501

        :return: The uom of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this ProxyGetInvoiceItem.

         Specifies the units to measure usage. **Character limit**: **Values**: inherited from `ProductRatePlanCharge.UOM`   # noqa: E501

        :param uom: The uom of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def unit_price(self):
        """Gets the unit_price of this ProxyGetInvoiceItem.  # noqa: E501

         The per-unit price of the invoice item. **Character limit**: **Values**: calculated from multiple fields in ProductRatePlanCharge and ProductRatePlanChargeTier objets   # noqa: E501

        :return: The unit_price of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProxyGetInvoiceItem.

         The per-unit price of the invoice item. **Character limit**: **Values**: calculated from multiple fields in ProductRatePlanCharge and ProductRatePlanChargeTier objets   # noqa: E501

        :param unit_price: The unit_price of this ProxyGetInvoiceItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this ProxyGetInvoiceItem.  # noqa: E501

         The ID of the user who last updated the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The updated_by_id of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this ProxyGetInvoiceItem.

         The ID of the user who last updated the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this ProxyGetInvoiceItem.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this ProxyGetInvoiceItem.  # noqa: E501

         The date when the invoice item was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this ProxyGetInvoiceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ProxyGetInvoiceItem.

         The date when the invoice item was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this ProxyGetInvoiceItem.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyGetInvoiceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGetInvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
