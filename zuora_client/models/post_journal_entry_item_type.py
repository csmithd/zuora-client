# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.journal_entry_item_object_custom_fields import JournalEntryItemObjectCustomFields  # noqa: F401,E501


class POSTJournalEntryItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code_name': 'str',
        'accounting_code_type': 'str',
        'amount': 'str',
        'home_currency_amount': 'str',
        'type': 'str'
    }

    attribute_map = {
        'accounting_code_name': 'accountingCodeName',
        'accounting_code_type': 'accountingCodeType',
        'amount': 'amount',
        'home_currency_amount': 'homeCurrencyAmount',
        'type': 'type'
    }

    def __init__(self, accounting_code_name=None, accounting_code_type=None, amount=None, home_currency_amount=None, type=None):  # noqa: E501
        """POSTJournalEntryItemType - a model defined in Swagger"""  # noqa: E501

        self._accounting_code_name = None
        self._accounting_code_type = None
        self._amount = None
        self._home_currency_amount = None
        self._type = None
        self.discriminator = None

        self.accounting_code_name = accounting_code_name
        if accounting_code_type is not None:
            self.accounting_code_type = accounting_code_type
        self.amount = amount
        if home_currency_amount is not None:
            self.home_currency_amount = home_currency_amount
        self.type = type

    @property
    def accounting_code_name(self):
        """Gets the accounting_code_name of this POSTJournalEntryItemType.  # noqa: E501

        Name of the accounting code.   # noqa: E501

        :return: The accounting_code_name of this POSTJournalEntryItemType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code_name

    @accounting_code_name.setter
    def accounting_code_name(self, accounting_code_name):
        """Sets the accounting_code_name of this POSTJournalEntryItemType.

        Name of the accounting code.   # noqa: E501

        :param accounting_code_name: The accounting_code_name of this POSTJournalEntryItemType.  # noqa: E501
        :type: str
        """
        if accounting_code_name is None:
            raise ValueError("Invalid value for `accounting_code_name`, must not be `None`")  # noqa: E501

        self._accounting_code_name = accounting_code_name

    @property
    def accounting_code_type(self):
        """Gets the accounting_code_type of this POSTJournalEntryItemType.  # noqa: E501

        Accounting code type. This field is required if `accountingCodeName` is not unique.  Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature.    # noqa: E501

        :return: The accounting_code_type of this POSTJournalEntryItemType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code_type

    @accounting_code_type.setter
    def accounting_code_type(self, accounting_code_type):
        """Sets the accounting_code_type of this POSTJournalEntryItemType.

        Accounting code type. This field is required if `accountingCodeName` is not unique.  Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature.    # noqa: E501

        :param accounting_code_type: The accounting_code_type of this POSTJournalEntryItemType.  # noqa: E501
        :type: str
        """
        allowed_values = ["AccountsReceivable", "On-Account Receivable", "Cash", "OtherAssets", "CustomerCashOnAccount", "DeferredRevenue", "SalesTaxPayable", "OtherLiabilities", "SalesRevenue", "SalesDiscounts", "OtherRevenue", "OtherEquity", "BadDebt", "OtherExpenses"]  # noqa: E501
        if accounting_code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `accounting_code_type` ({0}), must be one of {1}"  # noqa: E501
                .format(accounting_code_type, allowed_values)
            )

        self._accounting_code_type = accounting_code_type

    @property
    def amount(self):
        """Gets the amount of this POSTJournalEntryItemType.  # noqa: E501

        Journal entry item amount in transaction currency.   # noqa: E501

        :return: The amount of this POSTJournalEntryItemType.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this POSTJournalEntryItemType.

        Journal entry item amount in transaction currency.   # noqa: E501

        :param amount: The amount of this POSTJournalEntryItemType.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def home_currency_amount(self):
        """Gets the home_currency_amount of this POSTJournalEntryItemType.  # noqa: E501

        Journal entry item amount in home currency.  This field is required if you have set your home currency for foreign currency conversion. Otherwise, do not pass this field.   # noqa: E501

        :return: The home_currency_amount of this POSTJournalEntryItemType.  # noqa: E501
        :rtype: str
        """
        return self._home_currency_amount

    @home_currency_amount.setter
    def home_currency_amount(self, home_currency_amount):
        """Sets the home_currency_amount of this POSTJournalEntryItemType.

        Journal entry item amount in home currency.  This field is required if you have set your home currency for foreign currency conversion. Otherwise, do not pass this field.   # noqa: E501

        :param home_currency_amount: The home_currency_amount of this POSTJournalEntryItemType.  # noqa: E501
        :type: str
        """

        self._home_currency_amount = home_currency_amount

    @property
    def type(self):
        """Gets the type of this POSTJournalEntryItemType.  # noqa: E501

        Type of journal entry item.   # noqa: E501

        :return: The type of this POSTJournalEntryItemType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this POSTJournalEntryItemType.

        Type of journal entry item.   # noqa: E501

        :param type: The type of this POSTJournalEntryItemType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Credit", "Debit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTJournalEntryItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTJournalEntryItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
