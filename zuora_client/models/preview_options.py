# coding: utf-8




import pprint
import re  # noqa: F401

import six


class PreviewOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preview_thru_type': 'str',
        'preview_types': 'list[str]',
        'specific_preview_thru_date': 'date'
    }

    attribute_map = {
        'preview_thru_type': 'previewThruType',
        'preview_types': 'previewTypes',
        'specific_preview_thru_date': 'specificPreviewThruDate'
    }

    def __init__(self, preview_thru_type=None, preview_types=None, specific_preview_thru_date=None):  # noqa: E501
        """PreviewOptions - a model defined in Swagger"""  # noqa: E501

        self._preview_thru_type = None
        self._preview_types = None
        self._specific_preview_thru_date = None
        self.discriminator = None

        if preview_thru_type is not None:
            self.preview_thru_type = preview_thru_type
        if preview_types is not None:
            self.preview_types = preview_types
        if specific_preview_thru_date is not None:
            self.specific_preview_thru_date = specific_preview_thru_date

    @property
    def preview_thru_type(self):
        """Gets the preview_thru_type of this PreviewOptions.  # noqa: E501

        The options on how the preview through date is calculated. Available for preview only. The 'TermEnd' option is invalid when any subscription included in this order is evergreen.    If set the value of this field to 'SpecificDate', you must specify a specific date in the 'specificPreviewThruDate' field.   # noqa: E501

        :return: The preview_thru_type of this PreviewOptions.  # noqa: E501
        :rtype: str
        """
        return self._preview_thru_type

    @preview_thru_type.setter
    def preview_thru_type(self, preview_thru_type):
        """Sets the preview_thru_type of this PreviewOptions.

        The options on how the preview through date is calculated. Available for preview only. The 'TermEnd' option is invalid when any subscription included in this order is evergreen.    If set the value of this field to 'SpecificDate', you must specify a specific date in the 'specificPreviewThruDate' field.   # noqa: E501

        :param preview_thru_type: The preview_thru_type of this PreviewOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["SpecificDate", "TermEnd"]  # noqa: E501
        if preview_thru_type not in allowed_values:
            raise ValueError(
                "Invalid value for `preview_thru_type` ({0}), must be one of {1}"  # noqa: E501
                .format(preview_thru_type, allowed_values)
            )

        self._preview_thru_type = preview_thru_type

    @property
    def preview_types(self):
        """Gets the preview_types of this PreviewOptions.  # noqa: E501

        One or more types of the preview. It can include:  * ChargeMetrics: charge level metrics will be returned in the response, including: `cmrr`, `tcv`, `tcb`, and `tax`. * BillingDocs: `invoices` and `creditMemos` will be returned in the response. Note `creditMemos` is only available if the Invoice Settlement feature is enabled. * OrderMetrics: order metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv`, and `elp`.   # noqa: E501

        :return: The preview_types of this PreviewOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._preview_types

    @preview_types.setter
    def preview_types(self, preview_types):
        """Sets the preview_types of this PreviewOptions.

        One or more types of the preview. It can include:  * ChargeMetrics: charge level metrics will be returned in the response, including: `cmrr`, `tcv`, `tcb`, and `tax`. * BillingDocs: `invoices` and `creditMemos` will be returned in the response. Note `creditMemos` is only available if the Invoice Settlement feature is enabled. * OrderMetrics: order metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv`, and `elp`.   # noqa: E501

        :param preview_types: The preview_types of this PreviewOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ChargeMetrics", "BillingDocs", "OrderMetrics"]  # noqa: E501
        if not set(preview_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preview_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preview_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preview_types = preview_types

    @property
    def specific_preview_thru_date(self):
        """Gets the specific_preview_thru_date of this PreviewOptions.  # noqa: E501

        The end date of the order preview. You can preview the invoice charges through the preview through date. (Invoice preview only)   **Note:** This field is only applicable if the 'previewThruType' field is set to 'SpecificDate'.   # noqa: E501

        :return: The specific_preview_thru_date of this PreviewOptions.  # noqa: E501
        :rtype: date
        """
        return self._specific_preview_thru_date

    @specific_preview_thru_date.setter
    def specific_preview_thru_date(self, specific_preview_thru_date):
        """Sets the specific_preview_thru_date of this PreviewOptions.

        The end date of the order preview. You can preview the invoice charges through the preview through date. (Invoice preview only)   **Note:** This field is only applicable if the 'previewThruType' field is set to 'SpecificDate'.   # noqa: E501

        :param specific_preview_thru_date: The specific_preview_thru_date of this PreviewOptions.  # noqa: E501
        :type: date
        """

        self._specific_preview_thru_date = specific_preview_thru_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
