# coding: utf-8




import pprint
import re  # noqa: F401

import six


class PostInvoiceEmailRequestType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_addresses': 'str',
        'include_additional_email_addresses': 'bool',
        'use_email_template_setting': 'bool'
    }

    attribute_map = {
        'email_addresses': 'emailAddresses',
        'include_additional_email_addresses': 'includeAdditionalEmailAddresses',
        'use_email_template_setting': 'useEmailTemplateSetting'
    }

    def __init__(self, email_addresses=None, include_additional_email_addresses=False, use_email_template_setting=False):  # noqa: E501
        """PostInvoiceEmailRequestType - a model defined in Swagger"""  # noqa: E501

        self._email_addresses = None
        self._include_additional_email_addresses = None
        self._use_email_template_setting = None
        self.discriminator = None

        if email_addresses is not None:
            self.email_addresses = email_addresses
        if include_additional_email_addresses is not None:
            self.include_additional_email_addresses = include_additional_email_addresses
        if use_email_template_setting is not None:
            self.use_email_template_setting = use_email_template_setting

    @property
    def email_addresses(self):
        """Gets the email_addresses of this PostInvoiceEmailRequestType.  # noqa: E501

        The valid email addresses you want to email an invoice to. Use commas to separate email addresses.  **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.   # noqa: E501

        :return: The email_addresses of this PostInvoiceEmailRequestType.  # noqa: E501
        :rtype: str
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this PostInvoiceEmailRequestType.

        The valid email addresses you want to email an invoice to. Use commas to separate email addresses.  **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.   # noqa: E501

        :param email_addresses: The email_addresses of this PostInvoiceEmailRequestType.  # noqa: E501
        :type: str
        """

        self._email_addresses = email_addresses

    @property
    def include_additional_email_addresses(self):
        """Gets the include_additional_email_addresses of this PostInvoiceEmailRequestType.  # noqa: E501

        Indicates whether to send an invoice to the additional email addresses of the invoice account.    You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.   # noqa: E501

        :return: The include_additional_email_addresses of this PostInvoiceEmailRequestType.  # noqa: E501
        :rtype: bool
        """
        return self._include_additional_email_addresses

    @include_additional_email_addresses.setter
    def include_additional_email_addresses(self, include_additional_email_addresses):
        """Sets the include_additional_email_addresses of this PostInvoiceEmailRequestType.

        Indicates whether to send an invoice to the additional email addresses of the invoice account.    You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.   # noqa: E501

        :param include_additional_email_addresses: The include_additional_email_addresses of this PostInvoiceEmailRequestType.  # noqa: E501
        :type: bool
        """

        self._include_additional_email_addresses = include_additional_email_addresses

    @property
    def use_email_template_setting(self):
        """Gets the use_email_template_setting of this PostInvoiceEmailRequestType.  # noqa: E501

        Indicates whether to email an invoice based on the email template setting.   If you set this field to `true`, the invoice is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.   # noqa: E501

        :return: The use_email_template_setting of this PostInvoiceEmailRequestType.  # noqa: E501
        :rtype: bool
        """
        return self._use_email_template_setting

    @use_email_template_setting.setter
    def use_email_template_setting(self, use_email_template_setting):
        """Sets the use_email_template_setting of this PostInvoiceEmailRequestType.

        Indicates whether to email an invoice based on the email template setting.   If you set this field to `true`, the invoice is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.   # noqa: E501

        :param use_email_template_setting: The use_email_template_setting of this PostInvoiceEmailRequestType.  # noqa: E501
        :type: bool
        """

        self._use_email_template_setting = use_email_template_setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostInvoiceEmailRequestType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostInvoiceEmailRequestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
