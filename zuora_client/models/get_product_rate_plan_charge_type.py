# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.finance_information import FinanceInformation  # noqa: F401,E501
from zuora_client.models.get_product_discount_apply_details_type import GETProductDiscountApplyDetailsType  # noqa: F401,E501
from zuora_client.models.get_product_rate_plan_charge_pricing_type import GETProductRatePlanChargePricingType  # noqa: F401,E501
from zuora_client.models.product_rate_plan_charge_object_custom_fields import ProductRatePlanChargeObjectCustomFields  # noqa: F401,E501
from zuora_client.models.product_rate_plan_charge_object_ns_fields import ProductRatePlanChargeObjectNSFields  # noqa: F401,E501


class GETProductRatePlanChargeType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class__ns': 'str',
        'deferred_rev_account__ns': 'str',
        'department__ns': 'str',
        'include_children__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'str',
        'location__ns': 'str',
        'recognized_rev_account__ns': 'str',
        'rev_rec_end__ns': 'str',
        'rev_rec_start__ns': 'str',
        'rev_rec_template_type__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'apply_discount_to': 'str',
        'billing_day': 'str',
        'billing_period': 'str',
        'billing_period_alignment': 'str',
        'billing_timing': 'str',
        'default_quantity': 'str',
        'description': 'str',
        'discount_class': 'str',
        'discount_level': 'str',
        'end_date_condition': 'str',
        'finance_information': 'FinanceInformation',
        'id': 'str',
        'included_units': 'str',
        'list_price_base': 'str',
        'max_quantity': 'str',
        'min_quantity': 'str',
        'model': 'str',
        'name': 'str',
        'number_of_periods': 'int',
        'overage_calculation_option': 'str',
        'overage_unused_units_credit_option': 'str',
        'prepay_periods': 'int',
        'price_change_option': 'str',
        'price_increase_percentage': 'str',
        'pricing': 'list[GETProductRatePlanChargePricingType]',
        'pricing_summary': 'list[str]',
        'product_discount_apply_details': 'list[GETProductDiscountApplyDetailsType]',
        'rating_group': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'str',
        'revenue_recognition_rule_name': 'str',
        'smoothing_model': 'str',
        'specific_billing_period': 'int',
        'tax_code': 'str',
        'tax_mode': 'str',
        'taxable': 'bool',
        'trigger_event': 'str',
        'type': 'str',
        'uom': 'str',
        'up_to_periods': 'int',
        'up_to_periods_type': 'str',
        'usage_record_rating_option': 'str',
        'use_discount_specific_accounting_code': 'bool',
        'use_tenant_default_for_price_change': 'bool'
    }

    attribute_map = {
        'class__ns': 'Class__NS',
        'deferred_rev_account__ns': 'DeferredRevAccount__NS',
        'department__ns': 'Department__NS',
        'include_children__ns': 'IncludeChildren__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'location__ns': 'Location__NS',
        'recognized_rev_account__ns': 'RecognizedRevAccount__NS',
        'rev_rec_end__ns': 'RevRecEnd__NS',
        'rev_rec_start__ns': 'RevRecStart__NS',
        'rev_rec_template_type__ns': 'RevRecTemplateType__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'apply_discount_to': 'applyDiscountTo',
        'billing_day': 'billingDay',
        'billing_period': 'billingPeriod',
        'billing_period_alignment': 'billingPeriodAlignment',
        'billing_timing': 'billingTiming',
        'default_quantity': 'defaultQuantity',
        'description': 'description',
        'discount_class': 'discountClass',
        'discount_level': 'discountLevel',
        'end_date_condition': 'endDateCondition',
        'finance_information': 'financeInformation',
        'id': 'id',
        'included_units': 'includedUnits',
        'list_price_base': 'listPriceBase',
        'max_quantity': 'maxQuantity',
        'min_quantity': 'minQuantity',
        'model': 'model',
        'name': 'name',
        'number_of_periods': 'numberOfPeriods',
        'overage_calculation_option': 'overageCalculationOption',
        'overage_unused_units_credit_option': 'overageUnusedUnitsCreditOption',
        'prepay_periods': 'prepayPeriods',
        'price_change_option': 'priceChangeOption',
        'price_increase_percentage': 'priceIncreasePercentage',
        'pricing': 'pricing',
        'pricing_summary': 'pricingSummary',
        'product_discount_apply_details': 'productDiscountApplyDetails',
        'rating_group': 'ratingGroup',
        'rev_rec_code': 'revRecCode',
        'rev_rec_trigger_condition': 'revRecTriggerCondition',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'smoothing_model': 'smoothingModel',
        'specific_billing_period': 'specificBillingPeriod',
        'tax_code': 'taxCode',
        'tax_mode': 'taxMode',
        'taxable': 'taxable',
        'trigger_event': 'triggerEvent',
        'type': 'type',
        'uom': 'uom',
        'up_to_periods': 'upToPeriods',
        'up_to_periods_type': 'upToPeriodsType',
        'usage_record_rating_option': 'usageRecordRatingOption',
        'use_discount_specific_accounting_code': 'useDiscountSpecificAccountingCode',
        'use_tenant_default_for_price_change': 'useTenantDefaultForPriceChange'
    }

    def __init__(self, class__ns=None, deferred_rev_account__ns=None, department__ns=None, include_children__ns=None, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, location__ns=None, recognized_rev_account__ns=None, rev_rec_end__ns=None, rev_rec_start__ns=None, rev_rec_template_type__ns=None, subsidiary__ns=None, sync_date__ns=None, apply_discount_to=None, billing_day=None, billing_period=None, billing_period_alignment=None, billing_timing=None, default_quantity=None, description=None, discount_class=None, discount_level=None, end_date_condition=None, finance_information=None, id=None, included_units=None, list_price_base=None, max_quantity=None, min_quantity=None, model=None, name=None, number_of_periods=None, overage_calculation_option=None, overage_unused_units_credit_option=None, prepay_periods=None, price_change_option=None, price_increase_percentage=None, pricing=None, pricing_summary=None, product_discount_apply_details=None, rating_group=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, smoothing_model=None, specific_billing_period=None, tax_code=None, tax_mode=None, taxable=None, trigger_event=None, type=None, uom=None, up_to_periods=None, up_to_periods_type=None, usage_record_rating_option=None, use_discount_specific_accounting_code=None, use_tenant_default_for_price_change=None):  # noqa: E501
        """GETProductRatePlanChargeType - a model defined in Swagger"""  # noqa: E501

        self._class__ns = None
        self._deferred_rev_account__ns = None
        self._department__ns = None
        self._include_children__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._location__ns = None
        self._recognized_rev_account__ns = None
        self._rev_rec_end__ns = None
        self._rev_rec_start__ns = None
        self._rev_rec_template_type__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._apply_discount_to = None
        self._billing_day = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._default_quantity = None
        self._description = None
        self._discount_class = None
        self._discount_level = None
        self._end_date_condition = None
        self._finance_information = None
        self._id = None
        self._included_units = None
        self._list_price_base = None
        self._max_quantity = None
        self._min_quantity = None
        self._model = None
        self._name = None
        self._number_of_periods = None
        self._overage_calculation_option = None
        self._overage_unused_units_credit_option = None
        self._prepay_periods = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._pricing = None
        self._pricing_summary = None
        self._product_discount_apply_details = None
        self._rating_group = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._smoothing_model = None
        self._specific_billing_period = None
        self._tax_code = None
        self._tax_mode = None
        self._taxable = None
        self._trigger_event = None
        self._type = None
        self._uom = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._usage_record_rating_option = None
        self._use_discount_specific_accounting_code = None
        self._use_tenant_default_for_price_change = None
        self.discriminator = None

        if class__ns is not None:
            self.class__ns = class__ns
        if deferred_rev_account__ns is not None:
            self.deferred_rev_account__ns = deferred_rev_account__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if include_children__ns is not None:
            self.include_children__ns = include_children__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if recognized_rev_account__ns is not None:
            self.recognized_rev_account__ns = recognized_rev_account__ns
        if rev_rec_end__ns is not None:
            self.rev_rec_end__ns = rev_rec_end__ns
        if rev_rec_start__ns is not None:
            self.rev_rec_start__ns = rev_rec_start__ns
        if rev_rec_template_type__ns is not None:
            self.rev_rec_template_type__ns = rev_rec_template_type__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if billing_day is not None:
            self.billing_day = billing_day
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if default_quantity is not None:
            self.default_quantity = default_quantity
        if description is not None:
            self.description = description
        if discount_class is not None:
            self.discount_class = discount_class
        if discount_level is not None:
            self.discount_level = discount_level
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if finance_information is not None:
            self.finance_information = finance_information
        if id is not None:
            self.id = id
        if included_units is not None:
            self.included_units = included_units
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if max_quantity is not None:
            self.max_quantity = max_quantity
        if min_quantity is not None:
            self.min_quantity = min_quantity
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if number_of_periods is not None:
            self.number_of_periods = number_of_periods
        if overage_calculation_option is not None:
            self.overage_calculation_option = overage_calculation_option
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if prepay_periods is not None:
            self.prepay_periods = prepay_periods
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if pricing is not None:
            self.pricing = pricing
        if pricing_summary is not None:
            self.pricing_summary = pricing_summary
        if product_discount_apply_details is not None:
            self.product_discount_apply_details = product_discount_apply_details
        if rating_group is not None:
            self.rating_group = rating_group
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if smoothing_model is not None:
            self.smoothing_model = smoothing_model
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if taxable is not None:
            self.taxable = taxable
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if type is not None:
            self.type = type
        if uom is not None:
            self.uom = uom
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if usage_record_rating_option is not None:
            self.usage_record_rating_option = usage_record_rating_option
        if use_discount_specific_accounting_code is not None:
            self.use_discount_specific_accounting_code = use_discount_specific_accounting_code
        if use_tenant_default_for_price_change is not None:
            self.use_tenant_default_for_price_change = use_tenant_default_for_price_change

    @property
    def class__ns(self):
        """Gets the class__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this GETProductRatePlanChargeType.

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if class__ns is not None and len(class__ns) > 255:
            raise ValueError("Invalid value for `class__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._class__ns = class__ns

    @property
    def deferred_rev_account__ns(self):
        """Gets the deferred_rev_account__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The deferred_rev_account__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._deferred_rev_account__ns

    @deferred_rev_account__ns.setter
    def deferred_rev_account__ns(self, deferred_rev_account__ns):
        """Sets the deferred_rev_account__ns of this GETProductRatePlanChargeType.

        Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param deferred_rev_account__ns: The deferred_rev_account__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if deferred_rev_account__ns is not None and len(deferred_rev_account__ns) > 255:
            raise ValueError("Invalid value for `deferred_rev_account__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._deferred_rev_account__ns = deferred_rev_account__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this GETProductRatePlanChargeType.

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if department__ns is not None and len(department__ns) > 255:
            raise ValueError("Invalid value for `department__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._department__ns = department__ns

    @property
    def include_children__ns(self):
        """Gets the include_children__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The include_children__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._include_children__ns

    @include_children__ns.setter
    def include_children__ns(self, include_children__ns):
        """Sets the include_children__ns of this GETProductRatePlanChargeType.

        Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param include_children__ns: The include_children__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if include_children__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `include_children__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(include_children__ns, allowed_values)
            )

        self._include_children__ns = include_children__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this GETProductRatePlanChargeType.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this GETProductRatePlanChargeType.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this GETProductRatePlanChargeType.

        Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Type of item that is created in NetSuite for the product rate plan charge. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The item_type__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this GETProductRatePlanChargeType.

        Type of item that is created in NetSuite for the product rate plan charge. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param item_type__ns: The item_type__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Inventory", "Non Inventory", "Service"]  # noqa: E501
        if item_type__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(item_type__ns, allowed_values)
            )

        self._item_type__ns = item_type__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this GETProductRatePlanChargeType.

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if location__ns is not None and len(location__ns) > 255:
            raise ValueError("Invalid value for `location__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._location__ns = location__ns

    @property
    def recognized_rev_account__ns(self):
        """Gets the recognized_rev_account__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The recognized_rev_account__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._recognized_rev_account__ns

    @recognized_rev_account__ns.setter
    def recognized_rev_account__ns(self, recognized_rev_account__ns):
        """Sets the recognized_rev_account__ns of this GETProductRatePlanChargeType.

        Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param recognized_rev_account__ns: The recognized_rev_account__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if recognized_rev_account__ns is not None and len(recognized_rev_account__ns) > 255:
            raise ValueError("Invalid value for `recognized_rev_account__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._recognized_rev_account__ns = recognized_rev_account__ns

    @property
    def rev_rec_end__ns(self):
        """Gets the rev_rec_end__ns of this GETProductRatePlanChargeType.  # noqa: E501

        End date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_end__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_end__ns

    @rev_rec_end__ns.setter
    def rev_rec_end__ns(self, rev_rec_end__ns):
        """Sets the rev_rec_end__ns of this GETProductRatePlanChargeType.

        End date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_end__ns: The rev_rec_end__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Charge Period Start", "Rev Rec Trigger Date", "Use NetSuite Rev Rec Template"]  # noqa: E501
        if rev_rec_end__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `rev_rec_end__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(rev_rec_end__ns, allowed_values)
            )

        self._rev_rec_end__ns = rev_rec_end__ns

    @property
    def rev_rec_start__ns(self):
        """Gets the rev_rec_start__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Start date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_start__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_start__ns

    @rev_rec_start__ns.setter
    def rev_rec_start__ns(self, rev_rec_start__ns):
        """Sets the rev_rec_start__ns of this GETProductRatePlanChargeType.

        Start date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_start__ns: The rev_rec_start__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Charge Period Start", "Rev Rec Trigger Date", "Use NetSuite Rev Rec Template"]  # noqa: E501
        if rev_rec_start__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `rev_rec_start__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(rev_rec_start__ns, allowed_values)
            )

        self._rev_rec_start__ns = rev_rec_start__ns

    @property
    def rev_rec_template_type__ns(self):
        """Gets the rev_rec_template_type__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_template_type__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_template_type__ns

    @rev_rec_template_type__ns.setter
    def rev_rec_template_type__ns(self, rev_rec_template_type__ns):
        """Sets the rev_rec_template_type__ns of this GETProductRatePlanChargeType.

        Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_template_type__ns: The rev_rec_template_type__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if rev_rec_template_type__ns is not None and len(rev_rec_template_type__ns) > 255:
            raise ValueError("Invalid value for `rev_rec_template_type__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._rev_rec_template_type__ns = rev_rec_template_type__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this GETProductRatePlanChargeType.

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if subsidiary__ns is not None and len(subsidiary__ns) > 255:
            raise ValueError("Invalid value for `subsidiary__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this GETProductRatePlanChargeType.  # noqa: E501

        Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this GETProductRatePlanChargeType.

        Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies where (to what charge type) the discount will be applied. These field values are case-sensitive.  Permissible values: - RECURRING - USAGE - ONETIMERECURRING - ONETIMEUSAGE - RECURRINGUSAGE - ONETIMERECURRINGUSAGE   # noqa: E501

        :return: The apply_discount_to of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this GETProductRatePlanChargeType.

        Specifies where (to what charge type) the discount will be applied. These field values are case-sensitive.  Permissible values: - RECURRING - USAGE - ONETIMERECURRING - ONETIMEUSAGE - RECURRINGUSAGE - ONETIMERECURRINGUSAGE   # noqa: E501

        :param apply_discount_to: The apply_discount_to of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._apply_discount_to = apply_discount_to

    @property
    def billing_day(self):
        """Gets the billing_day of this GETProductRatePlanChargeType.  # noqa: E501

        The bill cycle day (BCD) for the charge. The BCD determines which day of the month or week the customer is billed. The BCD value in the account can override the BCD in this object.   # noqa: E501

        :return: The billing_day of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._billing_day

    @billing_day.setter
    def billing_day(self, billing_day):
        """Sets the billing_day of this GETProductRatePlanChargeType.

        The bill cycle day (BCD) for the charge. The BCD determines which day of the month or week the customer is billed. The BCD value in the account can override the BCD in this object.   # noqa: E501

        :param billing_day: The billing_day of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._billing_day = billing_day

    @property
    def billing_period(self):
        """Gets the billing_period of this GETProductRatePlanChargeType.  # noqa: E501

        The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).  Values: - Month - Quarter - Annual - Semi-Annual - Specific Months - Week - Specific_Weeks   # noqa: E501

        :return: The billing_period of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this GETProductRatePlanChargeType.

        The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).  Values: - Month - Quarter - Annual - Semi-Annual - Specific Months - Week - Specific_Weeks   # noqa: E501

        :param billing_period: The billing_period of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this GETProductRatePlanChargeType.  # noqa: E501

        Aligns charges within the same subscription if multiple charges begin on different dates.  Possible values: - AlignToCharge - AlignToSubscriptionStart - AlignToTermStart   # noqa: E501

        :return: The billing_period_alignment of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this GETProductRatePlanChargeType.

        Aligns charges within the same subscription if multiple charges begin on different dates.  Possible values: - AlignToCharge - AlignToSubscriptionStart - AlignToTermStart   # noqa: E501

        :param billing_period_alignment: The billing_period_alignment of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this GETProductRatePlanChargeType.  # noqa: E501

        The billing timing for the charge. You can choose to bill for charges in advance or in arrears.  Values: - In Advance - In Arrears  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).    # noqa: E501

        :return: The billing_timing of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this GETProductRatePlanChargeType.

        The billing timing for the charge. You can choose to bill for charges in advance or in arrears.  Values: - In Advance - In Arrears  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).    # noqa: E501

        :param billing_timing: The billing_timing of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._billing_timing = billing_timing

    @property
    def default_quantity(self):
        """Gets the default_quantity of this GETProductRatePlanChargeType.  # noqa: E501

        The default quantity of units.  This field is required if you use a per-unit charge model.   # noqa: E501

        :return: The default_quantity of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._default_quantity

    @default_quantity.setter
    def default_quantity(self, default_quantity):
        """Sets the default_quantity of this GETProductRatePlanChargeType.

        The default quantity of units.  This field is required if you use a per-unit charge model.   # noqa: E501

        :param default_quantity: The default_quantity of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._default_quantity = default_quantity

    @property
    def description(self):
        """Gets the description of this GETProductRatePlanChargeType.  # noqa: E501

        Usually a brief line item summary of the Rate Plan Charge.   # noqa: E501

        :return: The description of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GETProductRatePlanChargeType.

        Usually a brief line item summary of the Rate Plan Charge.   # noqa: E501

        :param description: The description of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_class(self):
        """Gets the discount_class of this GETProductRatePlanChargeType.  # noqa: E501

        The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :return: The discount_class of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._discount_class

    @discount_class.setter
    def discount_class(self, discount_class):
        """Sets the discount_class of this GETProductRatePlanChargeType.

        The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :param discount_class: The discount_class of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._discount_class = discount_class

    @property
    def discount_level(self):
        """Gets the discount_level of this GETProductRatePlanChargeType.  # noqa: E501

        The level of the discount.   Values: - RatePlan - Subscription - Account   # noqa: E501

        :return: The discount_level of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this GETProductRatePlanChargeType.

        The level of the discount.   Values: - RatePlan - Subscription - Account   # noqa: E501

        :param discount_level: The discount_level of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._discount_level = discount_level

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this GETProductRatePlanChargeType.  # noqa: E501

        Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values: - Subscription_End - Fixed_Period   # noqa: E501

        :return: The end_date_condition of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this GETProductRatePlanChargeType.

        Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values: - Subscription_End - Fixed_Period   # noqa: E501

        :param end_date_condition: The end_date_condition of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._end_date_condition = end_date_condition

    @property
    def finance_information(self):
        """Gets the finance_information of this GETProductRatePlanChargeType.  # noqa: E501


        :return: The finance_information of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: FinanceInformation
        """
        return self._finance_information

    @finance_information.setter
    def finance_information(self, finance_information):
        """Sets the finance_information of this GETProductRatePlanChargeType.


        :param finance_information: The finance_information of this GETProductRatePlanChargeType.  # noqa: E501
        :type: FinanceInformation
        """

        self._finance_information = finance_information

    @property
    def id(self):
        """Gets the id of this GETProductRatePlanChargeType.  # noqa: E501

        Unique product rate-plan charge ID.   # noqa: E501

        :return: The id of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETProductRatePlanChargeType.

        Unique product rate-plan charge ID.   # noqa: E501

        :param id: The id of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def included_units(self):
        """Gets the included_units of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the number of units in the base set of units when the charge model is Overage.   # noqa: E501

        :return: The included_units of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this GETProductRatePlanChargeType.

        Specifies the number of units in the base set of units when the charge model is Overage.   # noqa: E501

        :param included_units: The included_units of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._included_units = included_units

    @property
    def list_price_base(self):
        """Gets the list_price_base of this GETProductRatePlanChargeType.  # noqa: E501

        The list price base for the product rate plan charge.  Values: - Month - Billing Period - Per_Week   # noqa: E501

        :return: The list_price_base of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this GETProductRatePlanChargeType.

        The list price base for the product rate plan charge.  Values: - Month - Billing Period - Per_Week   # noqa: E501

        :param list_price_base: The list_price_base of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._list_price_base = list_price_base

    @property
    def max_quantity(self):
        """Gets the max_quantity of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the maximum number of units for this charge. Use this field and the `minQuantity` field to create a range of units allowed in a product rate plan charge.   # noqa: E501

        :return: The max_quantity of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this GETProductRatePlanChargeType.

        Specifies the maximum number of units for this charge. Use this field and the `minQuantity` field to create a range of units allowed in a product rate plan charge.   # noqa: E501

        :param max_quantity: The max_quantity of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._max_quantity = max_quantity

    @property
    def min_quantity(self):
        """Gets the min_quantity of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the minimum number of units for this charge. Use this field and the `maxQuantity` field to create a range of units allowed in a product rate plan charge.   # noqa: E501

        :return: The min_quantity of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this GETProductRatePlanChargeType.

        Specifies the minimum number of units for this charge. Use this field and the `maxQuantity` field to create a range of units allowed in a product rate plan charge.   # noqa: E501

        :param min_quantity: The min_quantity of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._min_quantity = min_quantity

    @property
    def model(self):
        """Gets the model of this GETProductRatePlanChargeType.  # noqa: E501

        Charge model which determines how charges are calculated.  Charge models must be individually activated in Zuora Billing administration.   Possible values are: - FlatFee - PerUnit - Overage - Volume - Tiered - TieredWithOverage - DiscountFixedAmount - DiscountPercentage The Pricing Summaries section below details these charge models and their associated pricingSummary values.   # noqa: E501

        :return: The model of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GETProductRatePlanChargeType.

        Charge model which determines how charges are calculated.  Charge models must be individually activated in Zuora Billing administration.   Possible values are: - FlatFee - PerUnit - Overage - Volume - Tiered - TieredWithOverage - DiscountFixedAmount - DiscountPercentage The Pricing Summaries section below details these charge models and their associated pricingSummary values.   # noqa: E501

        :param model: The model of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this GETProductRatePlanChargeType.  # noqa: E501

        Name of the product rate-plan charge. (Not required to be unique.)   # noqa: E501

        :return: The name of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GETProductRatePlanChargeType.

        Name of the product rate-plan charge. (Not required to be unique.)   # noqa: E501

        :param name: The name of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_periods(self):
        """Gets the number_of_periods of this GETProductRatePlanChargeType.  # noqa: E501

        Value specifies the number of periods used in the smoothing model calculations Used when overage smoothing model is `RollingWindow` or `Rollover`.   # noqa: E501

        :return: The number_of_periods of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_periods

    @number_of_periods.setter
    def number_of_periods(self, number_of_periods):
        """Sets the number_of_periods of this GETProductRatePlanChargeType.

        Value specifies the number of periods used in the smoothing model calculations Used when overage smoothing model is `RollingWindow` or `Rollover`.   # noqa: E501

        :param number_of_periods: The number_of_periods of this GETProductRatePlanChargeType.  # noqa: E501
        :type: int
        """

        self._number_of_periods = number_of_periods

    @property
    def overage_calculation_option(self):
        """Gets the overage_calculation_option of this GETProductRatePlanChargeType.  # noqa: E501

        Value specifies when to calculate overage charges.  Values: - EndOfSmoothingPeriod - PerBillingPeriod   # noqa: E501

        :return: The overage_calculation_option of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._overage_calculation_option

    @overage_calculation_option.setter
    def overage_calculation_option(self, overage_calculation_option):
        """Sets the overage_calculation_option of this GETProductRatePlanChargeType.

        Value specifies when to calculate overage charges.  Values: - EndOfSmoothingPeriod - PerBillingPeriod   # noqa: E501

        :param overage_calculation_option: The overage_calculation_option of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._overage_calculation_option = overage_calculation_option

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this GETProductRatePlanChargeType.  # noqa: E501

        Determines whether to credit the customer with unused units of usage.  Values: - NoCredit - CreditBySpecificRate   # noqa: E501

        :return: The overage_unused_units_credit_option of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this GETProductRatePlanChargeType.

        Determines whether to credit the customer with unused units of usage.  Values: - NoCredit - CreditBySpecificRate   # noqa: E501

        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def prepay_periods(self):
        """Gets the prepay_periods of this GETProductRatePlanChargeType.  # noqa: E501

        The number of periods to which prepayment is set.   **Note:** This field is only available if you already have the prepayment feature enabled. The prepayment feature is deprecated and available only for backward compatibility. Zuora does not support enabling this feature anymore.   # noqa: E501

        :return: The prepay_periods of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: int
        """
        return self._prepay_periods

    @prepay_periods.setter
    def prepay_periods(self, prepay_periods):
        """Sets the prepay_periods of this GETProductRatePlanChargeType.

        The number of periods to which prepayment is set.   **Note:** This field is only available if you already have the prepayment feature enabled. The prepayment feature is deprecated and available only for backward compatibility. Zuora does not support enabling this feature anymore.   # noqa: E501

        :param prepay_periods: The prepay_periods of this GETProductRatePlanChargeType.  # noqa: E501
        :type: int
        """

        self._prepay_periods = prepay_periods

    @property
    def price_change_option(self):
        """Gets the price_change_option of this GETProductRatePlanChargeType.  # noqa: E501

        Applies an automatic price change when a termed subscription is renewed and the following applies:  1. AutomatedPriceChange setting is on 2. Charge type is not one-time 3. Charge model is not discount fixed amount  Values: - NoChange (default) - SpecificPercentageValue - UseLatestProductCatalogPricing   # noqa: E501

        :return: The price_change_option of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this GETProductRatePlanChargeType.

        Applies an automatic price change when a termed subscription is renewed and the following applies:  1. AutomatedPriceChange setting is on 2. Charge type is not one-time 3. Charge model is not discount fixed amount  Values: - NoChange (default) - SpecificPercentageValue - UseLatestProductCatalogPricing   # noqa: E501

        :param price_change_option: The price_change_option of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.  1. AutomatedPriceChange setting is on 2. Charge type is not one-time 3. Charge model is not discount fixed amount  Values: a decimal between -100 and 100   # noqa: E501

        :return: The price_increase_percentage of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this GETProductRatePlanChargeType.

        Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.  1. AutomatedPriceChange setting is on 2. Charge type is not one-time 3. Charge model is not discount fixed amount  Values: a decimal between -100 and 100   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def pricing(self):
        """Gets the pricing of this GETProductRatePlanChargeType.  # noqa: E501

        One or more price charge models with attributes that further describe the model.  Some attributes show as null values when not applicable.   # noqa: E501

        :return: The pricing of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: list[GETProductRatePlanChargePricingType]
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this GETProductRatePlanChargeType.

        One or more price charge models with attributes that further describe the model.  Some attributes show as null values when not applicable.   # noqa: E501

        :param pricing: The pricing of this GETProductRatePlanChargeType.  # noqa: E501
        :type: list[GETProductRatePlanChargePricingType]
        """

        self._pricing = pricing

    @property
    def pricing_summary(self):
        """Gets the pricing_summary of this GETProductRatePlanChargeType.  # noqa: E501

        A concise description of the charge model and pricing that is suitable to show to your customers. When the rate plan charge model is `Tiered` and multi-currency is enabled, this field includes an array of string of each currency, and each string of currency includes tier price description separated by comma.   # noqa: E501

        :return: The pricing_summary of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: list[str]
        """
        return self._pricing_summary

    @pricing_summary.setter
    def pricing_summary(self, pricing_summary):
        """Sets the pricing_summary of this GETProductRatePlanChargeType.

        A concise description of the charge model and pricing that is suitable to show to your customers. When the rate plan charge model is `Tiered` and multi-currency is enabled, this field includes an array of string of each currency, and each string of currency includes tier price description separated by comma.   # noqa: E501

        :param pricing_summary: The pricing_summary of this GETProductRatePlanChargeType.  # noqa: E501
        :type: list[str]
        """

        self._pricing_summary = pricing_summary

    @property
    def product_discount_apply_details(self):
        """Gets the product_discount_apply_details of this GETProductRatePlanChargeType.  # noqa: E501

        Container for the application details about a discount product rate plan charge.   Only discount product rate plan charges have values in this field.   # noqa: E501

        :return: The product_discount_apply_details of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: list[GETProductDiscountApplyDetailsType]
        """
        return self._product_discount_apply_details

    @product_discount_apply_details.setter
    def product_discount_apply_details(self, product_discount_apply_details):
        """Sets the product_discount_apply_details of this GETProductRatePlanChargeType.

        Container for the application details about a discount product rate plan charge.   Only discount product rate plan charges have values in this field.   # noqa: E501

        :param product_discount_apply_details: The product_discount_apply_details of this GETProductRatePlanChargeType.  # noqa: E501
        :type: list[GETProductDiscountApplyDetailsType]
        """

        self._product_discount_apply_details = product_discount_apply_details

    @property
    def rating_group(self):
        """Gets the rating_group of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies a rating group based on which usage records are rated.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have [Active Rating](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/H_Active_Rating) feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :return: The rating_group of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this GETProductRatePlanChargeType.

        Specifies a rating group based on which usage records are rated.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have [Active Rating](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/H_Active_Rating) feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :param rating_group: The rating_group of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._rating_group = rating_group

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this GETProductRatePlanChargeType.  # noqa: E501

        Associates this product rate plan charge with a specific revenue recognition code. The value is a valid revenue recognition code.   # noqa: E501

        :return: The rev_rec_code of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this GETProductRatePlanChargeType.

        Associates this product rate plan charge with a specific revenue recognition code. The value is a valid revenue recognition code.   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        if rev_rec_code is not None and len(rev_rec_code) > 70:
            raise ValueError("Invalid value for `rev_rec_code`, length must be less than or equal to `70`")  # noqa: E501

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies when revenue recognition begins.   # noqa: E501

        :return: The rev_rec_trigger_condition of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this GETProductRatePlanChargeType.

        Specifies when revenue recognition begins.   # noqa: E501

        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """
        allowed_values = ["ContractEffectiveDate", "ServiceActivationDate", "CustomerAcceptanceDate"]  # noqa: E501
        if rev_rec_trigger_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `rev_rec_trigger_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(rev_rec_trigger_condition, allowed_values)
            )

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this GETProductRatePlanChargeType.  # noqa: E501

        The name of the revenue recognition rule governing the revenue schedule.   # noqa: E501

        :return: The revenue_recognition_rule_name of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this GETProductRatePlanChargeType.

        The name of the revenue recognition rule governing the revenue schedule.   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def smoothing_model(self):
        """Gets the smoothing_model of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the smoothing model for an overage smoothing charge model or an tiered with overage model, which is an advanced type of a usage model that avoids spikes in usage charges. If a customer's usage spikes in a single period, then an overage smoothing model eases overage charges by considering usage and multiple periods.  One of the following values shows which smoothing model will be applied to the charge when `Overage` or `Tiered with Overage` is used:  - `RollingWindow` considers a number of periods to smooth usage. The rolling window starts and increments forward based on billing frequency. When allowed usage is met, then period resets and a new window begins. - `Rollover` considers a fixed number of periods before calculating usage. The net balance at the end of a period is unused usage, which is carried over to the next period's balance.   # noqa: E501

        :return: The smoothing_model of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._smoothing_model

    @smoothing_model.setter
    def smoothing_model(self, smoothing_model):
        """Sets the smoothing_model of this GETProductRatePlanChargeType.

        Specifies the smoothing model for an overage smoothing charge model or an tiered with overage model, which is an advanced type of a usage model that avoids spikes in usage charges. If a customer's usage spikes in a single period, then an overage smoothing model eases overage charges by considering usage and multiple periods.  One of the following values shows which smoothing model will be applied to the charge when `Overage` or `Tiered with Overage` is used:  - `RollingWindow` considers a number of periods to smooth usage. The rolling window starts and increments forward based on billing frequency. When allowed usage is met, then period resets and a new window begins. - `Rollover` considers a fixed number of periods before calculating usage. The net balance at the end of a period is unused usage, which is carried over to the next period's balance.   # noqa: E501

        :param smoothing_model: The smoothing_model of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._smoothing_model = smoothing_model

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this GETProductRatePlanChargeType.  # noqa: E501

        When the billing period is set to `Specific` Months then this positive integer reflects the number of months for billing period charges.   # noqa: E501

        :return: The specific_billing_period of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this GETProductRatePlanChargeType.

        When the billing period is set to `Specific` Months then this positive integer reflects the number of months for billing period charges.   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this GETProductRatePlanChargeType.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def tax_code(self):
        """Gets the tax_code of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the tax code for taxation rules; used by Zuora Tax.   # noqa: E501

        :return: The tax_code of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this GETProductRatePlanChargeType.

        Specifies the tax code for taxation rules; used by Zuora Tax.   # noqa: E501

        :param tax_code: The tax_code of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies how to define taxation for the charge; used by Zuora Tax. Possible values are: `TaxExclusive`, `TaxInclusive`.   # noqa: E501

        :return: The tax_mode of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this GETProductRatePlanChargeType.

        Specifies how to define taxation for the charge; used by Zuora Tax. Possible values are: `TaxExclusive`, `TaxInclusive`.   # noqa: E501

        :param tax_mode: The tax_mode of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._tax_mode = tax_mode

    @property
    def taxable(self):
        """Gets the taxable of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies whether the charge is taxable; used by Zuora Tax. Possible values are:`true`, `false`.   # noqa: E501

        :return: The taxable of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this GETProductRatePlanChargeType.

        Specifies whether the charge is taxable; used by Zuora Tax. Possible values are:`true`, `false`.   # noqa: E501

        :param taxable: The taxable of this GETProductRatePlanChargeType.  # noqa: E501
        :type: bool
        """

        self._taxable = taxable

    @property
    def trigger_event(self):
        """Gets the trigger_event of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies when to start billing the customer for the charge.  Values: one of the following: - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.  - `SpecificDate` is the date specified.   # noqa: E501

        :return: The trigger_event of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this GETProductRatePlanChargeType.

        Specifies when to start billing the customer for the charge.  Values: one of the following: - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.  - `SpecificDate` is the date specified.   # noqa: E501

        :param trigger_event: The trigger_event of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._trigger_event = trigger_event

    @property
    def type(self):
        """Gets the type of this GETProductRatePlanChargeType.  # noqa: E501

        The type of charge. Possible values are: `OneTime`, `Recurring`, `Usage`.   # noqa: E501

        :return: The type of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GETProductRatePlanChargeType.

        The type of charge. Possible values are: `OneTime`, `Recurring`, `Usage`.   # noqa: E501

        :param type: The type of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uom(self):
        """Gets the uom of this GETProductRatePlanChargeType.  # noqa: E501

        Describes the Units of Measure (uom) configured in **Settings > Billing** for the productRatePlanCharges.  Values: `Each`, `License`, `Seat`, or `null`   # noqa: E501

        :return: The uom of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this GETProductRatePlanChargeType.

        Describes the Units of Measure (uom) configured in **Settings > Billing** for the productRatePlanCharges.  Values: `Each`, `License`, `Seat`, or `null`   # noqa: E501

        :param uom: The uom of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this GETProductRatePlanChargeType.  # noqa: E501

        Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends. If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :return: The up_to_periods of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this GETProductRatePlanChargeType.

        Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends. If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :param up_to_periods: The up_to_periods of this GETProductRatePlanChargeType.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this GETProductRatePlanChargeType.  # noqa: E501

        The period type used to define when the charge ends.  Values: - Billing_Periods - Days - Weeks - Months - Years      # noqa: E501

        :return: The up_to_periods_type of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this GETProductRatePlanChargeType.

        The period type used to define when the charge ends.  Values: - Billing_Periods - Days - Weeks - Months - Years      # noqa: E501

        :param up_to_periods_type: The up_to_periods_type of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def usage_record_rating_option(self):
        """Gets the usage_record_rating_option of this GETProductRatePlanChargeType.  # noqa: E501

        Determines how Zuora processes usage records for per-unit usage charges.    # noqa: E501

        :return: The usage_record_rating_option of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: str
        """
        return self._usage_record_rating_option

    @usage_record_rating_option.setter
    def usage_record_rating_option(self, usage_record_rating_option):
        """Sets the usage_record_rating_option of this GETProductRatePlanChargeType.

        Determines how Zuora processes usage records for per-unit usage charges.    # noqa: E501

        :param usage_record_rating_option: The usage_record_rating_option of this GETProductRatePlanChargeType.  # noqa: E501
        :type: str
        """

        self._usage_record_rating_option = usage_record_rating_option

    @property
    def use_discount_specific_accounting_code(self):
        """Gets the use_discount_specific_accounting_code of this GETProductRatePlanChargeType.  # noqa: E501

        Determines whether to define a new accounting code for the new discount charge. Values: `true`, `false`   # noqa: E501

        :return: The use_discount_specific_accounting_code of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: bool
        """
        return self._use_discount_specific_accounting_code

    @use_discount_specific_accounting_code.setter
    def use_discount_specific_accounting_code(self, use_discount_specific_accounting_code):
        """Sets the use_discount_specific_accounting_code of this GETProductRatePlanChargeType.

        Determines whether to define a new accounting code for the new discount charge. Values: `true`, `false`   # noqa: E501

        :param use_discount_specific_accounting_code: The use_discount_specific_accounting_code of this GETProductRatePlanChargeType.  # noqa: E501
        :type: bool
        """

        self._use_discount_specific_accounting_code = use_discount_specific_accounting_code

    @property
    def use_tenant_default_for_price_change(self):
        """Gets the use_tenant_default_for_price_change of this GETProductRatePlanChargeType.  # noqa: E501

        Shows the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. You set the tenant uplift value in the web-based UI: **Settings > Billing > Define Default Subscription Settings**.  Values: `true`, `false`   # noqa: E501

        :return: The use_tenant_default_for_price_change of this GETProductRatePlanChargeType.  # noqa: E501
        :rtype: bool
        """
        return self._use_tenant_default_for_price_change

    @use_tenant_default_for_price_change.setter
    def use_tenant_default_for_price_change(self, use_tenant_default_for_price_change):
        """Sets the use_tenant_default_for_price_change of this GETProductRatePlanChargeType.

        Shows the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. You set the tenant uplift value in the web-based UI: **Settings > Billing > Define Default Subscription Settings**.  Values: `true`, `false`   # noqa: E501

        :param use_tenant_default_for_price_change: The use_tenant_default_for_price_change of this GETProductRatePlanChargeType.  # noqa: E501
        :type: bool
        """

        self._use_tenant_default_for_price_change = use_tenant_default_for_price_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETProductRatePlanChargeType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETProductRatePlanChargeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
