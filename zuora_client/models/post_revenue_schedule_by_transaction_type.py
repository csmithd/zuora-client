# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.post_distribution_item_type import POSTDistributionItemType  # noqa: F401,E501
from zuora_client.models.post_revenue_schedule_by_transaction_type_revenue_event import POSTRevenueScheduleByTransactionTypeRevenueEvent  # noqa: F401,E501
from zuora_client.models.revenue_schedule_object_custom_fields import RevenueScheduleObjectCustomFields  # noqa: F401,E501


class POSTRevenueScheduleByTransactionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'revenue_distributions': 'list[POSTDistributionItemType]',
        'revenue_event': 'POSTRevenueScheduleByTransactionTypeRevenueEvent'
    }

    attribute_map = {
        'notes': 'notes',
        'revenue_distributions': 'revenueDistributions',
        'revenue_event': 'revenueEvent'
    }

    def __init__(self, notes=None, revenue_distributions=None, revenue_event=None):  # noqa: E501
        """POSTRevenueScheduleByTransactionType - a model defined in Swagger"""  # noqa: E501

        self._notes = None
        self._revenue_distributions = None
        self._revenue_event = None
        self.discriminator = None

        if notes is not None:
            self.notes = notes
        if revenue_distributions is not None:
            self.revenue_distributions = revenue_distributions
        if revenue_event is not None:
            self.revenue_event = revenue_event

    @property
    def notes(self):
        """Gets the notes of this POSTRevenueScheduleByTransactionType.  # noqa: E501

        Additional information about this record.  Character Limit: 2,000   # noqa: E501

        :return: The notes of this POSTRevenueScheduleByTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this POSTRevenueScheduleByTransactionType.

        Additional information about this record.  Character Limit: 2,000   # noqa: E501

        :param notes: The notes of this POSTRevenueScheduleByTransactionType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def revenue_distributions(self):
        """Gets the revenue_distributions of this POSTRevenueScheduleByTransactionType.  # noqa: E501

        An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.  The sum of new Amounts must equal the the Charge Amount of the specified Invoice Item.   # noqa: E501

        :return: The revenue_distributions of this POSTRevenueScheduleByTransactionType.  # noqa: E501
        :rtype: list[POSTDistributionItemType]
        """
        return self._revenue_distributions

    @revenue_distributions.setter
    def revenue_distributions(self, revenue_distributions):
        """Sets the revenue_distributions of this POSTRevenueScheduleByTransactionType.

        An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.  The sum of new Amounts must equal the the Charge Amount of the specified Invoice Item.   # noqa: E501

        :param revenue_distributions: The revenue_distributions of this POSTRevenueScheduleByTransactionType.  # noqa: E501
        :type: list[POSTDistributionItemType]
        """

        self._revenue_distributions = revenue_distributions

    @property
    def revenue_event(self):
        """Gets the revenue_event of this POSTRevenueScheduleByTransactionType.  # noqa: E501


        :return: The revenue_event of this POSTRevenueScheduleByTransactionType.  # noqa: E501
        :rtype: POSTRevenueScheduleByTransactionTypeRevenueEvent
        """
        return self._revenue_event

    @revenue_event.setter
    def revenue_event(self, revenue_event):
        """Sets the revenue_event of this POSTRevenueScheduleByTransactionType.


        :param revenue_event: The revenue_event of this POSTRevenueScheduleByTransactionType.  # noqa: E501
        :type: POSTRevenueScheduleByTransactionTypeRevenueEvent
        """

        self._revenue_event = revenue_event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTRevenueScheduleByTransactionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTRevenueScheduleByTransactionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
