# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.post_non_ref_refund_type_finance_information import PostNonRefRefundTypeFinanceInformation  # noqa: F401,E501
from zuora_client.models.refund_credit_memo_item_type import RefundCreditMemoItemType  # noqa: F401,E501
from zuora_client.models.refund_object_custom_fields import RefundObjectCustomFields  # noqa: F401,E501
from zuora_client.models.refund_object_ns_fields import RefundObjectNSFields  # noqa: F401,E501


class PostNonRefRefundType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'str',
        'comment': 'str',
        'finance_information': 'PostNonRefRefundTypeFinanceInformation',
        'gateway_id': 'str',
        'items': 'list[RefundCreditMemoItemType]',
        'method_type': 'str',
        'payment_method_id': 'str',
        'reason_code': 'str',
        'reference_id': 'str',
        'refund_date': 'date',
        'second_refund_reference_id': 'str',
        'total_amount': 'float',
        'type': 'str'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS',
        'comment': 'comment',
        'finance_information': 'financeInformation',
        'gateway_id': 'gatewayId',
        'items': 'items',
        'method_type': 'methodType',
        'payment_method_id': 'paymentMethodId',
        'reason_code': 'reasonCode',
        'reference_id': 'referenceId',
        'refund_date': 'refundDate',
        'second_refund_reference_id': 'secondRefundReferenceId',
        'total_amount': 'totalAmount',
        'type': 'type'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, syncto_net_suite__ns=None, comment=None, finance_information=None, gateway_id=None, items=None, method_type=None, payment_method_id=None, reason_code=None, reference_id=None, refund_date=None, second_refund_reference_id=None, total_amount=None, type=None):  # noqa: E501
        """PostNonRefRefundType - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self._comment = None
        self._finance_information = None
        self._gateway_id = None
        self._items = None
        self._method_type = None
        self._payment_method_id = None
        self._reason_code = None
        self._reference_id = None
        self._refund_date = None
        self._second_refund_reference_id = None
        self._total_amount = None
        self._type = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns
        if comment is not None:
            self.comment = comment
        if finance_information is not None:
            self.finance_information = finance_information
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if items is not None:
            self.items = items
        if method_type is not None:
            self.method_type = method_type
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if reason_code is not None:
            self.reason_code = reason_code
        if reference_id is not None:
            self.reference_id = reference_id
        if refund_date is not None:
            self.refund_date = refund_date
        if second_refund_reference_id is not None:
            self.second_refund_reference_id = second_refund_reference_id
        self.total_amount = total_amount
        self.type = type

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this PostNonRefRefundType.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this PostNonRefRefundType.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this PostNonRefRefundType.  # noqa: E501

        Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this PostNonRefRefundType.

        Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this PostNonRefRefundType.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this PostNonRefRefundType.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if origin__ns is not None and len(origin__ns) > 255:
            raise ValueError("Invalid value for `origin__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this PostNonRefRefundType.  # noqa: E501

        Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this PostNonRefRefundType.

        Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this PostNonRefRefundType.  # noqa: E501

        Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The syncto_net_suite__ns of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this PostNonRefRefundType.

        Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param syncto_net_suite__ns: The syncto_net_suite__ns of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if syncto_net_suite__ns is not None and len(syncto_net_suite__ns) > 255:
            raise ValueError("Invalid value for `syncto_net_suite__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def comment(self):
        """Gets the comment of this PostNonRefRefundType.  # noqa: E501

        Comments about the refund.   # noqa: E501

        :return: The comment of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PostNonRefRefundType.

        Comments about the refund.   # noqa: E501

        :param comment: The comment of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 255:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `255`")  # noqa: E501
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def finance_information(self):
        """Gets the finance_information of this PostNonRefRefundType.  # noqa: E501


        :return: The finance_information of this PostNonRefRefundType.  # noqa: E501
        :rtype: PostNonRefRefundTypeFinanceInformation
        """
        return self._finance_information

    @finance_information.setter
    def finance_information(self, finance_information):
        """Sets the finance_information of this PostNonRefRefundType.


        :param finance_information: The finance_information of this PostNonRefRefundType.  # noqa: E501
        :type: PostNonRefRefundTypeFinanceInformation
        """

        self._finance_information = finance_information

    @property
    def gateway_id(self):
        """Gets the gateway_id of this PostNonRefRefundType.  # noqa: E501

        The ID of the gateway instance that processes the refund. This field can be specified only for electronic refunds. The ID must be a valid gateway instance ID, and this gateway must support the specific payment method.   If no gateway ID is specified, the default gateway in the billing account configuration will be used. If no gateway is specified in the billing account, the default gateway of the corresponding tenant will be used.   # noqa: E501

        :return: The gateway_id of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this PostNonRefRefundType.

        The ID of the gateway instance that processes the refund. This field can be specified only for electronic refunds. The ID must be a valid gateway instance ID, and this gateway must support the specific payment method.   If no gateway ID is specified, the default gateway in the billing account configuration will be used. If no gateway is specified in the billing account, the default gateway of the corresponding tenant will be used.   # noqa: E501

        :param gateway_id: The gateway_id of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def items(self):
        """Gets the items of this PostNonRefRefundType.  # noqa: E501

        Container for credit memo items.  **Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :return: The items of this PostNonRefRefundType.  # noqa: E501
        :rtype: list[RefundCreditMemoItemType]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PostNonRefRefundType.

        Container for credit memo items.  **Note:** The Invoice Item Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :param items: The items of this PostNonRefRefundType.  # noqa: E501
        :type: list[RefundCreditMemoItemType]
        """

        self._items = items

    @property
    def method_type(self):
        """Gets the method_type of this PostNonRefRefundType.  # noqa: E501

        How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on a credit memo.   # noqa: E501

        :return: The method_type of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._method_type

    @method_type.setter
    def method_type(self, method_type):
        """Sets the method_type of this PostNonRefRefundType.

        How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on a credit memo.   # noqa: E501

        :param method_type: The method_type of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACH", "Cash", "Check", "CreditCard", "PayPal", "WireTransfer", "DebitCard", "CreditCardReferenceTransaction", "BankTransfer", "Other"]  # noqa: E501
        if method_type not in allowed_values:
            raise ValueError(
                "Invalid value for `method_type` ({0}), must be one of {1}"  # noqa: E501
                .format(method_type, allowed_values)
            )

        self._method_type = method_type

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this PostNonRefRefundType.  # noqa: E501

        The ID of the payment method used for the refund. This field is required for an electronic refund, and the value must be an electronic payment method ID. This field must be left empty for an external refund.    # noqa: E501

        :return: The payment_method_id of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this PostNonRefRefundType.

        The ID of the payment method used for the refund. This field is required for an electronic refund, and the value must be an electronic payment method ID. This field must be left empty for an external refund.    # noqa: E501

        :param payment_method_id: The payment_method_id of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def reason_code(self):
        """Gets the reason_code of this PostNonRefRefundType.  # noqa: E501

        A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.   # noqa: E501

        :return: The reason_code of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this PostNonRefRefundType.

        A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.   # noqa: E501

        :param reason_code: The reason_code of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reference_id(self):
        """Gets the reference_id of this PostNonRefRefundType.  # noqa: E501

        The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.   # noqa: E501

        :return: The reference_id of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PostNonRefRefundType.

        The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.   # noqa: E501

        :param reference_id: The reference_id of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if reference_id is not None and len(reference_id) > 60:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `60`")  # noqa: E501
        if reference_id is not None and len(reference_id) < 0:
            raise ValueError("Invalid value for `reference_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def refund_date(self):
        """Gets the refund_date of this PostNonRefRefundType.  # noqa: E501

        The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the credit memo date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.   # noqa: E501

        :return: The refund_date of this PostNonRefRefundType.  # noqa: E501
        :rtype: date
        """
        return self._refund_date

    @refund_date.setter
    def refund_date(self, refund_date):
        """Sets the refund_date of this PostNonRefRefundType.

        The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the credit memo date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.   # noqa: E501

        :param refund_date: The refund_date of this PostNonRefRefundType.  # noqa: E501
        :type: date
        """

        self._refund_date = refund_date

    @property
    def second_refund_reference_id(self):
        """Gets the second_refund_reference_id of this PostNonRefRefundType.  # noqa: E501

        The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :return: The second_refund_reference_id of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._second_refund_reference_id

    @second_refund_reference_id.setter
    def second_refund_reference_id(self, second_refund_reference_id):
        """Sets the second_refund_reference_id of this PostNonRefRefundType.

        The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :param second_refund_reference_id: The second_refund_reference_id of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if second_refund_reference_id is not None and len(second_refund_reference_id) > 60:
            raise ValueError("Invalid value for `second_refund_reference_id`, length must be less than or equal to `60`")  # noqa: E501
        if second_refund_reference_id is not None and len(second_refund_reference_id) < 0:
            raise ValueError("Invalid value for `second_refund_reference_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._second_refund_reference_id = second_refund_reference_id

    @property
    def total_amount(self):
        """Gets the total_amount of this PostNonRefRefundType.  # noqa: E501

        The total amount of the refund. The amount cannot exceed the unapplied amount of the associated credit memo. If the original credit memo was applied to one or more invoices or debit memos, you have to unapply a full or partial credit memo from the invoices or debit memos, and then refund the full or partial unapplied credit memo to your customers.   # noqa: E501

        :return: The total_amount of this PostNonRefRefundType.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PostNonRefRefundType.

        The total amount of the refund. The amount cannot exceed the unapplied amount of the associated credit memo. If the original credit memo was applied to one or more invoices or debit memos, you have to unapply a full or partial credit memo from the invoices or debit memos, and then refund the full or partial unapplied credit memo to your customers.   # noqa: E501

        :param total_amount: The total_amount of this PostNonRefRefundType.  # noqa: E501
        :type: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def type(self):
        """Gets the type of this PostNonRefRefundType.  # noqa: E501

        The type of the refund.   # noqa: E501

        :return: The type of this PostNonRefRefundType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostNonRefRefundType.

        The type of the refund.   # noqa: E501

        :param type: The type of this PostNonRefRefundType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["External", "Electronic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostNonRefRefundType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostNonRefRefundType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
