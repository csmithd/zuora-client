# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_subscription_rate_plan_type import GETSubscriptionRatePlanType  # noqa: F401,E501
from zuora_client.models.subscription_object_custom_fields import SubscriptionObjectCustomFields  # noqa: F401,E501
from zuora_client.models.subscription_object_ns_fields import SubscriptionObjectNSFields  # noqa: F401,E501
from zuora_client.models.subscription_object_qt_fields import SubscriptionObjectQTFields  # noqa: F401,E501


class GETSubscriptionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpq_bundle_json_id__qt': 'str',
        'opportunity_close_date__qt': 'date',
        'opportunity_name__qt': 'str',
        'quote_business_type__qt': 'str',
        'quote_number__qt': 'str',
        'quote_type__qt': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'project__ns': 'str',
        'sales_order__ns': 'str',
        'sync_date__ns': 'str',
        'account_id': 'str',
        'account_name': 'str',
        'account_number': 'str',
        'auto_renew': 'bool',
        'contract_effective_date': 'date',
        'contracted_mrr': 'str',
        'current_term': 'int',
        'current_term_period_type': 'str',
        'customer_acceptance_date': 'date',
        'id': 'str',
        'initial_term': 'int',
        'initial_term_period_type': 'str',
        'invoice_owner_account_id': 'str',
        'invoice_owner_account_name': 'str',
        'invoice_owner_account_number': 'str',
        'invoice_separately': 'str',
        'notes': 'str',
        'order_number': 'str',
        'rate_plans': 'list[GETSubscriptionRatePlanType]',
        'renewal_setting': 'str',
        'renewal_term': 'int',
        'renewal_term_period_type': 'str',
        'service_activation_date': 'date',
        'status': 'str',
        'subscription_number': 'str',
        'subscription_start_date': 'date',
        'term_end_date': 'date',
        'term_start_date': 'date',
        'term_type': 'str',
        'total_contracted_value': 'str'
    }

    attribute_map = {
        'cpq_bundle_json_id__qt': 'CpqBundleJsonId__QT',
        'opportunity_close_date__qt': 'OpportunityCloseDate__QT',
        'opportunity_name__qt': 'OpportunityName__QT',
        'quote_business_type__qt': 'QuoteBusinessType__QT',
        'quote_number__qt': 'QuoteNumber__QT',
        'quote_type__qt': 'QuoteType__QT',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'project__ns': 'Project__NS',
        'sales_order__ns': 'SalesOrder__NS',
        'sync_date__ns': 'SyncDate__NS',
        'account_id': 'accountId',
        'account_name': 'accountName',
        'account_number': 'accountNumber',
        'auto_renew': 'autoRenew',
        'contract_effective_date': 'contractEffectiveDate',
        'contracted_mrr': 'contractedMrr',
        'current_term': 'currentTerm',
        'current_term_period_type': 'currentTermPeriodType',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'id': 'id',
        'initial_term': 'initialTerm',
        'initial_term_period_type': 'initialTermPeriodType',
        'invoice_owner_account_id': 'invoiceOwnerAccountId',
        'invoice_owner_account_name': 'invoiceOwnerAccountName',
        'invoice_owner_account_number': 'invoiceOwnerAccountNumber',
        'invoice_separately': 'invoiceSeparately',
        'notes': 'notes',
        'order_number': 'orderNumber',
        'rate_plans': 'ratePlans',
        'renewal_setting': 'renewalSetting',
        'renewal_term': 'renewalTerm',
        'renewal_term_period_type': 'renewalTermPeriodType',
        'service_activation_date': 'serviceActivationDate',
        'status': 'status',
        'subscription_number': 'subscriptionNumber',
        'subscription_start_date': 'subscriptionStartDate',
        'term_end_date': 'termEndDate',
        'term_start_date': 'termStartDate',
        'term_type': 'termType',
        'total_contracted_value': 'totalContractedValue'
    }

    def __init__(self, cpq_bundle_json_id__qt=None, opportunity_close_date__qt=None, opportunity_name__qt=None, quote_business_type__qt=None, quote_number__qt=None, quote_type__qt=None, integration_id__ns=None, integration_status__ns=None, project__ns=None, sales_order__ns=None, sync_date__ns=None, account_id=None, account_name=None, account_number=None, auto_renew=None, contract_effective_date=None, contracted_mrr=None, current_term=None, current_term_period_type=None, customer_acceptance_date=None, id=None, initial_term=None, initial_term_period_type=None, invoice_owner_account_id=None, invoice_owner_account_name=None, invoice_owner_account_number=None, invoice_separately=None, notes=None, order_number=None, rate_plans=None, renewal_setting=None, renewal_term=None, renewal_term_period_type=None, service_activation_date=None, status=None, subscription_number=None, subscription_start_date=None, term_end_date=None, term_start_date=None, term_type=None, total_contracted_value=None):  # noqa: E501
        """GETSubscriptionType - a model defined in Swagger"""  # noqa: E501

        self._cpq_bundle_json_id__qt = None
        self._opportunity_close_date__qt = None
        self._opportunity_name__qt = None
        self._quote_business_type__qt = None
        self._quote_number__qt = None
        self._quote_type__qt = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._project__ns = None
        self._sales_order__ns = None
        self._sync_date__ns = None
        self._account_id = None
        self._account_name = None
        self._account_number = None
        self._auto_renew = None
        self._contract_effective_date = None
        self._contracted_mrr = None
        self._current_term = None
        self._current_term_period_type = None
        self._customer_acceptance_date = None
        self._id = None
        self._initial_term = None
        self._initial_term_period_type = None
        self._invoice_owner_account_id = None
        self._invoice_owner_account_name = None
        self._invoice_owner_account_number = None
        self._invoice_separately = None
        self._notes = None
        self._order_number = None
        self._rate_plans = None
        self._renewal_setting = None
        self._renewal_term = None
        self._renewal_term_period_type = None
        self._service_activation_date = None
        self._status = None
        self._subscription_number = None
        self._subscription_start_date = None
        self._term_end_date = None
        self._term_start_date = None
        self._term_type = None
        self._total_contracted_value = None
        self.discriminator = None

        if cpq_bundle_json_id__qt is not None:
            self.cpq_bundle_json_id__qt = cpq_bundle_json_id__qt
        if opportunity_close_date__qt is not None:
            self.opportunity_close_date__qt = opportunity_close_date__qt
        if opportunity_name__qt is not None:
            self.opportunity_name__qt = opportunity_name__qt
        if quote_business_type__qt is not None:
            self.quote_business_type__qt = quote_business_type__qt
        if quote_number__qt is not None:
            self.quote_number__qt = quote_number__qt
        if quote_type__qt is not None:
            self.quote_type__qt = quote_type__qt
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if project__ns is not None:
            self.project__ns = project__ns
        if sales_order__ns is not None:
            self.sales_order__ns = sales_order__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if account_number is not None:
            self.account_number = account_number
        if auto_renew is not None:
            self.auto_renew = auto_renew
        if contract_effective_date is not None:
            self.contract_effective_date = contract_effective_date
        if contracted_mrr is not None:
            self.contracted_mrr = contracted_mrr
        if current_term is not None:
            self.current_term = current_term
        if current_term_period_type is not None:
            self.current_term_period_type = current_term_period_type
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        if id is not None:
            self.id = id
        if initial_term is not None:
            self.initial_term = initial_term
        if initial_term_period_type is not None:
            self.initial_term_period_type = initial_term_period_type
        if invoice_owner_account_id is not None:
            self.invoice_owner_account_id = invoice_owner_account_id
        if invoice_owner_account_name is not None:
            self.invoice_owner_account_name = invoice_owner_account_name
        if invoice_owner_account_number is not None:
            self.invoice_owner_account_number = invoice_owner_account_number
        if invoice_separately is not None:
            self.invoice_separately = invoice_separately
        if notes is not None:
            self.notes = notes
        if order_number is not None:
            self.order_number = order_number
        if rate_plans is not None:
            self.rate_plans = rate_plans
        if renewal_setting is not None:
            self.renewal_setting = renewal_setting
        if renewal_term is not None:
            self.renewal_term = renewal_term
        if renewal_term_period_type is not None:
            self.renewal_term_period_type = renewal_term_period_type
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        if status is not None:
            self.status = status
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if subscription_start_date is not None:
            self.subscription_start_date = subscription_start_date
        if term_end_date is not None:
            self.term_end_date = term_end_date
        if term_start_date is not None:
            self.term_start_date = term_start_date
        if term_type is not None:
            self.term_type = term_type
        if total_contracted_value is not None:
            self.total_contracted_value = total_contracted_value

    @property
    def cpq_bundle_json_id__qt(self):
        """Gets the cpq_bundle_json_id__qt of this GETSubscriptionType.  # noqa: E501

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :return: The cpq_bundle_json_id__qt of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._cpq_bundle_json_id__qt

    @cpq_bundle_json_id__qt.setter
    def cpq_bundle_json_id__qt(self, cpq_bundle_json_id__qt):
        """Sets the cpq_bundle_json_id__qt of this GETSubscriptionType.

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :param cpq_bundle_json_id__qt: The cpq_bundle_json_id__qt of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if cpq_bundle_json_id__qt is not None and len(cpq_bundle_json_id__qt) > 32:
            raise ValueError("Invalid value for `cpq_bundle_json_id__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._cpq_bundle_json_id__qt = cpq_bundle_json_id__qt

    @property
    def opportunity_close_date__qt(self):
        """Gets the opportunity_close_date__qt of this GETSubscriptionType.  # noqa: E501

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_close_date__qt of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._opportunity_close_date__qt

    @opportunity_close_date__qt.setter
    def opportunity_close_date__qt(self, opportunity_close_date__qt):
        """Sets the opportunity_close_date__qt of this GETSubscriptionType.

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_close_date__qt: The opportunity_close_date__qt of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._opportunity_close_date__qt = opportunity_close_date__qt

    @property
    def opportunity_name__qt(self):
        """Gets the opportunity_name__qt of this GETSubscriptionType.  # noqa: E501

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_name__qt of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._opportunity_name__qt

    @opportunity_name__qt.setter
    def opportunity_name__qt(self, opportunity_name__qt):
        """Sets the opportunity_name__qt of this GETSubscriptionType.

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_name__qt: The opportunity_name__qt of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if opportunity_name__qt is not None and len(opportunity_name__qt) > 100:
            raise ValueError("Invalid value for `opportunity_name__qt`, length must be less than or equal to `100`")  # noqa: E501

        self._opportunity_name__qt = opportunity_name__qt

    @property
    def quote_business_type__qt(self):
        """Gets the quote_business_type__qt of this GETSubscriptionType.  # noqa: E501

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_business_type__qt of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._quote_business_type__qt

    @quote_business_type__qt.setter
    def quote_business_type__qt(self, quote_business_type__qt):
        """Sets the quote_business_type__qt of this GETSubscriptionType.

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_business_type__qt: The quote_business_type__qt of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if quote_business_type__qt is not None and len(quote_business_type__qt) > 32:
            raise ValueError("Invalid value for `quote_business_type__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._quote_business_type__qt = quote_business_type__qt

    @property
    def quote_number__qt(self):
        """Gets the quote_number__qt of this GETSubscriptionType.  # noqa: E501

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_number__qt of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._quote_number__qt

    @quote_number__qt.setter
    def quote_number__qt(self, quote_number__qt):
        """Sets the quote_number__qt of this GETSubscriptionType.

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_number__qt: The quote_number__qt of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if quote_number__qt is not None and len(quote_number__qt) > 32:
            raise ValueError("Invalid value for `quote_number__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._quote_number__qt = quote_number__qt

    @property
    def quote_type__qt(self):
        """Gets the quote_type__qt of this GETSubscriptionType.  # noqa: E501

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_type__qt of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._quote_type__qt

    @quote_type__qt.setter
    def quote_type__qt(self, quote_type__qt):
        """Sets the quote_type__qt of this GETSubscriptionType.

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_type__qt: The quote_type__qt of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if quote_type__qt is not None and len(quote_type__qt) > 32:
            raise ValueError("Invalid value for `quote_type__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._quote_type__qt = quote_type__qt

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this GETSubscriptionType.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this GETSubscriptionType.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this GETSubscriptionType.  # noqa: E501

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this GETSubscriptionType.

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def project__ns(self):
        """Gets the project__ns of this GETSubscriptionType.  # noqa: E501

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The project__ns of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._project__ns

    @project__ns.setter
    def project__ns(self, project__ns):
        """Sets the project__ns of this GETSubscriptionType.

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param project__ns: The project__ns of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if project__ns is not None and len(project__ns) > 255:
            raise ValueError("Invalid value for `project__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._project__ns = project__ns

    @property
    def sales_order__ns(self):
        """Gets the sales_order__ns of this GETSubscriptionType.  # noqa: E501

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sales_order__ns of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._sales_order__ns

    @sales_order__ns.setter
    def sales_order__ns(self, sales_order__ns):
        """Sets the sales_order__ns of this GETSubscriptionType.

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sales_order__ns: The sales_order__ns of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if sales_order__ns is not None and len(sales_order__ns) > 255:
            raise ValueError("Invalid value for `sales_order__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sales_order__ns = sales_order__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this GETSubscriptionType.  # noqa: E501

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this GETSubscriptionType.

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this GETSubscriptionType.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def account_id(self):
        """Gets the account_id of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The account_id of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GETSubscriptionType.

          # noqa: E501

        :param account_id: The account_id of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The account_name of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this GETSubscriptionType.

          # noqa: E501

        :param account_name: The account_name of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The account_number of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GETSubscriptionType.

          # noqa: E501

        :param account_number: The account_number of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def auto_renew(self):
        """Gets the auto_renew of this GETSubscriptionType.  # noqa: E501

        If `true`, the subscription automatically renews at the end of the term. Default is `false`.   # noqa: E501

        :return: The auto_renew of this GETSubscriptionType.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this GETSubscriptionType.

        If `true`, the subscription automatically renews at the end of the term. Default is `false`.   # noqa: E501

        :param auto_renew: The auto_renew of this GETSubscriptionType.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this GETSubscriptionType.  # noqa: E501

        Effective contract date for this subscription, as yyyy-mm-dd.   # noqa: E501

        :return: The contract_effective_date of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this GETSubscriptionType.

        Effective contract date for this subscription, as yyyy-mm-dd.   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._contract_effective_date = contract_effective_date

    @property
    def contracted_mrr(self):
        """Gets the contracted_mrr of this GETSubscriptionType.  # noqa: E501

        Monthly recurring revenue of the subscription.   # noqa: E501

        :return: The contracted_mrr of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._contracted_mrr

    @contracted_mrr.setter
    def contracted_mrr(self, contracted_mrr):
        """Sets the contracted_mrr of this GETSubscriptionType.

        Monthly recurring revenue of the subscription.   # noqa: E501

        :param contracted_mrr: The contracted_mrr of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._contracted_mrr = contracted_mrr

    @property
    def current_term(self):
        """Gets the current_term of this GETSubscriptionType.  # noqa: E501

        The length of the period for the current subscription term.   # noqa: E501

        :return: The current_term of this GETSubscriptionType.  # noqa: E501
        :rtype: int
        """
        return self._current_term

    @current_term.setter
    def current_term(self, current_term):
        """Sets the current_term of this GETSubscriptionType.

        The length of the period for the current subscription term.   # noqa: E501

        :param current_term: The current_term of this GETSubscriptionType.  # noqa: E501
        :type: int
        """

        self._current_term = current_term

    @property
    def current_term_period_type(self):
        """Gets the current_term_period_type of this GETSubscriptionType.  # noqa: E501

        The period type for the current subscription term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :return: The current_term_period_type of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._current_term_period_type

    @current_term_period_type.setter
    def current_term_period_type(self, current_term_period_type):
        """Sets the current_term_period_type of this GETSubscriptionType.

        The period type for the current subscription term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :param current_term_period_type: The current_term_period_type of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._current_term_period_type = current_term_period_type

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this GETSubscriptionType.  # noqa: E501

        The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.   # noqa: E501

        :return: The customer_acceptance_date of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this GETSubscriptionType.

        The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def id(self):
        """Gets the id of this GETSubscriptionType.  # noqa: E501

        Subscription ID.   # noqa: E501

        :return: The id of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETSubscriptionType.

        Subscription ID.   # noqa: E501

        :param id: The id of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initial_term(self):
        """Gets the initial_term of this GETSubscriptionType.  # noqa: E501

        The length of the period for the first subscription term.   # noqa: E501

        :return: The initial_term of this GETSubscriptionType.  # noqa: E501
        :rtype: int
        """
        return self._initial_term

    @initial_term.setter
    def initial_term(self, initial_term):
        """Sets the initial_term of this GETSubscriptionType.

        The length of the period for the first subscription term.   # noqa: E501

        :param initial_term: The initial_term of this GETSubscriptionType.  # noqa: E501
        :type: int
        """

        self._initial_term = initial_term

    @property
    def initial_term_period_type(self):
        """Gets the initial_term_period_type of this GETSubscriptionType.  # noqa: E501

        The period type for the first subscription term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :return: The initial_term_period_type of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._initial_term_period_type

    @initial_term_period_type.setter
    def initial_term_period_type(self, initial_term_period_type):
        """Sets the initial_term_period_type of this GETSubscriptionType.

        The period type for the first subscription term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :param initial_term_period_type: The initial_term_period_type of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._initial_term_period_type = initial_term_period_type

    @property
    def invoice_owner_account_id(self):
        """Gets the invoice_owner_account_id of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The invoice_owner_account_id of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_id

    @invoice_owner_account_id.setter
    def invoice_owner_account_id(self, invoice_owner_account_id):
        """Sets the invoice_owner_account_id of this GETSubscriptionType.

          # noqa: E501

        :param invoice_owner_account_id: The invoice_owner_account_id of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_id = invoice_owner_account_id

    @property
    def invoice_owner_account_name(self):
        """Gets the invoice_owner_account_name of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The invoice_owner_account_name of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_name

    @invoice_owner_account_name.setter
    def invoice_owner_account_name(self, invoice_owner_account_name):
        """Sets the invoice_owner_account_name of this GETSubscriptionType.

          # noqa: E501

        :param invoice_owner_account_name: The invoice_owner_account_name of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_name = invoice_owner_account_name

    @property
    def invoice_owner_account_number(self):
        """Gets the invoice_owner_account_number of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The invoice_owner_account_number of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_number

    @invoice_owner_account_number.setter
    def invoice_owner_account_number(self, invoice_owner_account_number):
        """Sets the invoice_owner_account_number of this GETSubscriptionType.

          # noqa: E501

        :param invoice_owner_account_number: The invoice_owner_account_number of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_number = invoice_owner_account_number

    @property
    def invoice_separately(self):
        """Gets the invoice_separately of this GETSubscriptionType.  # noqa: E501

        Separates a single subscription from other subscriptions and creates an invoice for the subscription.   If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.   # noqa: E501

        :return: The invoice_separately of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._invoice_separately

    @invoice_separately.setter
    def invoice_separately(self, invoice_separately):
        """Sets the invoice_separately of this GETSubscriptionType.

        Separates a single subscription from other subscriptions and creates an invoice for the subscription.   If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.   # noqa: E501

        :param invoice_separately: The invoice_separately of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._invoice_separately = invoice_separately

    @property
    def notes(self):
        """Gets the notes of this GETSubscriptionType.  # noqa: E501

        A string of up to 65,535 characters.   # noqa: E501

        :return: The notes of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GETSubscriptionType.

        A string of up to 65,535 characters.   # noqa: E501

        :param notes: The notes of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def order_number(self):
        """Gets the order_number of this GETSubscriptionType.  # noqa: E501

        The order number of the order in which the changes on the subscription are made.   **Note:** This field is only available if you have the [Order Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Order_Metrics) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.   # noqa: E501

        :return: The order_number of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this GETSubscriptionType.

        The order number of the order in which the changes on the subscription are made.   **Note:** This field is only available if you have the [Order Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Order_Metrics) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.   # noqa: E501

        :param order_number: The order_number of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def rate_plans(self):
        """Gets the rate_plans of this GETSubscriptionType.  # noqa: E501

        Container for rate plans.   # noqa: E501

        :return: The rate_plans of this GETSubscriptionType.  # noqa: E501
        :rtype: list[GETSubscriptionRatePlanType]
        """
        return self._rate_plans

    @rate_plans.setter
    def rate_plans(self, rate_plans):
        """Sets the rate_plans of this GETSubscriptionType.

        Container for rate plans.   # noqa: E501

        :param rate_plans: The rate_plans of this GETSubscriptionType.  # noqa: E501
        :type: list[GETSubscriptionRatePlanType]
        """

        self._rate_plans = rate_plans

    @property
    def renewal_setting(self):
        """Gets the renewal_setting of this GETSubscriptionType.  # noqa: E501

        Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed.   Values are:  * `RENEW_WITH_SPECIFIC_TERM` (default) * `RENEW_TO_EVERGREEN`   # noqa: E501

        :return: The renewal_setting of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._renewal_setting

    @renewal_setting.setter
    def renewal_setting(self, renewal_setting):
        """Sets the renewal_setting of this GETSubscriptionType.

        Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed.   Values are:  * `RENEW_WITH_SPECIFIC_TERM` (default) * `RENEW_TO_EVERGREEN`   # noqa: E501

        :param renewal_setting: The renewal_setting of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._renewal_setting = renewal_setting

    @property
    def renewal_term(self):
        """Gets the renewal_term of this GETSubscriptionType.  # noqa: E501

        The length of the period for the subscription renewal term.   # noqa: E501

        :return: The renewal_term of this GETSubscriptionType.  # noqa: E501
        :rtype: int
        """
        return self._renewal_term

    @renewal_term.setter
    def renewal_term(self, renewal_term):
        """Sets the renewal_term of this GETSubscriptionType.

        The length of the period for the subscription renewal term.   # noqa: E501

        :param renewal_term: The renewal_term of this GETSubscriptionType.  # noqa: E501
        :type: int
        """

        self._renewal_term = renewal_term

    @property
    def renewal_term_period_type(self):
        """Gets the renewal_term_period_type of this GETSubscriptionType.  # noqa: E501

        The period type for the subscription renewal term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :return: The renewal_term_period_type of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._renewal_term_period_type

    @renewal_term_period_type.setter
    def renewal_term_period_type(self, renewal_term_period_type):
        """Sets the renewal_term_period_type of this GETSubscriptionType.

        The period type for the subscription renewal term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :param renewal_term_period_type: The renewal_term_period_type of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._renewal_term_period_type = renewal_term_period_type

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this GETSubscriptionType.  # noqa: E501

        The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd   # noqa: E501

        :return: The service_activation_date of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this GETSubscriptionType.

        The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd   # noqa: E501

        :param service_activation_date: The service_activation_date of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def status(self):
        """Gets the status of this GETSubscriptionType.  # noqa: E501

        Subscription status; possible values are:  * `Draft` * `Pending Activation` * `Pending Acceptance` * `Active` * `Cancelled` * `Suspended` (This value is in Limited Availability.)   # noqa: E501

        :return: The status of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETSubscriptionType.

        Subscription status; possible values are:  * `Draft` * `Pending Activation` * `Pending Acceptance` * `Active` * `Cancelled` * `Suspended` (This value is in Limited Availability.)   # noqa: E501

        :param status: The status of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscription_number(self):
        """Gets the subscription_number of this GETSubscriptionType.  # noqa: E501

          # noqa: E501

        :return: The subscription_number of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this GETSubscriptionType.

          # noqa: E501

        :param subscription_number: The subscription_number of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def subscription_start_date(self):
        """Gets the subscription_start_date of this GETSubscriptionType.  # noqa: E501

        Date the subscription becomes effective.   # noqa: E501

        :return: The subscription_start_date of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._subscription_start_date

    @subscription_start_date.setter
    def subscription_start_date(self, subscription_start_date):
        """Sets the subscription_start_date of this GETSubscriptionType.

        Date the subscription becomes effective.   # noqa: E501

        :param subscription_start_date: The subscription_start_date of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._subscription_start_date = subscription_start_date

    @property
    def term_end_date(self):
        """Gets the term_end_date of this GETSubscriptionType.  # noqa: E501

        Date the subscription term ends. If the subscription is evergreen, this is null or is the cancellation date (if one has been set).   # noqa: E501

        :return: The term_end_date of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._term_end_date

    @term_end_date.setter
    def term_end_date(self, term_end_date):
        """Sets the term_end_date of this GETSubscriptionType.

        Date the subscription term ends. If the subscription is evergreen, this is null or is the cancellation date (if one has been set).   # noqa: E501

        :param term_end_date: The term_end_date of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._term_end_date = term_end_date

    @property
    def term_start_date(self):
        """Gets the term_start_date of this GETSubscriptionType.  # noqa: E501

        Date the subscription term begins. If this is a renewal subscription, this date is different from the subscription start date.   # noqa: E501

        :return: The term_start_date of this GETSubscriptionType.  # noqa: E501
        :rtype: date
        """
        return self._term_start_date

    @term_start_date.setter
    def term_start_date(self, term_start_date):
        """Sets the term_start_date of this GETSubscriptionType.

        Date the subscription term begins. If this is a renewal subscription, this date is different from the subscription start date.   # noqa: E501

        :param term_start_date: The term_start_date of this GETSubscriptionType.  # noqa: E501
        :type: date
        """

        self._term_start_date = term_start_date

    @property
    def term_type(self):
        """Gets the term_type of this GETSubscriptionType.  # noqa: E501

        Possible values are: `TERMED`, `EVERGREEN`.   # noqa: E501

        :return: The term_type of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this GETSubscriptionType.

        Possible values are: `TERMED`, `EVERGREEN`.   # noqa: E501

        :param term_type: The term_type of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._term_type = term_type

    @property
    def total_contracted_value(self):
        """Gets the total_contracted_value of this GETSubscriptionType.  # noqa: E501

        Total contracted value of the subscription.   # noqa: E501

        :return: The total_contracted_value of this GETSubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._total_contracted_value

    @total_contracted_value.setter
    def total_contracted_value(self, total_contracted_value):
        """Sets the total_contracted_value of this GETSubscriptionType.

        Total contracted value of the subscription.   # noqa: E501

        :param total_contracted_value: The total_contracted_value of this GETSubscriptionType.  # noqa: E501
        :type: str
        """

        self._total_contracted_value = total_contracted_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETSubscriptionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETSubscriptionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
