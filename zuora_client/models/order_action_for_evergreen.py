# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.cancel_subscription import CancelSubscription  # noqa: F401,E501
from zuora_client.models.create_subscription_for_evergreen import CreateSubscriptionForEvergreen  # noqa: F401,E501
from zuora_client.models.get_order_resume import GetOrderResume  # noqa: F401,E501
from zuora_client.models.get_order_suspend import GetOrderSuspend  # noqa: F401,E501
from zuora_client.models.order_action_object_custom_fields import OrderActionObjectCustomFields  # noqa: F401,E501
from zuora_client.models.order_metrics_for_evergreen import OrderMetricsForEvergreen  # noqa: F401,E501
from zuora_client.models.owner_transfer import OwnerTransfer  # noqa: F401,E501
from zuora_client.models.rate_plan_override_for_evergreen import RatePlanOverrideForEvergreen  # noqa: F401,E501
from zuora_client.models.rate_plan_update_for_evergreen import RatePlanUpdateForEvergreen  # noqa: F401,E501
from zuora_client.models.remove_product import RemoveProduct  # noqa: F401,E501
from zuora_client.models.terms_and_conditions import TermsAndConditions  # noqa: F401,E501
from zuora_client.models.trigger_date import TriggerDate  # noqa: F401,E501


class OrderActionForEvergreen(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_product': 'RatePlanOverrideForEvergreen',
        'cancel_subscription': 'CancelSubscription',
        'create_subscription': 'CreateSubscriptionForEvergreen',
        'custom_fields': 'OrderActionObjectCustomFields',
        'order_metrics': 'list[OrderMetricsForEvergreen]',
        'owner_transfer': 'OwnerTransfer',
        'remove_product': 'RemoveProduct',
        'resume': 'GetOrderResume',
        'sequence': 'int',
        'suspend': 'GetOrderSuspend',
        'terms_and_conditions': 'TermsAndConditions',
        'trigger_dates': 'list[TriggerDate]',
        'type': 'str',
        'update_product': 'RatePlanUpdateForEvergreen'
    }

    attribute_map = {
        'add_product': 'addProduct',
        'cancel_subscription': 'cancelSubscription',
        'create_subscription': 'createSubscription',
        'custom_fields': 'customFields',
        'order_metrics': 'orderMetrics',
        'owner_transfer': 'ownerTransfer',
        'remove_product': 'removeProduct',
        'resume': 'resume',
        'sequence': 'sequence',
        'suspend': 'suspend',
        'terms_and_conditions': 'termsAndConditions',
        'trigger_dates': 'triggerDates',
        'type': 'type',
        'update_product': 'updateProduct'
    }

    def __init__(self, add_product=None, cancel_subscription=None, create_subscription=None, custom_fields=None, order_metrics=None, owner_transfer=None, remove_product=None, resume=None, sequence=None, suspend=None, terms_and_conditions=None, trigger_dates=None, type=None, update_product=None):  # noqa: E501
        """OrderActionForEvergreen - a model defined in Swagger"""  # noqa: E501

        self._add_product = None
        self._cancel_subscription = None
        self._create_subscription = None
        self._custom_fields = None
        self._order_metrics = None
        self._owner_transfer = None
        self._remove_product = None
        self._resume = None
        self._sequence = None
        self._suspend = None
        self._terms_and_conditions = None
        self._trigger_dates = None
        self._type = None
        self._update_product = None
        self.discriminator = None

        if add_product is not None:
            self.add_product = add_product
        if cancel_subscription is not None:
            self.cancel_subscription = cancel_subscription
        if create_subscription is not None:
            self.create_subscription = create_subscription
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if order_metrics is not None:
            self.order_metrics = order_metrics
        if owner_transfer is not None:
            self.owner_transfer = owner_transfer
        if remove_product is not None:
            self.remove_product = remove_product
        if resume is not None:
            self.resume = resume
        if sequence is not None:
            self.sequence = sequence
        if suspend is not None:
            self.suspend = suspend
        if terms_and_conditions is not None:
            self.terms_and_conditions = terms_and_conditions
        if trigger_dates is not None:
            self.trigger_dates = trigger_dates
        if type is not None:
            self.type = type
        if update_product is not None:
            self.update_product = update_product

    @property
    def add_product(self):
        """Gets the add_product of this OrderActionForEvergreen.  # noqa: E501


        :return: The add_product of this OrderActionForEvergreen.  # noqa: E501
        :rtype: RatePlanOverrideForEvergreen
        """
        return self._add_product

    @add_product.setter
    def add_product(self, add_product):
        """Sets the add_product of this OrderActionForEvergreen.


        :param add_product: The add_product of this OrderActionForEvergreen.  # noqa: E501
        :type: RatePlanOverrideForEvergreen
        """

        self._add_product = add_product

    @property
    def cancel_subscription(self):
        """Gets the cancel_subscription of this OrderActionForEvergreen.  # noqa: E501


        :return: The cancel_subscription of this OrderActionForEvergreen.  # noqa: E501
        :rtype: CancelSubscription
        """
        return self._cancel_subscription

    @cancel_subscription.setter
    def cancel_subscription(self, cancel_subscription):
        """Sets the cancel_subscription of this OrderActionForEvergreen.


        :param cancel_subscription: The cancel_subscription of this OrderActionForEvergreen.  # noqa: E501
        :type: CancelSubscription
        """

        self._cancel_subscription = cancel_subscription

    @property
    def create_subscription(self):
        """Gets the create_subscription of this OrderActionForEvergreen.  # noqa: E501


        :return: The create_subscription of this OrderActionForEvergreen.  # noqa: E501
        :rtype: CreateSubscriptionForEvergreen
        """
        return self._create_subscription

    @create_subscription.setter
    def create_subscription(self, create_subscription):
        """Sets the create_subscription of this OrderActionForEvergreen.


        :param create_subscription: The create_subscription of this OrderActionForEvergreen.  # noqa: E501
        :type: CreateSubscriptionForEvergreen
        """

        self._create_subscription = create_subscription

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderActionForEvergreen.  # noqa: E501


        :return: The custom_fields of this OrderActionForEvergreen.  # noqa: E501
        :rtype: OrderActionObjectCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderActionForEvergreen.


        :param custom_fields: The custom_fields of this OrderActionForEvergreen.  # noqa: E501
        :type: OrderActionObjectCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def order_metrics(self):
        """Gets the order_metrics of this OrderActionForEvergreen.  # noqa: E501


        :return: The order_metrics of this OrderActionForEvergreen.  # noqa: E501
        :rtype: list[OrderMetricsForEvergreen]
        """
        return self._order_metrics

    @order_metrics.setter
    def order_metrics(self, order_metrics):
        """Sets the order_metrics of this OrderActionForEvergreen.


        :param order_metrics: The order_metrics of this OrderActionForEvergreen.  # noqa: E501
        :type: list[OrderMetricsForEvergreen]
        """

        self._order_metrics = order_metrics

    @property
    def owner_transfer(self):
        """Gets the owner_transfer of this OrderActionForEvergreen.  # noqa: E501


        :return: The owner_transfer of this OrderActionForEvergreen.  # noqa: E501
        :rtype: OwnerTransfer
        """
        return self._owner_transfer

    @owner_transfer.setter
    def owner_transfer(self, owner_transfer):
        """Sets the owner_transfer of this OrderActionForEvergreen.


        :param owner_transfer: The owner_transfer of this OrderActionForEvergreen.  # noqa: E501
        :type: OwnerTransfer
        """

        self._owner_transfer = owner_transfer

    @property
    def remove_product(self):
        """Gets the remove_product of this OrderActionForEvergreen.  # noqa: E501


        :return: The remove_product of this OrderActionForEvergreen.  # noqa: E501
        :rtype: RemoveProduct
        """
        return self._remove_product

    @remove_product.setter
    def remove_product(self, remove_product):
        """Sets the remove_product of this OrderActionForEvergreen.


        :param remove_product: The remove_product of this OrderActionForEvergreen.  # noqa: E501
        :type: RemoveProduct
        """

        self._remove_product = remove_product

    @property
    def resume(self):
        """Gets the resume of this OrderActionForEvergreen.  # noqa: E501


        :return: The resume of this OrderActionForEvergreen.  # noqa: E501
        :rtype: GetOrderResume
        """
        return self._resume

    @resume.setter
    def resume(self, resume):
        """Sets the resume of this OrderActionForEvergreen.


        :param resume: The resume of this OrderActionForEvergreen.  # noqa: E501
        :type: GetOrderResume
        """

        self._resume = resume

    @property
    def sequence(self):
        """Gets the sequence of this OrderActionForEvergreen.  # noqa: E501

        The sequence of the order actions processed in the order.  # noqa: E501

        :return: The sequence of this OrderActionForEvergreen.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this OrderActionForEvergreen.

        The sequence of the order actions processed in the order.  # noqa: E501

        :param sequence: The sequence of this OrderActionForEvergreen.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def suspend(self):
        """Gets the suspend of this OrderActionForEvergreen.  # noqa: E501


        :return: The suspend of this OrderActionForEvergreen.  # noqa: E501
        :rtype: GetOrderSuspend
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this OrderActionForEvergreen.


        :param suspend: The suspend of this OrderActionForEvergreen.  # noqa: E501
        :type: GetOrderSuspend
        """

        self._suspend = suspend

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this OrderActionForEvergreen.  # noqa: E501


        :return: The terms_and_conditions of this OrderActionForEvergreen.  # noqa: E501
        :rtype: TermsAndConditions
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this OrderActionForEvergreen.


        :param terms_and_conditions: The terms_and_conditions of this OrderActionForEvergreen.  # noqa: E501
        :type: TermsAndConditions
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def trigger_dates(self):
        """Gets the trigger_dates of this OrderActionForEvergreen.  # noqa: E501


        :return: The trigger_dates of this OrderActionForEvergreen.  # noqa: E501
        :rtype: list[TriggerDate]
        """
        return self._trigger_dates

    @trigger_dates.setter
    def trigger_dates(self, trigger_dates):
        """Sets the trigger_dates of this OrderActionForEvergreen.


        :param trigger_dates: The trigger_dates of this OrderActionForEvergreen.  # noqa: E501
        :type: list[TriggerDate]
        """

        self._trigger_dates = trigger_dates

    @property
    def type(self):
        """Gets the type of this OrderActionForEvergreen.  # noqa: E501

        Type of the order action.  # noqa: E501

        :return: The type of this OrderActionForEvergreen.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderActionForEvergreen.

        Type of the order action.  # noqa: E501

        :param type: The type of this OrderActionForEvergreen.  # noqa: E501
        :type: str
        """
        allowed_values = ["CreateSubscription", "TermsAndConditions", "AddProduct", "UpdateProduct", "RemoveProduct", "RenewSubscription", "CancelSubscription", "OwnerTransfer", "Suspend", "Resume"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_product(self):
        """Gets the update_product of this OrderActionForEvergreen.  # noqa: E501


        :return: The update_product of this OrderActionForEvergreen.  # noqa: E501
        :rtype: RatePlanUpdateForEvergreen
        """
        return self._update_product

    @update_product.setter
    def update_product(self, update_product):
        """Sets the update_product of this OrderActionForEvergreen.


        :param update_product: The update_product of this OrderActionForEvergreen.  # noqa: E501
        :type: RatePlanUpdateForEvergreen
        """

        self._update_product = update_product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderActionForEvergreen, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderActionForEvergreen):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
