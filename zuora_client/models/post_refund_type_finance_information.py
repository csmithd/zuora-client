# coding: utf-8




import pprint
import re  # noqa: F401

import six


class PostRefundTypeFinanceInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_account_accounting_code': 'str',
        'transferred_to_accounting': 'str',
        'unapplied_payment_accounting_code': 'str'
    }

    attribute_map = {
        'bank_account_accounting_code': 'bankAccountAccountingCode',
        'transferred_to_accounting': 'transferredToAccounting',
        'unapplied_payment_accounting_code': 'unappliedPaymentAccountingCode'
    }

    def __init__(self, bank_account_accounting_code=None, transferred_to_accounting=None, unapplied_payment_accounting_code=None):  # noqa: E501
        """PostRefundTypeFinanceInformation - a model defined in Swagger"""  # noqa: E501

        self._bank_account_accounting_code = None
        self._transferred_to_accounting = None
        self._unapplied_payment_accounting_code = None
        self.discriminator = None

        if bank_account_accounting_code is not None:
            self.bank_account_accounting_code = bank_account_accounting_code
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if unapplied_payment_accounting_code is not None:
            self.unapplied_payment_accounting_code = unapplied_payment_accounting_code

    @property
    def bank_account_accounting_code(self):
        """Gets the bank_account_accounting_code of this PostRefundTypeFinanceInformation.  # noqa: E501

        The accounting code that maps to a bank account in your accounting system.   # noqa: E501

        :return: The bank_account_accounting_code of this PostRefundTypeFinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_accounting_code

    @bank_account_accounting_code.setter
    def bank_account_accounting_code(self, bank_account_accounting_code):
        """Sets the bank_account_accounting_code of this PostRefundTypeFinanceInformation.

        The accounting code that maps to a bank account in your accounting system.   # noqa: E501

        :param bank_account_accounting_code: The bank_account_accounting_code of this PostRefundTypeFinanceInformation.  # noqa: E501
        :type: str
        """
        if bank_account_accounting_code is not None and len(bank_account_accounting_code) > 100:
            raise ValueError("Invalid value for `bank_account_accounting_code`, length must be less than or equal to `100`")  # noqa: E501
        if bank_account_accounting_code is not None and len(bank_account_accounting_code) < 0:
            raise ValueError("Invalid value for `bank_account_accounting_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._bank_account_accounting_code = bank_account_accounting_code

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this PostRefundTypeFinanceInformation.  # noqa: E501

        Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.    # noqa: E501

        :return: The transferred_to_accounting of this PostRefundTypeFinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this PostRefundTypeFinanceInformation.

        Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.    # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this PostRefundTypeFinanceInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "No", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def unapplied_payment_accounting_code(self):
        """Gets the unapplied_payment_accounting_code of this PostRefundTypeFinanceInformation.  # noqa: E501

        The accounting code for the unapplied payment.   # noqa: E501

        :return: The unapplied_payment_accounting_code of this PostRefundTypeFinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._unapplied_payment_accounting_code

    @unapplied_payment_accounting_code.setter
    def unapplied_payment_accounting_code(self, unapplied_payment_accounting_code):
        """Sets the unapplied_payment_accounting_code of this PostRefundTypeFinanceInformation.

        The accounting code for the unapplied payment.   # noqa: E501

        :param unapplied_payment_accounting_code: The unapplied_payment_accounting_code of this PostRefundTypeFinanceInformation.  # noqa: E501
        :type: str
        """
        if unapplied_payment_accounting_code is not None and len(unapplied_payment_accounting_code) > 100:
            raise ValueError("Invalid value for `unapplied_payment_accounting_code`, length must be less than or equal to `100`")  # noqa: E501
        if unapplied_payment_accounting_code is not None and len(unapplied_payment_accounting_code) < 0:
            raise ValueError("Invalid value for `unapplied_payment_accounting_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._unapplied_payment_accounting_code = unapplied_payment_accounting_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRefundTypeFinanceInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRefundTypeFinanceInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
