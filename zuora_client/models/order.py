# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.order_object_custom_fields import OrderObjectCustomFields  # noqa: F401,E501
from zuora_client.models.order_subscriptions import OrderSubscriptions  # noqa: F401,E501


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_date': 'str',
        'currency': 'str',
        'custom_fields': 'OrderObjectCustomFields',
        'existing_account_number': 'str',
        'order_date': 'date',
        'order_number': 'str',
        'status': 'str',
        'subscriptions': 'list[OrderSubscriptions]',
        'updated_by': 'str',
        'updated_date': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'currency': 'currency',
        'custom_fields': 'customFields',
        'existing_account_number': 'existingAccountNumber',
        'order_date': 'orderDate',
        'order_number': 'orderNumber',
        'status': 'status',
        'subscriptions': 'subscriptions',
        'updated_by': 'updatedBy',
        'updated_date': 'updatedDate'
    }

    def __init__(self, created_by=None, created_date=None, currency=None, custom_fields=None, existing_account_number=None, order_date=None, order_number=None, status=None, subscriptions=None, updated_by=None, updated_date=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501

        self._created_by = None
        self._created_date = None
        self._currency = None
        self._custom_fields = None
        self._existing_account_number = None
        self._order_date = None
        self._order_number = None
        self._status = None
        self._subscriptions = None
        self._updated_by = None
        self._updated_date = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if currency is not None:
            self.currency = currency
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if existing_account_number is not None:
            self.existing_account_number = existing_account_number
        if order_date is not None:
            self.order_date = order_date
        if order_number is not None:
            self.order_number = order_number
        if status is not None:
            self.status = status
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def created_by(self):
        """Gets the created_by of this Order.  # noqa: E501

        The ID of the user who created this order.  # noqa: E501

        :return: The created_by of this Order.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Order.

        The ID of the user who created this order.  # noqa: E501

        :param created_by: The created_by of this Order.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this Order.  # noqa: E501

        The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :return: The created_date of this Order.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Order.

        The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :param created_date: The created_date of this Order.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def currency(self):
        """Gets the currency of this Order.  # noqa: E501

        Currency code.  # noqa: E501

        :return: The currency of this Order.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.

        Currency code.  # noqa: E501

        :param currency: The currency of this Order.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Order.  # noqa: E501


        :return: The custom_fields of this Order.  # noqa: E501
        :rtype: OrderObjectCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Order.


        :param custom_fields: The custom_fields of this Order.  # noqa: E501
        :type: OrderObjectCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def existing_account_number(self):
        """Gets the existing_account_number of this Order.  # noqa: E501

        The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.  # noqa: E501

        :return: The existing_account_number of this Order.  # noqa: E501
        :rtype: str
        """
        return self._existing_account_number

    @existing_account_number.setter
    def existing_account_number(self, existing_account_number):
        """Sets the existing_account_number of this Order.

        The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.  # noqa: E501

        :param existing_account_number: The existing_account_number of this Order.  # noqa: E501
        :type: str
        """

        self._existing_account_number = existing_account_number

    @property
    def order_date(self):
        """Gets the order_date of this Order.  # noqa: E501

        The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.  # noqa: E501

        :return: The order_date of this Order.  # noqa: E501
        :rtype: date
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Order.

        The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.  # noqa: E501

        :param order_date: The order_date of this Order.  # noqa: E501
        :type: date
        """

        self._order_date = order_date

    @property
    def order_number(self):
        """Gets the order_number of this Order.  # noqa: E501

        The order number of the order.  # noqa: E501

        :return: The order_number of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Order.

        The order number of the order.  # noqa: E501

        :param order_number: The order_number of this Order.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501

        The status of the order. If the order contains any `Pending Activation` or `Pending Acceptance` subscription, the order status will be `Pending`; otherwise the order status is `Completed`.  # noqa: E501

        :return: The status of this Order.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        The status of the order. If the order contains any `Pending Activation` or `Pending Acceptance` subscription, the order status will be `Pending`; otherwise the order status is `Completed`.  # noqa: E501

        :param status: The status of this Order.  # noqa: E501
        :type: str
        """
        allowed_values = ["Completed", "Pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Order.  # noqa: E501

        Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.  # noqa: E501

        :return: The subscriptions of this Order.  # noqa: E501
        :rtype: list[OrderSubscriptions]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Order.

        Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.  # noqa: E501

        :param subscriptions: The subscriptions of this Order.  # noqa: E501
        :type: list[OrderSubscriptions]
        """

        self._subscriptions = subscriptions

    @property
    def updated_by(self):
        """Gets the updated_by of this Order.  # noqa: E501

        The ID of the user who updated this order.  # noqa: E501

        :return: The updated_by of this Order.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Order.

        The ID of the user who updated this order.  # noqa: E501

        :param updated_by: The updated_by of this Order.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_date(self):
        """Gets the updated_date of this Order.  # noqa: E501

        The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :return: The updated_date of this Order.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Order.

        The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :param updated_date: The updated_date of this Order.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
