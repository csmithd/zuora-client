# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_payment_method_type_card_holder_info import GETPaymentMethodTypeCardHolderInfo  # noqa: F401,E501


class GETPaymentMethodType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_holder_info': 'GETPaymentMethodTypeCardHolderInfo',
        'card_number': 'str',
        'card_type': 'str',
        'default_payment_method': 'bool',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'id': 'str'
    }

    attribute_map = {
        'card_holder_info': 'cardHolderInfo',
        'card_number': 'cardNumber',
        'card_type': 'cardType',
        'default_payment_method': 'defaultPaymentMethod',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'id': 'id'
    }

    def __init__(self, card_holder_info=None, card_number=None, card_type=None, default_payment_method=None, expiration_month=None, expiration_year=None, id=None):  # noqa: E501
        """GETPaymentMethodType - a model defined in Swagger"""  # noqa: E501

        self._card_holder_info = None
        self._card_number = None
        self._card_type = None
        self._default_payment_method = None
        self._expiration_month = None
        self._expiration_year = None
        self._id = None
        self.discriminator = None

        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        if card_number is not None:
            self.card_number = card_number
        if card_type is not None:
            self.card_type = card_type
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if id is not None:
            self.id = id

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this GETPaymentMethodType.  # noqa: E501


        :return: The card_holder_info of this GETPaymentMethodType.  # noqa: E501
        :rtype: GETPaymentMethodTypeCardHolderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this GETPaymentMethodType.


        :param card_holder_info: The card_holder_info of this GETPaymentMethodType.  # noqa: E501
        :type: GETPaymentMethodTypeCardHolderInfo
        """

        self._card_holder_info = card_holder_info

    @property
    def card_number(self):
        """Gets the card_number of this GETPaymentMethodType.  # noqa: E501

        Credit or debit card number, 16 characters or less, masked for security purposes.   # noqa: E501

        :return: The card_number of this GETPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this GETPaymentMethodType.

        Credit or debit card number, 16 characters or less, masked for security purposes.   # noqa: E501

        :param card_number: The card_number of this GETPaymentMethodType.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this GETPaymentMethodType.  # noqa: E501

        The type of the credit card.      Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The card_type of this GETPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this GETPaymentMethodType.

        The type of the credit card.      Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param card_type: The card_type of this GETPaymentMethodType.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this GETPaymentMethodType.  # noqa: E501

        Contains true if this is the default payment method for this customer, otherwise false.   # noqa: E501

        :return: The default_payment_method of this GETPaymentMethodType.  # noqa: E501
        :rtype: bool
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this GETPaymentMethodType.

        Contains true if this is the default payment method for this customer, otherwise false.   # noqa: E501

        :param default_payment_method: The default_payment_method of this GETPaymentMethodType.  # noqa: E501
        :type: bool
        """

        self._default_payment_method = default_payment_method

    @property
    def expiration_month(self):
        """Gets the expiration_month of this GETPaymentMethodType.  # noqa: E501

        One or two digit(s) expiration month (1-12).   # noqa: E501

        :return: The expiration_month of this GETPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this GETPaymentMethodType.

        One or two digit(s) expiration month (1-12).   # noqa: E501

        :param expiration_month: The expiration_month of this GETPaymentMethodType.  # noqa: E501
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this GETPaymentMethodType.  # noqa: E501

        Four-digit expiration year.   # noqa: E501

        :return: The expiration_year of this GETPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this GETPaymentMethodType.

        Four-digit expiration year.   # noqa: E501

        :param expiration_year: The expiration_year of this GETPaymentMethodType.  # noqa: E501
        :type: str
        """

        self._expiration_year = expiration_year

    @property
    def id(self):
        """Gets the id of this GETPaymentMethodType.  # noqa: E501

        Unique ID generated by Zuora when this payment method was created.   # noqa: E501

        :return: The id of this GETPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETPaymentMethodType.

        Unique ID generated by Zuora when this payment method was created.   # noqa: E501

        :param id: The id of this GETPaymentMethodType.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETPaymentMethodType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETPaymentMethodType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
