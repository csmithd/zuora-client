# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.invoice_adjustment_object_custom_fields import InvoiceAdjustmentObjectCustomFields  # noqa: F401,E501


class ProxyModifyInvoiceAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason_code': 'str',
        'status': 'str',
        'transferred_to_accounting': 'str'
    }

    attribute_map = {
        'reason_code': 'ReasonCode',
        'status': 'Status',
        'transferred_to_accounting': 'TransferredToAccounting'
    }

    def __init__(self, reason_code=None, status=None, transferred_to_accounting=None):  # noqa: E501
        """ProxyModifyInvoiceAdjustment - a model defined in Swagger"""  # noqa: E501

        self._reason_code = None
        self._status = None
        self._transferred_to_accounting = None
        self.discriminator = None

        if reason_code is not None:
            self.reason_code = reason_code
        if status is not None:
            self.status = status
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting

    @property
    def reason_code(self):
        """Gets the reason_code of this ProxyModifyInvoiceAdjustment.  # noqa: E501

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :return: The reason_code of this ProxyModifyInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ProxyModifyInvoiceAdjustment.

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :param reason_code: The reason_code of this ProxyModifyInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def status(self):
        """Gets the status of this ProxyModifyInvoiceAdjustment.  # noqa: E501

         The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls. **Character limit**: 9 **Values**: `Canceled`, `Processed`   # noqa: E501

        :return: The status of this ProxyModifyInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyModifyInvoiceAdjustment.

         The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls. **Character limit**: 9 **Values**: `Canceled`, `Processed`   # noqa: E501

        :param status: The status of this ProxyModifyInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyModifyInvoiceAdjustment.  # noqa: E501

        Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :return: The transferred_to_accounting of this ProxyModifyInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyModifyInvoiceAdjustment.

        Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyModifyInvoiceAdjustment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "No", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyModifyInvoiceAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyModifyInvoiceAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
