# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.invoice_payment_data import InvoicePaymentData  # noqa: F401,E501
from zuora_client.models.payment_object_custom_fields import PaymentObjectCustomFields  # noqa: F401,E501
from zuora_client.models.payment_object_ns_fields import PaymentObjectNSFields  # noqa: F401,E501
from zuora_client.models.proxy_create_payment_gateway_option_data import ProxyCreatePaymentGatewayOptionData  # noqa: F401,E501


class ProxyCreatePayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'transaction__ns': 'str',
        'account_id': 'str',
        'accounting_code': 'str',
        'amount': 'float',
        'applied_credit_balance_amount': 'float',
        'applied_invoice_amount': 'float',
        'auth_transaction_id': 'str',
        'comment': 'str',
        'effective_date': 'date',
        'gateway': 'str',
        'gateway_option_data': 'ProxyCreatePaymentGatewayOptionData',
        'gateway_order_id': 'str',
        'gateway_response': 'str',
        'gateway_response_code': 'str',
        'gateway_state': 'str',
        'invoice_id': 'str',
        'invoice_number': 'str',
        'invoice_payment_data': 'InvoicePaymentData',
        'payment_method_id': 'str',
        'payment_number': 'str',
        'reference_id': 'str',
        'soft_descriptor': 'str',
        'soft_descriptor_phone': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'transaction__ns': 'Transaction__NS',
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'amount': 'Amount',
        'applied_credit_balance_amount': 'AppliedCreditBalanceAmount',
        'applied_invoice_amount': 'AppliedInvoiceAmount',
        'auth_transaction_id': 'AuthTransactionId',
        'comment': 'Comment',
        'effective_date': 'EffectiveDate',
        'gateway': 'Gateway',
        'gateway_option_data': 'GatewayOptionData',
        'gateway_order_id': 'GatewayOrderId',
        'gateway_response': 'GatewayResponse',
        'gateway_response_code': 'GatewayResponseCode',
        'gateway_state': 'GatewayState',
        'invoice_id': 'InvoiceId',
        'invoice_number': 'InvoiceNumber',
        'invoice_payment_data': 'InvoicePaymentData',
        'payment_method_id': 'PaymentMethodId',
        'payment_number': 'PaymentNumber',
        'reference_id': 'ReferenceId',
        'soft_descriptor': 'SoftDescriptor',
        'soft_descriptor_phone': 'SoftDescriptorPhone',
        'status': 'Status',
        'type': 'Type'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, transaction__ns=None, account_id=None, accounting_code=None, amount=None, applied_credit_balance_amount=None, applied_invoice_amount=None, auth_transaction_id=None, comment=None, effective_date=None, gateway=None, gateway_option_data=None, gateway_order_id=None, gateway_response=None, gateway_response_code=None, gateway_state=None, invoice_id=None, invoice_number=None, invoice_payment_data=None, payment_method_id=None, payment_number=None, reference_id=None, soft_descriptor=None, soft_descriptor_phone=None, status=None, type=None):  # noqa: E501
        """ProxyCreatePayment - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._transaction__ns = None
        self._account_id = None
        self._accounting_code = None
        self._amount = None
        self._applied_credit_balance_amount = None
        self._applied_invoice_amount = None
        self._auth_transaction_id = None
        self._comment = None
        self._effective_date = None
        self._gateway = None
        self._gateway_option_data = None
        self._gateway_order_id = None
        self._gateway_response = None
        self._gateway_response_code = None
        self._gateway_state = None
        self._invoice_id = None
        self._invoice_number = None
        self._invoice_payment_data = None
        self._payment_method_id = None
        self._payment_number = None
        self._reference_id = None
        self._soft_descriptor = None
        self._soft_descriptor_phone = None
        self._status = None
        self._type = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if transaction__ns is not None:
            self.transaction__ns = transaction__ns
        self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if amount is not None:
            self.amount = amount
        if applied_credit_balance_amount is not None:
            self.applied_credit_balance_amount = applied_credit_balance_amount
        if applied_invoice_amount is not None:
            self.applied_invoice_amount = applied_invoice_amount
        if auth_transaction_id is not None:
            self.auth_transaction_id = auth_transaction_id
        if comment is not None:
            self.comment = comment
        self.effective_date = effective_date
        if gateway is not None:
            self.gateway = gateway
        if gateway_option_data is not None:
            self.gateway_option_data = gateway_option_data
        if gateway_order_id is not None:
            self.gateway_order_id = gateway_order_id
        if gateway_response is not None:
            self.gateway_response = gateway_response
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if gateway_state is not None:
            self.gateway_state = gateway_state
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if invoice_payment_data is not None:
            self.invoice_payment_data = invoice_payment_data
        self.payment_method_id = payment_method_id
        if payment_number is not None:
            self.payment_number = payment_number
        if reference_id is not None:
            self.reference_id = reference_id
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if soft_descriptor_phone is not None:
            self.soft_descriptor_phone = soft_descriptor_phone
        self.status = status
        self.type = type

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyCreatePayment.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyCreatePayment.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyCreatePayment.  # noqa: E501

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyCreatePayment.

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this ProxyCreatePayment.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this ProxyCreatePayment.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if origin__ns is not None and len(origin__ns) > 255:
            raise ValueError("Invalid value for `origin__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyCreatePayment.  # noqa: E501

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyCreatePayment.

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def transaction__ns(self):
        """Gets the transaction__ns of this ProxyCreatePayment.  # noqa: E501

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The transaction__ns of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._transaction__ns

    @transaction__ns.setter
    def transaction__ns(self, transaction__ns):
        """Sets the transaction__ns of this ProxyCreatePayment.

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param transaction__ns: The transaction__ns of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if transaction__ns is not None and len(transaction__ns) > 255:
            raise ValueError("Invalid value for `transaction__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._transaction__ns = transaction__ns

    @property
    def account_id(self):
        """Gets the account_id of this ProxyCreatePayment.  # noqa: E501

        The unique account ID for the customer that the payment is for.   # noqa: E501

        :return: The account_id of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyCreatePayment.

        The unique account ID for the customer that the payment is for.   # noqa: E501

        :param account_id: The account_id of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501
        if account_id is not None and len(account_id) > 32:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `32`")  # noqa: E501
        if account_id is not None and len(account_id) < 0:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyCreatePayment.  # noqa: E501

        The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :return: The accounting_code of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyCreatePayment.

        The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if accounting_code is not None and len(accounting_code) > 100:
            raise ValueError("Invalid value for `accounting_code`, length must be less than or equal to `100`")  # noqa: E501
        if accounting_code is not None and len(accounting_code) < 0:
            raise ValueError("Invalid value for `accounting_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._accounting_code = accounting_code

    @property
    def amount(self):
        """Gets the amount of this ProxyCreatePayment.  # noqa: E501

        The amount of the payment.   # noqa: E501

        :return: The amount of this ProxyCreatePayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyCreatePayment.

        The amount of the payment.   # noqa: E501

        :param amount: The amount of this ProxyCreatePayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def applied_credit_balance_amount(self):
        """Gets the applied_credit_balance_amount of this ProxyCreatePayment.  # noqa: E501

        The amount of the payment to apply to a credit balance. This field is only required if the `AppliedInvoiceAmount` field value is null.   # noqa: E501

        :return: The applied_credit_balance_amount of this ProxyCreatePayment.  # noqa: E501
        :rtype: float
        """
        return self._applied_credit_balance_amount

    @applied_credit_balance_amount.setter
    def applied_credit_balance_amount(self, applied_credit_balance_amount):
        """Sets the applied_credit_balance_amount of this ProxyCreatePayment.

        The amount of the payment to apply to a credit balance. This field is only required if the `AppliedInvoiceAmount` field value is null.   # noqa: E501

        :param applied_credit_balance_amount: The applied_credit_balance_amount of this ProxyCreatePayment.  # noqa: E501
        :type: float
        """

        self._applied_credit_balance_amount = applied_credit_balance_amount

    @property
    def applied_invoice_amount(self):
        """Gets the applied_invoice_amount of this ProxyCreatePayment.  # noqa: E501

        The amount of the payment to apply to an invoice. This field is only required if either the `InvoiceId` or `InvoiceNumber` field is not null.   # noqa: E501

        :return: The applied_invoice_amount of this ProxyCreatePayment.  # noqa: E501
        :rtype: float
        """
        return self._applied_invoice_amount

    @applied_invoice_amount.setter
    def applied_invoice_amount(self, applied_invoice_amount):
        """Sets the applied_invoice_amount of this ProxyCreatePayment.

        The amount of the payment to apply to an invoice. This field is only required if either the `InvoiceId` or `InvoiceNumber` field is not null.   # noqa: E501

        :param applied_invoice_amount: The applied_invoice_amount of this ProxyCreatePayment.  # noqa: E501
        :type: float
        """

        self._applied_invoice_amount = applied_invoice_amount

    @property
    def auth_transaction_id(self):
        """Gets the auth_transaction_id of this ProxyCreatePayment.  # noqa: E501

        The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.   # noqa: E501

        :return: The auth_transaction_id of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._auth_transaction_id

    @auth_transaction_id.setter
    def auth_transaction_id(self, auth_transaction_id):
        """Sets the auth_transaction_id of this ProxyCreatePayment.

        The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.   # noqa: E501

        :param auth_transaction_id: The auth_transaction_id of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if auth_transaction_id is not None and len(auth_transaction_id) > 50:
            raise ValueError("Invalid value for `auth_transaction_id`, length must be less than or equal to `50`")  # noqa: E501
        if auth_transaction_id is not None and len(auth_transaction_id) < 0:
            raise ValueError("Invalid value for `auth_transaction_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._auth_transaction_id = auth_transaction_id

    @property
    def comment(self):
        """Gets the comment of this ProxyCreatePayment.  # noqa: E501

        Additional information related to the payment.   # noqa: E501

        :return: The comment of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProxyCreatePayment.

        Additional information related to the payment.   # noqa: E501

        :param comment: The comment of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 255:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `255`")  # noqa: E501
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def effective_date(self):
        """Gets the effective_date of this ProxyCreatePayment.  # noqa: E501

        The date when the payment takes effect.   # noqa: E501

        :return: The effective_date of this ProxyCreatePayment.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this ProxyCreatePayment.

        The date when the payment takes effect.   # noqa: E501

        :param effective_date: The effective_date of this ProxyCreatePayment.  # noqa: E501
        :type: date
        """
        if effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")  # noqa: E501

        self._effective_date = effective_date

    @property
    def gateway(self):
        """Gets the gateway of this ProxyCreatePayment.  # noqa: E501

        The name of the gateway instance that processes the payment. When creating a payment, the value of this field must be a valid gateway instance name, and this gateway must support the specific payment method. If no value is specified, the default gateway on the Account will be used.   # noqa: E501

        :return: The gateway of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ProxyCreatePayment.

        The name of the gateway instance that processes the payment. When creating a payment, the value of this field must be a valid gateway instance name, and this gateway must support the specific payment method. If no value is specified, the default gateway on the Account will be used.   # noqa: E501

        :param gateway: The gateway of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def gateway_option_data(self):
        """Gets the gateway_option_data of this ProxyCreatePayment.  # noqa: E501


        :return: The gateway_option_data of this ProxyCreatePayment.  # noqa: E501
        :rtype: ProxyCreatePaymentGatewayOptionData
        """
        return self._gateway_option_data

    @gateway_option_data.setter
    def gateway_option_data(self, gateway_option_data):
        """Sets the gateway_option_data of this ProxyCreatePayment.


        :param gateway_option_data: The gateway_option_data of this ProxyCreatePayment.  # noqa: E501
        :type: ProxyCreatePaymentGatewayOptionData
        """

        self._gateway_option_data = gateway_option_data

    @property
    def gateway_order_id(self):
        """Gets the gateway_order_id of this ProxyCreatePayment.  # noqa: E501

        A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.  Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.   # noqa: E501

        :return: The gateway_order_id of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_order_id

    @gateway_order_id.setter
    def gateway_order_id(self, gateway_order_id):
        """Sets the gateway_order_id of this ProxyCreatePayment.

        A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.  Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.   # noqa: E501

        :param gateway_order_id: The gateway_order_id of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if gateway_order_id is not None and len(gateway_order_id) > 70:
            raise ValueError("Invalid value for `gateway_order_id`, length must be less than or equal to `70`")  # noqa: E501
        if gateway_order_id is not None and len(gateway_order_id) < 0:
            raise ValueError("Invalid value for `gateway_order_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._gateway_order_id = gateway_order_id

    @property
    def gateway_response(self):
        """Gets the gateway_response of this ProxyCreatePayment.  # noqa: E501

        The message returned from the payment gateway for the payment. This message is gateway-dependent.   # noqa: E501

        :return: The gateway_response of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response

    @gateway_response.setter
    def gateway_response(self, gateway_response):
        """Sets the gateway_response of this ProxyCreatePayment.

        The message returned from the payment gateway for the payment. This message is gateway-dependent.   # noqa: E501

        :param gateway_response: The gateway_response of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if gateway_response is not None and len(gateway_response) > 500:
            raise ValueError("Invalid value for `gateway_response`, length must be less than or equal to `500`")  # noqa: E501
        if gateway_response is not None and len(gateway_response) < 0:
            raise ValueError("Invalid value for `gateway_response`, length must be greater than or equal to `0`")  # noqa: E501

        self._gateway_response = gateway_response

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this ProxyCreatePayment.  # noqa: E501

        The code returned from the payment gateway for the payment. This code is gateway-dependent.   # noqa: E501

        :return: The gateway_response_code of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this ProxyCreatePayment.

        The code returned from the payment gateway for the payment. This code is gateway-dependent.   # noqa: E501

        :param gateway_response_code: The gateway_response_code of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if gateway_response_code is not None and len(gateway_response_code) > 20:
            raise ValueError("Invalid value for `gateway_response_code`, length must be less than or equal to `20`")  # noqa: E501
        if gateway_response_code is not None and len(gateway_response_code) < 0:
            raise ValueError("Invalid value for `gateway_response_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._gateway_response_code = gateway_response_code

    @property
    def gateway_state(self):
        """Gets the gateway_state of this ProxyCreatePayment.  # noqa: E501

        The status of the payment in the gateway; use for reconciliation.   # noqa: E501

        :return: The gateway_state of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_state

    @gateway_state.setter
    def gateway_state(self, gateway_state):
        """Sets the gateway_state of this ProxyCreatePayment.

        The status of the payment in the gateway; use for reconciliation.   # noqa: E501

        :param gateway_state: The gateway_state of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["MarkedForSubmission", "Submitted", "Settled", "NotSubmitted", "FailedToSettle"]  # noqa: E501
        if gateway_state not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_state` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway_state, allowed_values)
            )

        self._gateway_state = gateway_state

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ProxyCreatePayment.  # noqa: E501

        The ID of the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceNumber` field is null.   # noqa: E501

        :return: The invoice_id of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ProxyCreatePayment.

        The ID of the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceNumber` field is null.   # noqa: E501

        :param invoice_id: The invoice_id of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if invoice_id is not None and len(invoice_id) > 32:
            raise ValueError("Invalid value for `invoice_id`, length must be less than or equal to `32`")  # noqa: E501
        if invoice_id is not None and len(invoice_id) < 0:
            raise ValueError("Invalid value for `invoice_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this ProxyCreatePayment.  # noqa: E501

        The unique identification number for the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceId` field is null.   # noqa: E501

        :return: The invoice_number of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this ProxyCreatePayment.

        The unique identification number for the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceId` field is null.   # noqa: E501

        :param invoice_number: The invoice_number of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if invoice_number is not None and len(invoice_number) > 32:
            raise ValueError("Invalid value for `invoice_number`, length must be less than or equal to `32`")  # noqa: E501
        if invoice_number is not None and len(invoice_number) < 0:
            raise ValueError("Invalid value for `invoice_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._invoice_number = invoice_number

    @property
    def invoice_payment_data(self):
        """Gets the invoice_payment_data of this ProxyCreatePayment.  # noqa: E501


        :return: The invoice_payment_data of this ProxyCreatePayment.  # noqa: E501
        :rtype: InvoicePaymentData
        """
        return self._invoice_payment_data

    @invoice_payment_data.setter
    def invoice_payment_data(self, invoice_payment_data):
        """Sets the invoice_payment_data of this ProxyCreatePayment.


        :param invoice_payment_data: The invoice_payment_data of this ProxyCreatePayment.  # noqa: E501
        :type: InvoicePaymentData
        """

        self._invoice_payment_data = invoice_payment_data

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this ProxyCreatePayment.  # noqa: E501

        The ID of the payment method used for the payment.    # noqa: E501

        :return: The payment_method_id of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this ProxyCreatePayment.

        The ID of the payment method used for the payment.    # noqa: E501

        :param payment_method_id: The payment_method_id of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if payment_method_id is None:
            raise ValueError("Invalid value for `payment_method_id`, must not be `None`")  # noqa: E501
        if payment_method_id is not None and len(payment_method_id) > 32:
            raise ValueError("Invalid value for `payment_method_id`, length must be less than or equal to `32`")  # noqa: E501
        if payment_method_id is not None and len(payment_method_id) < 0:
            raise ValueError("Invalid value for `payment_method_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._payment_method_id = payment_method_id

    @property
    def payment_number(self):
        """Gets the payment_number of this ProxyCreatePayment.  # noqa: E501

        The unique identification number of the payment. For example, P-00000028.   # noqa: E501

        :return: The payment_number of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this ProxyCreatePayment.

        The unique identification number of the payment. For example, P-00000028.   # noqa: E501

        :param payment_number: The payment_number of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if payment_number is not None and len(payment_number) > 32:
            raise ValueError("Invalid value for `payment_number`, length must be less than or equal to `32`")  # noqa: E501
        if payment_number is not None and len(payment_number) < 0:
            raise ValueError("Invalid value for `payment_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._payment_number = payment_number

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyCreatePayment.  # noqa: E501

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :return: The reference_id of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyCreatePayment.

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :param reference_id: The reference_id of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if reference_id is not None and len(reference_id) > 60:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `60`")  # noqa: E501
        if reference_id is not None and len(reference_id) < 0:
            raise ValueError("Invalid value for `reference_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this ProxyCreatePayment.  # noqa: E501

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.   Zuora passes this field to Verifi directly without verification. In general, this field will be defaulted by the gateway. For Orbital, this field contains two fields separated by an asterisk, `SDMerchantName` and `SDProductionInfo`. For more information, contact your payment gateway.   # noqa: E501

        :return: The soft_descriptor of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this ProxyCreatePayment.

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.   Zuora passes this field to Verifi directly without verification. In general, this field will be defaulted by the gateway. For Orbital, this field contains two fields separated by an asterisk, `SDMerchantName` and `SDProductionInfo`. For more information, contact your payment gateway.   # noqa: E501

        :param soft_descriptor: The soft_descriptor of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if soft_descriptor is not None and len(soft_descriptor) > 35:
            raise ValueError("Invalid value for `soft_descriptor`, length must be less than or equal to `35`")  # noqa: E501
        if soft_descriptor is not None and len(soft_descriptor) < 0:
            raise ValueError("Invalid value for `soft_descriptor`, length must be greater than or equal to `0`")  # noqa: E501

        self._soft_descriptor = soft_descriptor

    @property
    def soft_descriptor_phone(self):
        """Gets the soft_descriptor_phone of this ProxyCreatePayment.  # noqa: E501

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.  Verifi and Orbital determine how to format this string. For more information, contact your payment gateway.   # noqa: E501

        :return: The soft_descriptor_phone of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor_phone

    @soft_descriptor_phone.setter
    def soft_descriptor_phone(self, soft_descriptor_phone):
        """Sets the soft_descriptor_phone of this ProxyCreatePayment.

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.  Verifi and Orbital determine how to format this string. For more information, contact your payment gateway.   # noqa: E501

        :param soft_descriptor_phone: The soft_descriptor_phone of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if soft_descriptor_phone is not None and len(soft_descriptor_phone) > 20:
            raise ValueError("Invalid value for `soft_descriptor_phone`, length must be less than or equal to `20`")  # noqa: E501
        if soft_descriptor_phone is not None and len(soft_descriptor_phone) < 0:
            raise ValueError("Invalid value for `soft_descriptor_phone`, length must be greater than or equal to `0`")  # noqa: E501

        self._soft_descriptor_phone = soft_descriptor_phone

    @property
    def status(self):
        """Gets the status of this ProxyCreatePayment.  # noqa: E501

        The status of the payment in Zuora. The value depends on the type of payment.  For electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.   # noqa: E501

        :return: The status of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyCreatePayment.

        The status of the payment in Zuora. The value depends on the type of payment.  For electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.   # noqa: E501

        :param status: The status of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Processed", "Error", "Voided", "Canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this ProxyCreatePayment.  # noqa: E501

        The type of the payment, whether the payment is external or electronic.   # noqa: E501

        :return: The type of this ProxyCreatePayment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxyCreatePayment.

        The type of the payment, whether the payment is external or electronic.   # noqa: E501

        :param type: The type of this ProxyCreatePayment.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["External", "Electronic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCreatePayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCreatePayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
