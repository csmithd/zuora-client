# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_entities_type import GETEntitiesType  # noqa: F401,E501


class GETEntitiesUserAccessibleResponseType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entities': 'list[GETEntitiesType]',
        'success': 'bool'
    }

    attribute_map = {
        'entities': 'entities',
        'success': 'success'
    }

    def __init__(self, entities=None, success=None):  # noqa: E501
        """GETEntitiesUserAccessibleResponseType - a model defined in Swagger"""  # noqa: E501

        self._entities = None
        self._success = None
        self.discriminator = None

        if entities is not None:
            self.entities = entities
        if success is not None:
            self.success = success

    @property
    def entities(self):
        """Gets the entities of this GETEntitiesUserAccessibleResponseType.  # noqa: E501

        Container for one or more entities in a multi-entity hierarchy.   # noqa: E501

        :return: The entities of this GETEntitiesUserAccessibleResponseType.  # noqa: E501
        :rtype: list[GETEntitiesType]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this GETEntitiesUserAccessibleResponseType.

        Container for one or more entities in a multi-entity hierarchy.   # noqa: E501

        :param entities: The entities of this GETEntitiesUserAccessibleResponseType.  # noqa: E501
        :type: list[GETEntitiesType]
        """

        self._entities = entities

    @property
    def success(self):
        """Gets the success of this GETEntitiesUserAccessibleResponseType.  # noqa: E501

        Returns `true` if the request is successful.   # noqa: E501

        :return: The success of this GETEntitiesUserAccessibleResponseType.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GETEntitiesUserAccessibleResponseType.

        Returns `true` if the request is successful.   # noqa: E501

        :param success: The success of this GETEntitiesUserAccessibleResponseType.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETEntitiesUserAccessibleResponseType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETEntitiesUserAccessibleResponseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
