# coding: utf-8




import pprint
import re  # noqa: F401

import six


class GETRefundItemPartType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'credit_memo_item_id': 'str',
        'credit_tax_item_id': 'str',
        'id': 'str',
        'success': 'bool',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'amount': 'amount',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'credit_memo_item_id': 'creditMemoItemId',
        'credit_tax_item_id': 'creditTaxItemId',
        'id': 'id',
        'success': 'success',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate'
    }

    def __init__(self, amount=None, created_by_id=None, created_date=None, credit_memo_item_id=None, credit_tax_item_id=None, id=None, success=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """GETRefundItemPartType - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._created_by_id = None
        self._created_date = None
        self._credit_memo_item_id = None
        self._credit_tax_item_id = None
        self._id = None
        self._success = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if credit_memo_item_id is not None:
            self.credit_memo_item_id = credit_memo_item_id
        if credit_tax_item_id is not None:
            self.credit_tax_item_id = credit_tax_item_id
        if id is not None:
            self.id = id
        if success is not None:
            self.success = success
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def amount(self):
        """Gets the amount of this GETRefundItemPartType.  # noqa: E501

        The amount of the refund part item.   # noqa: E501

        :return: The amount of this GETRefundItemPartType.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GETRefundItemPartType.

        The amount of the refund part item.   # noqa: E501

        :param amount: The amount of this GETRefundItemPartType.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GETRefundItemPartType.  # noqa: E501

        The ID of the Zuora user who created the refund part item.   # noqa: E501

        :return: The created_by_id of this GETRefundItemPartType.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GETRefundItemPartType.

        The ID of the Zuora user who created the refund part item.   # noqa: E501

        :param created_by_id: The created_by_id of this GETRefundItemPartType.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this GETRefundItemPartType.  # noqa: E501

        The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.   # noqa: E501

        :return: The created_date of this GETRefundItemPartType.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GETRefundItemPartType.

        The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.   # noqa: E501

        :param created_date: The created_date of this GETRefundItemPartType.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def credit_memo_item_id(self):
        """Gets the credit_memo_item_id of this GETRefundItemPartType.  # noqa: E501

        The ID of the credit memo item associated with the refund part item.   # noqa: E501

        :return: The credit_memo_item_id of this GETRefundItemPartType.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_item_id

    @credit_memo_item_id.setter
    def credit_memo_item_id(self, credit_memo_item_id):
        """Sets the credit_memo_item_id of this GETRefundItemPartType.

        The ID of the credit memo item associated with the refund part item.   # noqa: E501

        :param credit_memo_item_id: The credit_memo_item_id of this GETRefundItemPartType.  # noqa: E501
        :type: str
        """

        self._credit_memo_item_id = credit_memo_item_id

    @property
    def credit_tax_item_id(self):
        """Gets the credit_tax_item_id of this GETRefundItemPartType.  # noqa: E501

        The ID of the credit memo taxation item associated with the refund part item.   # noqa: E501

        :return: The credit_tax_item_id of this GETRefundItemPartType.  # noqa: E501
        :rtype: str
        """
        return self._credit_tax_item_id

    @credit_tax_item_id.setter
    def credit_tax_item_id(self, credit_tax_item_id):
        """Sets the credit_tax_item_id of this GETRefundItemPartType.

        The ID of the credit memo taxation item associated with the refund part item.   # noqa: E501

        :param credit_tax_item_id: The credit_tax_item_id of this GETRefundItemPartType.  # noqa: E501
        :type: str
        """

        self._credit_tax_item_id = credit_tax_item_id

    @property
    def id(self):
        """Gets the id of this GETRefundItemPartType.  # noqa: E501

        The ID of the refund part item.   # noqa: E501

        :return: The id of this GETRefundItemPartType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETRefundItemPartType.

        The ID of the refund part item.   # noqa: E501

        :param id: The id of this GETRefundItemPartType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def success(self):
        """Gets the success of this GETRefundItemPartType.  # noqa: E501

        Returns `true` if the request was processed successfully.  # noqa: E501

        :return: The success of this GETRefundItemPartType.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GETRefundItemPartType.

        Returns `true` if the request was processed successfully.  # noqa: E501

        :param success: The success of this GETRefundItemPartType.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this GETRefundItemPartType.  # noqa: E501

        The ID of the Zuora user who last updated the refund part item.   # noqa: E501

        :return: The updated_by_id of this GETRefundItemPartType.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this GETRefundItemPartType.

        The ID of the Zuora user who last updated the refund part item.   # noqa: E501

        :param updated_by_id: The updated_by_id of this GETRefundItemPartType.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this GETRefundItemPartType.  # noqa: E501

        The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.   # noqa: E501

        :return: The updated_date of this GETRefundItemPartType.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GETRefundItemPartType.

        The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.   # noqa: E501

        :param updated_date: The updated_date of this GETRefundItemPartType.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETRefundItemPartType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETRefundItemPartType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
