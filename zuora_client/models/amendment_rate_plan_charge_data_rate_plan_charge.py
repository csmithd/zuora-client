# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.rate_plan_charge_object_custom_fields import RatePlanChargeObjectCustomFields  # noqa: F401,E501


class AmendmentRatePlanChargeDataRatePlanCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bill_cycle_type': 'str',
        'billing_period': 'str',
        'billing_timing': 'str',
        'charge_number': 'str',
        'discount_amount': 'str',
        'discount_percentage': 'str',
        'end_date_condition': 'str',
        'list_price_base': 'str',
        'price': 'str',
        'price_change_option': 'str',
        'price_increase_percentage': 'str',
        'product_rate_plan_charge_id': 'str',
        'quantity': 'float',
        'rating_group': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'str',
        'revenue_recognition_rule_name': 'str',
        'specific_billing_period': 'int',
        'specific_end_date': 'date',
        'trigger_date': 'date',
        'trigger_event': 'str',
        'up_to_periods': 'int',
        'up_to_periods_type': 'str',
        'weekly_bill_cycle_day': 'str'
    }

    attribute_map = {
        'bill_cycle_type': 'BillCycleType',
        'billing_period': 'BillingPeriod',
        'billing_timing': 'BillingTiming',
        'charge_number': 'ChargeNumber',
        'discount_amount': 'DiscountAmount',
        'discount_percentage': 'DiscountPercentage',
        'end_date_condition': 'EndDateCondition',
        'list_price_base': 'ListPriceBase',
        'price': 'Price',
        'price_change_option': 'PriceChangeOption',
        'price_increase_percentage': 'PriceIncreasePercentage',
        'product_rate_plan_charge_id': 'ProductRatePlanChargeId',
        'quantity': 'Quantity',
        'rating_group': 'RatingGroup',
        'rev_rec_code': 'RevRecCode',
        'rev_rec_trigger_condition': 'RevRecTriggerCondition',
        'revenue_recognition_rule_name': 'RevenueRecognitionRuleName',
        'specific_billing_period': 'SpecificBillingPeriod',
        'specific_end_date': 'SpecificEndDate',
        'trigger_date': 'TriggerDate',
        'trigger_event': 'TriggerEvent',
        'up_to_periods': 'UpToPeriods',
        'up_to_periods_type': 'UpToPeriodsType',
        'weekly_bill_cycle_day': 'WeeklyBillCycleDay'
    }

    def __init__(self, bill_cycle_type=None, billing_period=None, billing_timing=None, charge_number=None, discount_amount=None, discount_percentage=None, end_date_condition=None, list_price_base=None, price=None, price_change_option=None, price_increase_percentage=None, product_rate_plan_charge_id=None, quantity=None, rating_group=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, specific_billing_period=None, specific_end_date=None, trigger_date=None, trigger_event=None, up_to_periods=None, up_to_periods_type=None, weekly_bill_cycle_day=None):  # noqa: E501
        """AmendmentRatePlanChargeDataRatePlanCharge - a model defined in Swagger"""  # noqa: E501

        self._bill_cycle_type = None
        self._billing_period = None
        self._billing_timing = None
        self._charge_number = None
        self._discount_amount = None
        self._discount_percentage = None
        self._end_date_condition = None
        self._list_price_base = None
        self._price = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._product_rate_plan_charge_id = None
        self._quantity = None
        self._rating_group = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._specific_billing_period = None
        self._specific_end_date = None
        self._trigger_date = None
        self._trigger_event = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._weekly_bill_cycle_day = None
        self.discriminator = None

        if bill_cycle_type is not None:
            self.bill_cycle_type = bill_cycle_type
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charge_number is not None:
            self.charge_number = charge_number
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if price is not None:
            self.price = price
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if quantity is not None:
            self.quantity = quantity
        if rating_group is not None:
            self.rating_group = rating_group
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if trigger_date is not None:
            self.trigger_date = trigger_date
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if weekly_bill_cycle_day is not None:
            self.weekly_bill_cycle_day = weekly_bill_cycle_day

    @property
    def bill_cycle_type(self):
        """Gets the bill_cycle_type of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies how to determine the billing day for the charge.   **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :return: The bill_cycle_type of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_type

    @bill_cycle_type.setter
    def bill_cycle_type(self, bill_cycle_type):
        """Sets the bill_cycle_type of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies how to determine the billing day for the charge.   **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :param bill_cycle_type: The bill_cycle_type of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._bill_cycle_type = bill_cycle_type

    @property
    def billing_period(self):
        """Gets the billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Allows billing period to be overridden on rate plan charge.    **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :return: The billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.

         Allows billing period to be overridden on rate plan charge.    **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :param billing_period: The billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_period = billing_period

    @property
    def billing_timing(self):
        """Gets the billing_timing of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.   **Character limit**:   **Values**: one of the following:  - I`n Advance` - `In Arrears` **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The billing_timing of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this AmendmentRatePlanChargeDataRatePlanCharge.

         The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.   **Character limit**:   **Values**: one of the following:  - I`n Advance` - `In Arrears` **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param billing_timing: The billing_timing of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_timing = billing_timing

    @property
    def charge_number(self):
        """Gets the charge_number of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         A unique number that identifies the charge. This number is returned as a string.   **Character limit**: 50   **Values**: one of the following:  - automatically generated if left null - a unique number of 50 characters or fewer   # noqa: E501

        :return: The charge_number of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this AmendmentRatePlanChargeDataRatePlanCharge.

         A unique number that identifies the charge. This number is returned as a string.   **Character limit**: 50   **Values**: one of the following:  - automatically generated if left null - a unique number of 50 characters or fewer   # noqa: E501

        :param charge_number: The charge_number of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def discount_amount(self):
        """Gets the discount_amount of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:  - Price - IncludedUnits - DiscountPercentage - OveragePrice   **Character limit**: 16   **Values**: a valid currency amount   # noqa: E501

        :return: The discount_amount of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:  - Price - IncludedUnits - DiscountPercentage - OveragePrice   **Character limit**: 16   **Values**: a valid currency amount   # noqa: E501

        :param discount_amount: The discount_amount of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._discount_amount = discount_amount

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Query Filter   # noqa: E501

        :return: The discount_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.

         Query Filter   # noqa: E501

        :param discount_percentage: The discount_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._discount_percentage = discount_percentage

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.    **Values**: one of the following:  - `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value. - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. - `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.    **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.   # noqa: E501

        :return: The end_date_condition of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this AmendmentRatePlanChargeDataRatePlanCharge.

         Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.    **Values**: one of the following:  - `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value. - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. - `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.    **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.   # noqa: E501

        :param end_date_condition: The end_date_condition of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._end_date_condition = end_date_condition

    @property
    def list_price_base(self):
        """Gets the list_price_base of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

        The list price base for the product rate plan charge.   **Values**: one of the following:  - `Per Month` - `Per Billing Period` - `Per Week`   # noqa: E501

        :return: The list_price_base of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this AmendmentRatePlanChargeDataRatePlanCharge.

        The list price base for the product rate plan charge.   **Values**: one of the following:  - `Per Month` - `Per Billing Period` - `Per Week`   # noqa: E501

        :param list_price_base: The list_price_base of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._list_price_base = list_price_base

    @property
    def price(self):
        """Gets the price of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Query Filter   # noqa: E501

        :return: The price of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AmendmentRatePlanChargeDataRatePlanCharge.

         Query Filter   # noqa: E501

        :param price: The price of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def price_change_option(self):
        """Gets the price_change_option of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Applies an automatic price change when a termed subscription is renewed.   **Character limit**:   **Values**: one of the following:  - `NoChange` (default) - `SpecificPercentageValue` - `UseLatestProductCatalogPricing`   # noqa: E501

        :return: The price_change_option of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this AmendmentRatePlanChargeDataRatePlanCharge.

         Applies an automatic price change when a termed subscription is renewed.   **Character limit**:   **Values**: one of the following:  - `NoChange` (default) - `SpecificPercentageValue` - `UseLatestProductCatalogPricing`   # noqa: E501

        :param price_change_option: The price_change_option of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.   **Character limit**: 16   **Values**: a decimal value between -100 and 100   # noqa: E501

        :return: The price_increase_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.   **Character limit**: 16   **Values**: a decimal value between -100 and 100   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

          # noqa: E501

        :return: The product_rate_plan_charge_id of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this AmendmentRatePlanChargeDataRatePlanCharge.

          # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """
        if product_rate_plan_charge_id is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def quantity(self):
        """Gets the quantity of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.   **Character limit**: 16   **Values**: a valid quantity value   # noqa: E501

        :return: The quantity of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AmendmentRatePlanChargeDataRatePlanCharge.

         The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.   **Character limit**: 16   **Values**: a valid quantity value   # noqa: E501

        :param quantity: The quantity of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def rating_group(self):
        """Gets the rating_group of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

        Specifies a rating group based on which usage records are rated. **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Values:  * `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.        * `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  * `ByUsageRecord`: The rating is based on each usage record. * `ByUsageUpload`: The rating is based on all the usages in a uploaded usage file (.xls or .csv).  **Note:**  The `ByBillingPeriod` value can be applied for all charge models. The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :return: The rating_group of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this AmendmentRatePlanChargeDataRatePlanCharge.

        Specifies a rating group based on which usage records are rated. **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Values:  * `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.        * `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  * `ByUsageRecord`: The rating is based on each usage record. * `ByUsageUpload`: The rating is based on all the usages in a uploaded usage file (.xls or .csv).  **Note:**  The `ByBillingPeriod` value can be applied for all charge models. The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :param rating_group: The rating_group of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rating_group = rating_group

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Associates this product rate plan charge with a specific revenue recognition code.   **Character limit**: 70   **Values**: a valid revenue recognition code   # noqa: E501

        :return: The rev_rec_code of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this AmendmentRatePlanChargeDataRatePlanCharge.

         Associates this product rate plan charge with a specific revenue recognition code.   **Character limit**: 70   **Values**: a valid revenue recognition code   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies when revenue recognition begins.   **Character limit**: 22   **Values**: one of the following:  -  `ContractEffectiveDate`  -  `ServiceActivationDate`  -  `CustomerAcceptanceDate`    # noqa: E501

        :return: The rev_rec_trigger_condition of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies when revenue recognition begins.   **Character limit**: 22   **Values**: one of the following:  -  `ContractEffectiveDate`  -  `ServiceActivationDate`  -  `CustomerAcceptanceDate`    # noqa: E501

        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.    **Character limit**: n/a   **Values**: name of an active Revenue Recognition Rule   # noqa: E501

        :return: The revenue_recognition_rule_name of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.    **Character limit**: n/a   **Values**: name of an active Revenue Recognition Rule   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :return: The specific_billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.

         Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         The specific date on which the charge ends, in `yyyy-mm-dd` format.   **Character limit**: 29    **Note**:  - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`. - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :return: The specific_end_date of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this AmendmentRatePlanChargeDataRatePlanCharge.

         The specific date on which the charge ends, in `yyyy-mm-dd` format.   **Character limit**: 29    **Note**:  - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`. - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :param specific_end_date: The specific_end_date of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def trigger_date(self):
        """Gets the trigger_date of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.   **Character limit**: 29    # noqa: E501

        :return: The trigger_date of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._trigger_date

    @trigger_date.setter
    def trigger_date(self, trigger_date):
        """Sets the trigger_date of this AmendmentRatePlanChargeDataRatePlanCharge.

         The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.   **Character limit**: 29    # noqa: E501

        :param trigger_date: The trigger_date of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._trigger_date = trigger_date

    @property
    def trigger_event(self):
        """Gets the trigger_event of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies when to start billing the customer for the charge. **Note: **This field can be passed through the subscribe and amend calls and will override the default value set on the Product Rate Plan Charge.   **Character limit**: 18   **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:  - `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance `is when the customer accepts the services or products for a subscription. - SpecificDate is valid only on the RatePlanCharge.   # noqa: E501

        :return: The trigger_event of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies when to start billing the customer for the charge. **Note: **This field can be passed through the subscribe and amend calls and will override the default value set on the Product Rate Plan Charge.   **Character limit**: 18   **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:  - `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance `is when the customer accepts the services or products for a subscription. - SpecificDate is valid only on the RatePlanCharge.   # noqa: E501

        :param trigger_event: The trigger_event of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._trigger_event = trigger_event

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`  **Note**:  - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`. - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`. - If you override the value in this field, enter a whole number between 0 and 65535, exclusive. - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :return: The up_to_periods of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`  **Note**:  - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`. - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`. - If you override the value in this field, enter a whole number between 0 and 65535, exclusive. - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :param up_to_periods: The up_to_periods of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.   **Values**: one of the following:  - `Billing Periods` (default) - `Days` - `Weeks` - `Months` - `Years`   **Note**:  - You must use this field together with the `UpToPeriods` field to specify the time period. - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.   # noqa: E501

        :return: The up_to_periods_type of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this AmendmentRatePlanChargeDataRatePlanCharge.

         The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.   **Values**: one of the following:  - `Billing Periods` (default) - `Days` - `Weeks` - `Months` - `Years`   **Note**:  - You must use this field together with the `UpToPeriods` field to specify the time period. - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.   # noqa: E501

        :param up_to_periods_type: The up_to_periods_type of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def weekly_bill_cycle_day(self):
        """Gets the weekly_bill_cycle_day of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies which day of the week as the bill cycle day (BCD) for the charge. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).     **Values**: one of the following:  - `Sunday` - `Monday` - `Tuesday` - `Wednesday` - `Thursday` - `Friday` - `Saturday`   # noqa: E501

        :return: The weekly_bill_cycle_day of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._weekly_bill_cycle_day

    @weekly_bill_cycle_day.setter
    def weekly_bill_cycle_day(self, weekly_bill_cycle_day):
        """Sets the weekly_bill_cycle_day of this AmendmentRatePlanChargeDataRatePlanCharge.

         Specifies which day of the week as the bill cycle day (BCD) for the charge. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).     **Values**: one of the following:  - `Sunday` - `Monday` - `Tuesday` - `Wednesday` - `Thursday` - `Friday` - `Saturday`   # noqa: E501

        :param weekly_bill_cycle_day: The weekly_bill_cycle_day of this AmendmentRatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._weekly_bill_cycle_day = weekly_bill_cycle_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmendmentRatePlanChargeDataRatePlanCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmendmentRatePlanChargeDataRatePlanCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
