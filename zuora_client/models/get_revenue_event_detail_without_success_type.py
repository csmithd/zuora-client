# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_revenue_item_type import GETRevenueItemType  # noqa: F401,E501
from zuora_client.models.revenue_event_object_custom_fields import RevenueEventObjectCustomFields  # noqa: F401,E501


class GETRevenueEventDetailWithoutSuccessType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_on': 'datetime',
        'currency': 'str',
        'event_type': 'str',
        'notes': 'str',
        'number': 'str',
        'recognition_end': 'date',
        'recognition_start': 'date',
        'revenue_items': 'list[GETRevenueItemType]',
        'subscription_charge_id': 'str',
        'subscription_id': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created_on': 'createdOn',
        'currency': 'currency',
        'event_type': 'eventType',
        'notes': 'notes',
        'number': 'number',
        'recognition_end': 'recognitionEnd',
        'recognition_start': 'recognitionStart',
        'revenue_items': 'revenueItems',
        'subscription_charge_id': 'subscriptionChargeId',
        'subscription_id': 'subscriptionId'
    }

    def __init__(self, account_id=None, created_on=None, currency=None, event_type=None, notes=None, number=None, recognition_end=None, recognition_start=None, revenue_items=None, subscription_charge_id=None, subscription_id=None):  # noqa: E501
        """GETRevenueEventDetailWithoutSuccessType - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._created_on = None
        self._currency = None
        self._event_type = None
        self._notes = None
        self._number = None
        self._recognition_end = None
        self._recognition_start = None
        self._revenue_items = None
        self._subscription_charge_id = None
        self._subscription_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if created_on is not None:
            self.created_on = created_on
        if currency is not None:
            self.currency = currency
        if event_type is not None:
            self.event_type = event_type
        if notes is not None:
            self.notes = notes
        if number is not None:
            self.number = number
        if recognition_end is not None:
            self.recognition_end = recognition_end
        if recognition_start is not None:
            self.recognition_start = recognition_start
        if revenue_items is not None:
            self.revenue_items = revenue_items
        if subscription_charge_id is not None:
            self.subscription_charge_id = subscription_charge_id
        if subscription_id is not None:
            self.subscription_id = subscription_id

    @property
    def account_id(self):
        """Gets the account_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        An account ID.   # noqa: E501

        :return: The account_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GETRevenueEventDetailWithoutSuccessType.

        An account ID.   # noqa: E501

        :param account_id: The account_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_on(self):
        """Gets the created_on of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The date when the record was created in YYYY-MM-DD HH:MM:SS format.   # noqa: E501

        :return: The created_on of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this GETRevenueEventDetailWithoutSuccessType.

        The date when the record was created in YYYY-MM-DD HH:MM:SS format.   # noqa: E501

        :param created_on: The created_on of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def currency(self):
        """Gets the currency of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The type of currency used.  # noqa: E501

        :return: The currency of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETRevenueEventDetailWithoutSuccessType.

        The type of currency used.  # noqa: E501

        :param currency: The currency of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def event_type(self):
        """Gets the event_type of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.  Note that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Invoice Settlement feature.   # noqa: E501

        :return: The event_type of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GETRevenueEventDetailWithoutSuccessType.

        Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.  Note that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Invoice Settlement feature.   # noqa: E501

        :param event_type: The event_type of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Invoice Posted", "Invoice Item Adjustment Created", "Invoice Canceled", "Invoice Item Adjustment Canceled", "Revenue Distributed", "Credit Memo Posted", "Debit Memo Posted"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def notes(self):
        """Gets the notes of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        Additional information about this record.   # noqa: E501

        :return: The notes of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GETRevenueEventDetailWithoutSuccessType.

        Additional information about this record.   # noqa: E501

        :param notes: The notes of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def number(self):
        """Gets the number of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The revenue event number created when a revenue event occurs.   # noqa: E501

        :return: The number of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GETRevenueEventDetailWithoutSuccessType.

        The revenue event number created when a revenue event occurs.   # noqa: E501

        :param number: The number of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def recognition_end(self):
        """Gets the recognition_end of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The end date of a recognition period in YYYY-MM-DD format.   The maximum difference of the recognitionStart and recognitionEnd date fields is equal to 250 multiplied by the length of an accounting period.   # noqa: E501

        :return: The recognition_end of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: date
        """
        return self._recognition_end

    @recognition_end.setter
    def recognition_end(self, recognition_end):
        """Sets the recognition_end of this GETRevenueEventDetailWithoutSuccessType.

        The end date of a recognition period in YYYY-MM-DD format.   The maximum difference of the recognitionStart and recognitionEnd date fields is equal to 250 multiplied by the length of an accounting period.   # noqa: E501

        :param recognition_end: The recognition_end of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: date
        """

        self._recognition_end = recognition_end

    @property
    def recognition_start(self):
        """Gets the recognition_start of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The start date of a recognition period in YYYY-MM-DD format.   # noqa: E501

        :return: The recognition_start of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: date
        """
        return self._recognition_start

    @recognition_start.setter
    def recognition_start(self, recognition_start):
        """Sets the recognition_start of this GETRevenueEventDetailWithoutSuccessType.

        The start date of a recognition period in YYYY-MM-DD format.   # noqa: E501

        :param recognition_start: The recognition_start of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: date
        """

        self._recognition_start = recognition_start

    @property
    def revenue_items(self):
        """Gets the revenue_items of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        Revenue items are listed in ascending order by the accounting period start date.   # noqa: E501

        :return: The revenue_items of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: list[GETRevenueItemType]
        """
        return self._revenue_items

    @revenue_items.setter
    def revenue_items(self, revenue_items):
        """Sets the revenue_items of this GETRevenueEventDetailWithoutSuccessType.

        Revenue items are listed in ascending order by the accounting period start date.   # noqa: E501

        :param revenue_items: The revenue_items of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: list[GETRevenueItemType]
        """

        self._revenue_items = revenue_items

    @property
    def subscription_charge_id(self):
        """Gets the subscription_charge_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The original subscription charge ID.   # noqa: E501

        :return: The subscription_charge_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._subscription_charge_id

    @subscription_charge_id.setter
    def subscription_charge_id(self, subscription_charge_id):
        """Sets the subscription_charge_id of this GETRevenueEventDetailWithoutSuccessType.

        The original subscription charge ID.   # noqa: E501

        :param subscription_charge_id: The subscription_charge_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """

        self._subscription_charge_id = subscription_charge_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501

        The original subscription ID.   # noqa: E501

        :return: The subscription_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this GETRevenueEventDetailWithoutSuccessType.

        The original subscription ID.   # noqa: E501

        :param subscription_id: The subscription_id of this GETRevenueEventDetailWithoutSuccessType.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETRevenueEventDetailWithoutSuccessType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETRevenueEventDetailWithoutSuccessType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
