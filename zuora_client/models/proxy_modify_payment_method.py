# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.payment_method_object_custom_fields import PaymentMethodObjectCustomFields  # noqa: F401,E501


class ProxyModifyPaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'ach_aba_code': 'str',
        'ach_account_name': 'str',
        'ach_account_type': 'str',
        'ach_address1': 'str',
        'ach_address2': 'str',
        'ach_bank_name': 'str',
        'ach_city': 'str',
        'ach_country': 'str',
        'ach_postal_code': 'str',
        'ach_state': 'str',
        'bank_branch_code': 'str',
        'bank_check_digit': 'str',
        'bank_transfer_type': 'str',
        'business_identification_code': 'str',
        'city': 'str',
        'company_name': 'str',
        'country': 'str',
        'credit_card_address1': 'str',
        'credit_card_address2': 'str',
        'credit_card_city': 'str',
        'credit_card_country': 'str',
        'credit_card_expiration_month': 'int',
        'credit_card_expiration_year': 'int',
        'credit_card_holder_name': 'str',
        'credit_card_postal_code': 'str',
        'credit_card_security_code': 'str',
        'credit_card_state': 'str',
        'credit_card_type': 'str',
        'device_session_id': 'str',
        'email': 'str',
        'existing_mandate': 'str',
        'first_name': 'str',
        'iban': 'str',
        'ip_address': 'str',
        'identity_number': 'str',
        'is_company': 'bool',
        'last_name': 'str',
        'last_transaction_date_time': 'datetime',
        'mandate_creation_date': 'date',
        'mandate_id': 'str',
        'mandate_received': 'str',
        'mandate_update_date': 'date',
        'max_consecutive_payment_failures': 'int',
        'num_consecutive_failures': 'int',
        'payment_method_status': 'str',
        'payment_retry_window': 'int',
        'phone': 'str',
        'postal_code': 'str',
        'second_token_id': 'str',
        'state': 'str',
        'street_name': 'str',
        'street_number': 'str',
        'use_default_retry_rule': 'bool'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'ach_aba_code': 'AchAbaCode',
        'ach_account_name': 'AchAccountName',
        'ach_account_type': 'AchAccountType',
        'ach_address1': 'AchAddress1',
        'ach_address2': 'AchAddress2',
        'ach_bank_name': 'AchBankName',
        'ach_city': 'AchCity',
        'ach_country': 'AchCountry',
        'ach_postal_code': 'AchPostalCode',
        'ach_state': 'AchState',
        'bank_branch_code': 'BankBranchCode',
        'bank_check_digit': 'BankCheckDigit',
        'bank_transfer_type': 'BankTransferType',
        'business_identification_code': 'BusinessIdentificationCode',
        'city': 'City',
        'company_name': 'CompanyName',
        'country': 'Country',
        'credit_card_address1': 'CreditCardAddress1',
        'credit_card_address2': 'CreditCardAddress2',
        'credit_card_city': 'CreditCardCity',
        'credit_card_country': 'CreditCardCountry',
        'credit_card_expiration_month': 'CreditCardExpirationMonth',
        'credit_card_expiration_year': 'CreditCardExpirationYear',
        'credit_card_holder_name': 'CreditCardHolderName',
        'credit_card_postal_code': 'CreditCardPostalCode',
        'credit_card_security_code': 'CreditCardSecurityCode',
        'credit_card_state': 'CreditCardState',
        'credit_card_type': 'CreditCardType',
        'device_session_id': 'DeviceSessionId',
        'email': 'Email',
        'existing_mandate': 'ExistingMandate',
        'first_name': 'FirstName',
        'iban': 'IBAN',
        'ip_address': 'IPAddress',
        'identity_number': 'IdentityNumber',
        'is_company': 'IsCompany',
        'last_name': 'LastName',
        'last_transaction_date_time': 'LastTransactionDateTime',
        'mandate_creation_date': 'MandateCreationDate',
        'mandate_id': 'MandateID',
        'mandate_received': 'MandateReceived',
        'mandate_update_date': 'MandateUpdateDate',
        'max_consecutive_payment_failures': 'MaxConsecutivePaymentFailures',
        'num_consecutive_failures': 'NumConsecutiveFailures',
        'payment_method_status': 'PaymentMethodStatus',
        'payment_retry_window': 'PaymentRetryWindow',
        'phone': 'Phone',
        'postal_code': 'PostalCode',
        'second_token_id': 'SecondTokenId',
        'state': 'State',
        'street_name': 'StreetName',
        'street_number': 'StreetNumber',
        'use_default_retry_rule': 'UseDefaultRetryRule'
    }

    def __init__(self, account_id=None, ach_aba_code=None, ach_account_name=None, ach_account_type=None, ach_address1=None, ach_address2=None, ach_bank_name=None, ach_city=None, ach_country=None, ach_postal_code=None, ach_state=None, bank_branch_code=None, bank_check_digit=None, bank_transfer_type=None, business_identification_code=None, city=None, company_name=None, country=None, credit_card_address1=None, credit_card_address2=None, credit_card_city=None, credit_card_country=None, credit_card_expiration_month=None, credit_card_expiration_year=None, credit_card_holder_name=None, credit_card_postal_code=None, credit_card_security_code=None, credit_card_state=None, credit_card_type=None, device_session_id=None, email=None, existing_mandate=None, first_name=None, iban=None, ip_address=None, identity_number=None, is_company=False, last_name=None, last_transaction_date_time=None, mandate_creation_date=None, mandate_id=None, mandate_received=None, mandate_update_date=None, max_consecutive_payment_failures=None, num_consecutive_failures=None, payment_method_status=None, payment_retry_window=None, phone=None, postal_code=None, second_token_id=None, state=None, street_name=None, street_number=None, use_default_retry_rule=None):  # noqa: E501
        """ProxyModifyPaymentMethod - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._ach_aba_code = None
        self._ach_account_name = None
        self._ach_account_type = None
        self._ach_address1 = None
        self._ach_address2 = None
        self._ach_bank_name = None
        self._ach_city = None
        self._ach_country = None
        self._ach_postal_code = None
        self._ach_state = None
        self._bank_branch_code = None
        self._bank_check_digit = None
        self._bank_transfer_type = None
        self._business_identification_code = None
        self._city = None
        self._company_name = None
        self._country = None
        self._credit_card_address1 = None
        self._credit_card_address2 = None
        self._credit_card_city = None
        self._credit_card_country = None
        self._credit_card_expiration_month = None
        self._credit_card_expiration_year = None
        self._credit_card_holder_name = None
        self._credit_card_postal_code = None
        self._credit_card_security_code = None
        self._credit_card_state = None
        self._credit_card_type = None
        self._device_session_id = None
        self._email = None
        self._existing_mandate = None
        self._first_name = None
        self._iban = None
        self._ip_address = None
        self._identity_number = None
        self._is_company = None
        self._last_name = None
        self._last_transaction_date_time = None
        self._mandate_creation_date = None
        self._mandate_id = None
        self._mandate_received = None
        self._mandate_update_date = None
        self._max_consecutive_payment_failures = None
        self._num_consecutive_failures = None
        self._payment_method_status = None
        self._payment_retry_window = None
        self._phone = None
        self._postal_code = None
        self._second_token_id = None
        self._state = None
        self._street_name = None
        self._street_number = None
        self._use_default_retry_rule = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if ach_aba_code is not None:
            self.ach_aba_code = ach_aba_code
        if ach_account_name is not None:
            self.ach_account_name = ach_account_name
        if ach_account_type is not None:
            self.ach_account_type = ach_account_type
        if ach_address1 is not None:
            self.ach_address1 = ach_address1
        if ach_address2 is not None:
            self.ach_address2 = ach_address2
        if ach_bank_name is not None:
            self.ach_bank_name = ach_bank_name
        if ach_city is not None:
            self.ach_city = ach_city
        if ach_country is not None:
            self.ach_country = ach_country
        if ach_postal_code is not None:
            self.ach_postal_code = ach_postal_code
        if ach_state is not None:
            self.ach_state = ach_state
        if bank_branch_code is not None:
            self.bank_branch_code = bank_branch_code
        if bank_check_digit is not None:
            self.bank_check_digit = bank_check_digit
        if bank_transfer_type is not None:
            self.bank_transfer_type = bank_transfer_type
        if business_identification_code is not None:
            self.business_identification_code = business_identification_code
        if city is not None:
            self.city = city
        if company_name is not None:
            self.company_name = company_name
        if country is not None:
            self.country = country
        if credit_card_address1 is not None:
            self.credit_card_address1 = credit_card_address1
        if credit_card_address2 is not None:
            self.credit_card_address2 = credit_card_address2
        if credit_card_city is not None:
            self.credit_card_city = credit_card_city
        if credit_card_country is not None:
            self.credit_card_country = credit_card_country
        if credit_card_expiration_month is not None:
            self.credit_card_expiration_month = credit_card_expiration_month
        if credit_card_expiration_year is not None:
            self.credit_card_expiration_year = credit_card_expiration_year
        if credit_card_holder_name is not None:
            self.credit_card_holder_name = credit_card_holder_name
        if credit_card_postal_code is not None:
            self.credit_card_postal_code = credit_card_postal_code
        if credit_card_security_code is not None:
            self.credit_card_security_code = credit_card_security_code
        if credit_card_state is not None:
            self.credit_card_state = credit_card_state
        if credit_card_type is not None:
            self.credit_card_type = credit_card_type
        if device_session_id is not None:
            self.device_session_id = device_session_id
        if email is not None:
            self.email = email
        if existing_mandate is not None:
            self.existing_mandate = existing_mandate
        if first_name is not None:
            self.first_name = first_name
        if iban is not None:
            self.iban = iban
        if ip_address is not None:
            self.ip_address = ip_address
        if identity_number is not None:
            self.identity_number = identity_number
        if is_company is not None:
            self.is_company = is_company
        if last_name is not None:
            self.last_name = last_name
        if last_transaction_date_time is not None:
            self.last_transaction_date_time = last_transaction_date_time
        if mandate_creation_date is not None:
            self.mandate_creation_date = mandate_creation_date
        if mandate_id is not None:
            self.mandate_id = mandate_id
        if mandate_received is not None:
            self.mandate_received = mandate_received
        if mandate_update_date is not None:
            self.mandate_update_date = mandate_update_date
        if max_consecutive_payment_failures is not None:
            self.max_consecutive_payment_failures = max_consecutive_payment_failures
        if num_consecutive_failures is not None:
            self.num_consecutive_failures = num_consecutive_failures
        if payment_method_status is not None:
            self.payment_method_status = payment_method_status
        if payment_retry_window is not None:
            self.payment_retry_window = payment_retry_window
        if phone is not None:
            self.phone = phone
        if postal_code is not None:
            self.postal_code = postal_code
        if second_token_id is not None:
            self.second_token_id = second_token_id
        if state is not None:
            self.state = state
        if street_name is not None:
            self.street_name = street_name
        if street_number is not None:
            self.street_number = street_number
        if use_default_retry_rule is not None:
            self.use_default_retry_rule = use_default_retry_rule

    @property
    def account_id(self):
        """Gets the account_id of this ProxyModifyPaymentMethod.  # noqa: E501

         The ID of the customer account associated with this payment method.  **Note:** If a payment method was created without an account ID associated, you can update the payment method to specify an account ID in this operation. However, if a payment method is already associated with a customer account, you can update the payment method to associate it with another account ID. You cannot remove the previous account ID and leave the `AccountId` filed empty in this operation.   # noqa: E501

        :return: The account_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyModifyPaymentMethod.

         The ID of the customer account associated with this payment method.  **Note:** If a payment method was created without an account ID associated, you can update the payment method to specify an account ID in this operation. However, if a payment method is already associated with a customer account, you can update the payment method to associate it with another account ID. You cannot remove the previous account ID and leave the `AccountId` filed empty in this operation.   # noqa: E501

        :param account_id: The account_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def ach_aba_code(self):
        """Gets the ach_aba_code of this ProxyModifyPaymentMethod.  # noqa: E501

         The nine-digit routing number or ABA number used by banks. Use this field for ACH payment methods.  **Character limit**: 9 **Values**: a string of 9 characters or fewer   # noqa: E501

        :return: The ach_aba_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_aba_code

    @ach_aba_code.setter
    def ach_aba_code(self, ach_aba_code):
        """Sets the ach_aba_code of this ProxyModifyPaymentMethod.

         The nine-digit routing number or ABA number used by banks. Use this field for ACH payment methods.  **Character limit**: 9 **Values**: a string of 9 characters or fewer   # noqa: E501

        :param ach_aba_code: The ach_aba_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_aba_code = ach_aba_code

    @property
    def ach_account_name(self):
        """Gets the ach_account_name of this ProxyModifyPaymentMethod.  # noqa: E501

         The name of the account holder, which can be either a person or a company. Use this field for ACH payment methods.  **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :return: The ach_account_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_account_name

    @ach_account_name.setter
    def ach_account_name(self, ach_account_name):
        """Sets the ach_account_name of this ProxyModifyPaymentMethod.

         The name of the account holder, which can be either a person or a company. Use this field for ACH payment methods.  **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :param ach_account_name: The ach_account_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_account_name = ach_account_name

    @property
    def ach_account_type(self):
        """Gets the ach_account_type of this ProxyModifyPaymentMethod.  # noqa: E501

         The type of bank account associated with the ACH payment. Use this field for ACH payment methods.  **Character limit**: 16 **Values**:  - `BusinessChecking` - `Checking` - `Saving`   # noqa: E501

        :return: The ach_account_type of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_account_type

    @ach_account_type.setter
    def ach_account_type(self, ach_account_type):
        """Sets the ach_account_type of this ProxyModifyPaymentMethod.

         The type of bank account associated with the ACH payment. Use this field for ACH payment methods.  **Character limit**: 16 **Values**:  - `BusinessChecking` - `Checking` - `Saving`   # noqa: E501

        :param ach_account_type: The ach_account_type of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_account_type = ach_account_type

    @property
    def ach_address1(self):
        """Gets the ach_address1 of this ProxyModifyPaymentMethod.  # noqa: E501

         Line 1 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.  **Character limit:** **Values:** an address   # noqa: E501

        :return: The ach_address1 of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_address1

    @ach_address1.setter
    def ach_address1(self, ach_address1):
        """Sets the ach_address1 of this ProxyModifyPaymentMethod.

         Line 1 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.  **Character limit:** **Values:** an address   # noqa: E501

        :param ach_address1: The ach_address1 of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_address1 = ach_address1

    @property
    def ach_address2(self):
        """Gets the ach_address2 of this ProxyModifyPaymentMethod.  # noqa: E501

         Line 2 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.  **Character limit:** **Values:** an address   # noqa: E501

        :return: The ach_address2 of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_address2

    @ach_address2.setter
    def ach_address2(self, ach_address2):
        """Sets the ach_address2 of this ProxyModifyPaymentMethod.

         Line 2 for the ACH address. Required on create for the Vantiv payment gateway. Optional for other gateways.  **Character limit:** **Values:** an address   # noqa: E501

        :param ach_address2: The ach_address2 of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_address2 = ach_address2

    @property
    def ach_bank_name(self):
        """Gets the ach_bank_name of this ProxyModifyPaymentMethod.  # noqa: E501

         The name of the bank where the ACH payment account is held. Use this field for ACH payment methods.  **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :return: The ach_bank_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_bank_name

    @ach_bank_name.setter
    def ach_bank_name(self, ach_bank_name):
        """Sets the ach_bank_name of this ProxyModifyPaymentMethod.

         The name of the bank where the ACH payment account is held. Use this field for ACH payment methods.  **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :param ach_bank_name: The ach_bank_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_bank_name = ach_bank_name

    @property
    def ach_city(self):
        """Gets the ach_city of this ProxyModifyPaymentMethod.  # noqa: E501

        The city of the ACH address. Use this field for ACH payment methods. **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 40 **Values**: a string of 40 characters or fewer   # noqa: E501

        :return: The ach_city of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_city

    @ach_city.setter
    def ach_city(self, ach_city):
        """Sets the ach_city of this ProxyModifyPaymentMethod.

        The city of the ACH address. Use this field for ACH payment methods. **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 40 **Values**: a string of 40 characters or fewer   # noqa: E501

        :param ach_city: The ach_city of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_city = ach_city

    @property
    def ach_country(self):
        """Gets the ach_country of this ProxyModifyPaymentMethod.  # noqa: E501

        The country of the ACH address. See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names. Use this field for ACH methods.  **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 44 **Values**: a supported country name   # noqa: E501

        :return: The ach_country of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_country

    @ach_country.setter
    def ach_country(self, ach_country):
        """Sets the ach_country of this ProxyModifyPaymentMethod.

        The country of the ACH address. See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names. Use this field for ACH methods.  **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 44 **Values**: a supported country name   # noqa: E501

        :param ach_country: The ach_country of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_country = ach_country

    @property
    def ach_postal_code(self):
        """Gets the ach_postal_code of this ProxyModifyPaymentMethod.  # noqa: E501

        The billing address's zip code. This field is required only when you define an ACH payment method. **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 20 **Values**: a string of 40 characters or fewer   # noqa: E501

        :return: The ach_postal_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_postal_code

    @ach_postal_code.setter
    def ach_postal_code(self, ach_postal_code):
        """Sets the ach_postal_code of this ProxyModifyPaymentMethod.

        The billing address's zip code. This field is required only when you define an ACH payment method. **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 20 **Values**: a string of 40 characters or fewer   # noqa: E501

        :param ach_postal_code: The ach_postal_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_postal_code = ach_postal_code

    @property
    def ach_state(self):
        """Gets the ach_state of this ProxyModifyPaymentMethod.  # noqa: E501

        The billing address's state. Use this field is if the `ACHCountry` value is either `Canada` or the `US`. State names must be spelled in full. For more information, see the list of [supported state names](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes). This field is required only when you define an ACH payment method. **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 50 **Values**: a valid state name   # noqa: E501

        :return: The ach_state of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ach_state

    @ach_state.setter
    def ach_state(self, ach_state):
        """Sets the ach_state of this ProxyModifyPaymentMethod.

        The billing address's state. Use this field is if the `ACHCountry` value is either `Canada` or the `US`. State names must be spelled in full. For more information, see the list of [supported state names](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes). This field is required only when you define an ACH payment method. **Note**: This field is only specific to the NMI payment gateway.  **Character limit**: 50 **Values**: a valid state name   # noqa: E501

        :param ach_state: The ach_state of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ach_state = ach_state

    @property
    def bank_branch_code(self):
        """Gets the bank_branch_code of this ProxyModifyPaymentMethod.  # noqa: E501

         The branch code of the bank used for direct debit. Use this field for direct debit payment methods.  **Character limit**: 10 **Values**:  string of 10 characters or fewer   # noqa: E501

        :return: The bank_branch_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_branch_code

    @bank_branch_code.setter
    def bank_branch_code(self, bank_branch_code):
        """Sets the bank_branch_code of this ProxyModifyPaymentMethod.

         The branch code of the bank used for direct debit. Use this field for direct debit payment methods.  **Character limit**: 10 **Values**:  string of 10 characters or fewer   # noqa: E501

        :param bank_branch_code: The bank_branch_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_branch_code = bank_branch_code

    @property
    def bank_check_digit(self):
        """Gets the bank_check_digit of this ProxyModifyPaymentMethod.  # noqa: E501

        The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods.  **Character limit**: 4 **Values**:  string of 4 characters or fewer   # noqa: E501

        :return: The bank_check_digit of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_check_digit

    @bank_check_digit.setter
    def bank_check_digit(self, bank_check_digit):
        """Sets the bank_check_digit of this ProxyModifyPaymentMethod.

        The check digit in the international bank account number, which confirms the validity of the account. Use this field for direct debit payment methods.  **Character limit**: 4 **Values**:  string of 4 characters or fewer   # noqa: E501

        :param bank_check_digit: The bank_check_digit of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_check_digit = bank_check_digit

    @property
    def bank_transfer_type(self):
        """Gets the bank_transfer_type of this ProxyModifyPaymentMethod.  # noqa: E501

        The type of direct debit transfer. The value of this field is dependent on the country of the user. This field is only required if the `Type` field is set to `BankTransfer`.   **Values**:       - `AutomatischIncasso` (NL)     - `LastschriftDE` (Germany)     - `LastschriftAT` (Austria)     - `DemandeDePrelevement` (FR)     - `DirectDebitUK` (UK)     - `Domicil` (Belgium)     - `LastschriftCH` (CH)     - `RID` (Italy)     - `OrdenDeDomiciliacion` (Spain)    - `Autogiro` (Sweden)    - `Betalingsservice` (Denmark)   # noqa: E501

        :return: The bank_transfer_type of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_type

    @bank_transfer_type.setter
    def bank_transfer_type(self, bank_transfer_type):
        """Sets the bank_transfer_type of this ProxyModifyPaymentMethod.

        The type of direct debit transfer. The value of this field is dependent on the country of the user. This field is only required if the `Type` field is set to `BankTransfer`.   **Values**:       - `AutomatischIncasso` (NL)     - `LastschriftDE` (Germany)     - `LastschriftAT` (Austria)     - `DemandeDePrelevement` (FR)     - `DirectDebitUK` (UK)     - `Domicil` (Belgium)     - `LastschriftCH` (CH)     - `RID` (Italy)     - `OrdenDeDomiciliacion` (Spain)    - `Autogiro` (Sweden)    - `Betalingsservice` (Denmark)   # noqa: E501

        :param bank_transfer_type: The bank_transfer_type of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """
        if bank_transfer_type is not None and len(bank_transfer_type) > 20:
            raise ValueError("Invalid value for `bank_transfer_type`, length must be less than or equal to `20`")  # noqa: E501

        self._bank_transfer_type = bank_transfer_type

    @property
    def business_identification_code(self):
        """Gets the business_identification_code of this ProxyModifyPaymentMethod.  # noqa: E501

         The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.  **Character limit**: 11 **Values**: string of 11 characters or fewer   # noqa: E501

        :return: The business_identification_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._business_identification_code

    @business_identification_code.setter
    def business_identification_code(self, business_identification_code):
        """Sets the business_identification_code of this ProxyModifyPaymentMethod.

         The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Use this field only for direct debit payments in Switzerland with Global Collect.  **Character limit**: 11 **Values**: string of 11 characters or fewer   # noqa: E501

        :param business_identification_code: The business_identification_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._business_identification_code = business_identification_code

    @property
    def city(self):
        """Gets the city of this ProxyModifyPaymentMethod.  # noqa: E501

         The city of the customer's address. Use this field for direct debit payment methods.  **Character limit**:80 **Values**:  string of 80 characters or fewer   # noqa: E501

        :return: The city of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ProxyModifyPaymentMethod.

         The city of the customer's address. Use this field for direct debit payment methods.  **Character limit**:80 **Values**:  string of 80 characters or fewer   # noqa: E501

        :param city: The city of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this ProxyModifyPaymentMethod.  # noqa: E501

        The name of the company.  Zuora does not recommend that you use this field.   # noqa: E501

        :return: The company_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ProxyModifyPaymentMethod.

        The name of the company.  Zuora does not recommend that you use this field.   # noqa: E501

        :param company_name: The company_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """
        if company_name is not None and len(company_name) > 80:
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `80`")  # noqa: E501

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this ProxyModifyPaymentMethod.  # noqa: E501

         The two-letter country code of the customer's address. Use this field for direct debit payment methods.  **Character limit**: 2 **Values**: a valid country code   # noqa: E501

        :return: The country of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ProxyModifyPaymentMethod.

         The two-letter country code of the customer's address. Use this field for direct debit payment methods.  **Character limit**: 2 **Values**: a valid country code   # noqa: E501

        :param country: The country of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def credit_card_address1(self):
        """Gets the credit_card_address1 of this ProxyModifyPaymentMethod.  # noqa: E501

         The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.  **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The credit_card_address1 of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_address1

    @credit_card_address1.setter
    def credit_card_address1(self, credit_card_address1):
        """Sets the credit_card_address1 of this ProxyModifyPaymentMethod.

         The first line of the card holder's address, which is often a street address or business name. Use this field for credit card and direct debit payment methods.  **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param credit_card_address1: The credit_card_address1 of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_address1 = credit_card_address1

    @property
    def credit_card_address2(self):
        """Gets the credit_card_address2 of this ProxyModifyPaymentMethod.  # noqa: E501

         The second line of the card holder's address. Use this field for credit card and direct debit payment methods.  **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The credit_card_address2 of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_address2

    @credit_card_address2.setter
    def credit_card_address2(self, credit_card_address2):
        """Sets the credit_card_address2 of this ProxyModifyPaymentMethod.

         The second line of the card holder's address. Use this field for credit card and direct debit payment methods.  **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param credit_card_address2: The credit_card_address2 of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_address2 = credit_card_address2

    @property
    def credit_card_city(self):
        """Gets the credit_card_city of this ProxyModifyPaymentMethod.  # noqa: E501

         The city of the card holder's address. Use this field for credit card and direct debit payment methods  **Character limit**: 40 **Values**: a string of 40 characters or fewer   # noqa: E501

        :return: The credit_card_city of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_city

    @credit_card_city.setter
    def credit_card_city(self, credit_card_city):
        """Sets the credit_card_city of this ProxyModifyPaymentMethod.

         The city of the card holder's address. Use this field for credit card and direct debit payment methods  **Character limit**: 40 **Values**: a string of 40 characters or fewer   # noqa: E501

        :param credit_card_city: The credit_card_city of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_city = credit_card_city

    @property
    def credit_card_country(self):
        """Gets the credit_card_country of this ProxyModifyPaymentMethod.  # noqa: E501

         The country of the card holder's address.   # noqa: E501

        :return: The credit_card_country of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_country

    @credit_card_country.setter
    def credit_card_country(self, credit_card_country):
        """Sets the credit_card_country of this ProxyModifyPaymentMethod.

         The country of the card holder's address.   # noqa: E501

        :param credit_card_country: The credit_card_country of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_country = credit_card_country

    @property
    def credit_card_expiration_month(self):
        """Gets the credit_card_expiration_month of this ProxyModifyPaymentMethod.  # noqa: E501

         The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.  **Character limit**: 2 **Values**: a two-digit number, 01 - 12   # noqa: E501

        :return: The credit_card_expiration_month of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_expiration_month

    @credit_card_expiration_month.setter
    def credit_card_expiration_month(self, credit_card_expiration_month):
        """Sets the credit_card_expiration_month of this ProxyModifyPaymentMethod.

         The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.  **Character limit**: 2 **Values**: a two-digit number, 01 - 12   # noqa: E501

        :param credit_card_expiration_month: The credit_card_expiration_month of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: int
        """

        self._credit_card_expiration_month = credit_card_expiration_month

    @property
    def credit_card_expiration_year(self):
        """Gets the credit_card_expiration_year of this ProxyModifyPaymentMethod.  # noqa: E501

         The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.  **Character limit**: 4 **Values**: a four-digit number   # noqa: E501

        :return: The credit_card_expiration_year of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_expiration_year

    @credit_card_expiration_year.setter
    def credit_card_expiration_year(self, credit_card_expiration_year):
        """Sets the credit_card_expiration_year of this ProxyModifyPaymentMethod.

         The expiration month of the credit card or debit card. Use this field for credit card and direct debit payment methods.  **Character limit**: 4 **Values**: a four-digit number   # noqa: E501

        :param credit_card_expiration_year: The credit_card_expiration_year of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: int
        """

        self._credit_card_expiration_year = credit_card_expiration_year

    @property
    def credit_card_holder_name(self):
        """Gets the credit_card_holder_name of this ProxyModifyPaymentMethod.  # noqa: E501

         The full name of the card holder. Use this field for credit card and direct debit payment methods.  **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :return: The credit_card_holder_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_holder_name

    @credit_card_holder_name.setter
    def credit_card_holder_name(self, credit_card_holder_name):
        """Sets the credit_card_holder_name of this ProxyModifyPaymentMethod.

         The full name of the card holder. Use this field for credit card and direct debit payment methods.  **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :param credit_card_holder_name: The credit_card_holder_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_holder_name = credit_card_holder_name

    @property
    def credit_card_postal_code(self):
        """Gets the credit_card_postal_code of this ProxyModifyPaymentMethod.  # noqa: E501

         The billing address's zip code. This field is required only when you define a debit card or credit card payment. **Character limit**: 20 **Values**: a string of 20 characters or fewer   # noqa: E501

        :return: The credit_card_postal_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_postal_code

    @credit_card_postal_code.setter
    def credit_card_postal_code(self, credit_card_postal_code):
        """Sets the credit_card_postal_code of this ProxyModifyPaymentMethod.

         The billing address's zip code. This field is required only when you define a debit card or credit card payment. **Character limit**: 20 **Values**: a string of 20 characters or fewer   # noqa: E501

        :param credit_card_postal_code: The credit_card_postal_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_postal_code = credit_card_postal_code

    @property
    def credit_card_security_code(self):
        """Gets the credit_card_security_code of this ProxyModifyPaymentMethod.  # noqa: E501

         The CVV or CVV2 security code. See [How do I control what information Zuora sends over to the Payment Gateway?](https://knowledgecenter.zuora.com/kb/How_do_I_control_information_sent_to_payment_gateways_when_verifying_payment_methods%3F) for more information. To ensure PCI compliance, this value is not stored and cannot be queried. **Values**: a valid CVV or CVV2 security code   # noqa: E501

        :return: The credit_card_security_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_security_code

    @credit_card_security_code.setter
    def credit_card_security_code(self, credit_card_security_code):
        """Sets the credit_card_security_code of this ProxyModifyPaymentMethod.

         The CVV or CVV2 security code. See [How do I control what information Zuora sends over to the Payment Gateway?](https://knowledgecenter.zuora.com/kb/How_do_I_control_information_sent_to_payment_gateways_when_verifying_payment_methods%3F) for more information. To ensure PCI compliance, this value is not stored and cannot be queried. **Values**: a valid CVV or CVV2 security code   # noqa: E501

        :param credit_card_security_code: The credit_card_security_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_security_code = credit_card_security_code

    @property
    def credit_card_state(self):
        """Gets the credit_card_state of this ProxyModifyPaymentMethod.  # noqa: E501

         The billing address's state. Use this field is if the `CreditCardCountry' value is either Canada or the US. State names must be spelled in full.   # noqa: E501

        :return: The credit_card_state of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_state

    @credit_card_state.setter
    def credit_card_state(self, credit_card_state):
        """Sets the credit_card_state of this ProxyModifyPaymentMethod.

         The billing address's state. Use this field is if the `CreditCardCountry' value is either Canada or the US. State names must be spelled in full.   # noqa: E501

        :param credit_card_state: The credit_card_state of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_state = credit_card_state

    @property
    def credit_card_type(self):
        """Gets the credit_card_type of this ProxyModifyPaymentMethod.  # noqa: E501

        The type of the credit card.  Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The credit_card_type of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_type

    @credit_card_type.setter
    def credit_card_type(self, credit_card_type):
        """Sets the credit_card_type of this ProxyModifyPaymentMethod.

        The type of the credit card.  Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param credit_card_type: The credit_card_type of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_type = credit_card_type

    @property
    def device_session_id(self):
        """Gets the device_session_id of this ProxyModifyPaymentMethod.  # noqa: E501

         The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field. **Character limit**: 255 **Values**:   # noqa: E501

        :return: The device_session_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._device_session_id

    @device_session_id.setter
    def device_session_id(self, device_session_id):
        """Sets the device_session_id of this ProxyModifyPaymentMethod.

         The session ID of the user when the `PaymentMethod` was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently only Verifi supports this field. **Character limit**: 255 **Values**:   # noqa: E501

        :param device_session_id: The device_session_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._device_session_id = device_session_id

    @property
    def email(self):
        """Gets the email of this ProxyModifyPaymentMethod.  # noqa: E501

         An email address for the payment method in addition to the bill to contact email address. **Character limit**: 80 **Values**: a string of 80 characters or fewer   # noqa: E501

        :return: The email of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProxyModifyPaymentMethod.

         An email address for the payment method in addition to the bill to contact email address. **Character limit**: 80 **Values**: a string of 80 characters or fewer   # noqa: E501

        :param email: The email of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def existing_mandate(self):
        """Gets the existing_mandate of this ProxyModifyPaymentMethod.  # noqa: E501

         Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method. **Character limit**: 3 **Values**: `Yes`, `No`   # noqa: E501

        :return: The existing_mandate of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._existing_mandate

    @existing_mandate.setter
    def existing_mandate(self, existing_mandate):
        """Sets the existing_mandate of this ProxyModifyPaymentMethod.

         Indicates if the customer has an existing mandate or a new mandate. A mandate is a signed authorization for UK and NL customers. When you are migrating mandates from another system, be sure to set this field correctly. If you indicate that a new mandate is an existing mandate or vice-versa, then transactions fail. This field is used only for the direct debit payment method. **Character limit**: 3 **Values**: `Yes`, `No`   # noqa: E501

        :param existing_mandate: The existing_mandate of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._existing_mandate = existing_mandate

    @property
    def first_name(self):
        """Gets the first_name of this ProxyModifyPaymentMethod.  # noqa: E501

         The customer's first name. This field is used only for the direct debit payment method. **Character limit**: 30 **Values**: a string of 30 characters or fewer   # noqa: E501

        :return: The first_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ProxyModifyPaymentMethod.

         The customer's first name. This field is used only for the direct debit payment method. **Character limit**: 30 **Values**: a string of 30 characters or fewer   # noqa: E501

        :param first_name: The first_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def iban(self):
        """Gets the iban of this ProxyModifyPaymentMethod.  # noqa: E501

         The International Bank Account Number. This field is used only for the direct debit payment method. **Character limit**: 42 **Values**: a string of 42 characters or fewer   # noqa: E501

        :return: The iban of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this ProxyModifyPaymentMethod.

         The International Bank Account Number. This field is used only for the direct debit payment method. **Character limit**: 42 **Values**: a string of 42 characters or fewer   # noqa: E501

        :param iban: The iban of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def ip_address(self):
        """Gets the ip_address of this ProxyModifyPaymentMethod.  # noqa: E501

         The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, Verifi, and WorldPay support this field. **Character limit**: 15 **Values**: a string of 15 characters or fewer   # noqa: E501

        :return: The ip_address of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ProxyModifyPaymentMethod.

         The IP address of the user when the payment method was created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, then Zuora passes this field to supported gateways. Currently PayPal, CyberSource, Authorize.Net, Verifi, and WorldPay support this field. **Character limit**: 15 **Values**: a string of 15 characters or fewer   # noqa: E501

        :param ip_address: The ip_address of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def identity_number(self):
        """Gets the identity_number of this ProxyModifyPaymentMethod.  # noqa: E501

        The unique identity number of the customer account.   This field is required only if the `BankTransferType` field is set to `Autogiro` or `Betalingsservice`. It is a string of 12 characters for a Swedish identity number, and a string of 10 characters for a Denish identity number.   # noqa: E501

        :return: The identity_number of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._identity_number

    @identity_number.setter
    def identity_number(self, identity_number):
        """Sets the identity_number of this ProxyModifyPaymentMethod.

        The unique identity number of the customer account.   This field is required only if the `BankTransferType` field is set to `Autogiro` or `Betalingsservice`. It is a string of 12 characters for a Swedish identity number, and a string of 10 characters for a Denish identity number.   # noqa: E501

        :param identity_number: The identity_number of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._identity_number = identity_number

    @property
    def is_company(self):
        """Gets the is_company of this ProxyModifyPaymentMethod.  # noqa: E501

        Whether the customer account is a company.  Zuora does not recommend that you use this field.   # noqa: E501

        :return: The is_company of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._is_company

    @is_company.setter
    def is_company(self, is_company):
        """Sets the is_company of this ProxyModifyPaymentMethod.

        Whether the customer account is a company.  Zuora does not recommend that you use this field.   # noqa: E501

        :param is_company: The is_company of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._is_company = is_company

    @property
    def last_name(self):
        """Gets the last_name of this ProxyModifyPaymentMethod.  # noqa: E501

         The customer's last name. This field is used only for the direct debit payment method. **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :return: The last_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ProxyModifyPaymentMethod.

         The customer's last name. This field is used only for the direct debit payment method. **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :param last_name: The last_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def last_transaction_date_time(self):
        """Gets the last_transaction_date_time of this ProxyModifyPaymentMethod.  # noqa: E501

         The date of the most recent transaction. **Character limit**: 29 **Values**: a valid date and time value   # noqa: E501

        :return: The last_transaction_date_time of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: datetime
        """
        return self._last_transaction_date_time

    @last_transaction_date_time.setter
    def last_transaction_date_time(self, last_transaction_date_time):
        """Sets the last_transaction_date_time of this ProxyModifyPaymentMethod.

         The date of the most recent transaction. **Character limit**: 29 **Values**: a valid date and time value   # noqa: E501

        :param last_transaction_date_time: The last_transaction_date_time of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: datetime
        """

        self._last_transaction_date_time = last_transaction_date_time

    @property
    def mandate_creation_date(self):
        """Gets the mandate_creation_date of this ProxyModifyPaymentMethod.  # noqa: E501

         The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 29   # noqa: E501

        :return: The mandate_creation_date of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: date
        """
        return self._mandate_creation_date

    @mandate_creation_date.setter
    def mandate_creation_date(self, mandate_creation_date):
        """Sets the mandate_creation_date of this ProxyModifyPaymentMethod.

         The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 29   # noqa: E501

        :param mandate_creation_date: The mandate_creation_date of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: date
        """

        self._mandate_creation_date = mandate_creation_date

    @property
    def mandate_id(self):
        """Gets the mandate_id of this ProxyModifyPaymentMethod.  # noqa: E501

         The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 36 **Values**: a string of 36 characters or fewer   # noqa: E501

        :return: The mandate_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this ProxyModifyPaymentMethod.

         The ID of the mandate. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 36 **Values**: a string of 36 characters or fewer   # noqa: E501

        :param mandate_id: The mandate_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._mandate_id = mandate_id

    @property
    def mandate_received(self):
        """Gets the mandate_received of this ProxyModifyPaymentMethod.  # noqa: E501

         Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 3 **Values**: `Yes`, `No `(case-sensitive)   # noqa: E501

        :return: The mandate_received of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._mandate_received

    @mandate_received.setter
    def mandate_received(self, mandate_received):
        """Sets the mandate_received of this ProxyModifyPaymentMethod.

         Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 3 **Values**: `Yes`, `No `(case-sensitive)   # noqa: E501

        :param mandate_received: The mandate_received of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._mandate_received = mandate_received

    @property
    def mandate_update_date(self):
        """Gets the mandate_update_date of this ProxyModifyPaymentMethod.  # noqa: E501

         The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 29   # noqa: E501

        :return: The mandate_update_date of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: date
        """
        return self._mandate_update_date

    @mandate_update_date.setter
    def mandate_update_date(self, mandate_update_date):
        """Sets the mandate_update_date of this ProxyModifyPaymentMethod.

         The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method. **Character limit**: 29   # noqa: E501

        :param mandate_update_date: The mandate_update_date of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: date
        """

        self._mandate_update_date = mandate_update_date

    @property
    def max_consecutive_payment_failures(self):
        """Gets the max_consecutive_payment_failures of this ProxyModifyPaymentMethod.  # noqa: E501

         Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping. **Values**: a valid number   # noqa: E501

        :return: The max_consecutive_payment_failures of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._max_consecutive_payment_failures

    @max_consecutive_payment_failures.setter
    def max_consecutive_payment_failures(self, max_consecutive_payment_failures):
        """Sets the max_consecutive_payment_failures of this ProxyModifyPaymentMethod.

         Specifies the number of allowable consecutive failures Zuora attempts with the payment method before stopping. **Values**: a valid number   # noqa: E501

        :param max_consecutive_payment_failures: The max_consecutive_payment_failures of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: int
        """

        self._max_consecutive_payment_failures = max_consecutive_payment_failures

    @property
    def num_consecutive_failures(self):
        """Gets the num_consecutive_failures of this ProxyModifyPaymentMethod.  # noqa: E501

        The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.    # noqa: E501

        :return: The num_consecutive_failures of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._num_consecutive_failures

    @num_consecutive_failures.setter
    def num_consecutive_failures(self, num_consecutive_failures):
        """Sets the num_consecutive_failures of this ProxyModifyPaymentMethod.

        The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.    # noqa: E501

        :param num_consecutive_failures: The num_consecutive_failures of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: int
        """
        if num_consecutive_failures is not None and num_consecutive_failures > 100:  # noqa: E501
            raise ValueError("Invalid value for `num_consecutive_failures`, must be a value less than or equal to `100`")  # noqa: E501
        if num_consecutive_failures is not None and num_consecutive_failures < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_consecutive_failures`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_consecutive_failures = num_consecutive_failures

    @property
    def payment_method_status(self):
        """Gets the payment_method_status of this ProxyModifyPaymentMethod.  # noqa: E501

         Specifies the status of the payment method. It is set to Active on creation. **Character limit**: 6 **Values**: `Active` or `Closed`   # noqa: E501

        :return: The payment_method_status of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_status

    @payment_method_status.setter
    def payment_method_status(self, payment_method_status):
        """Sets the payment_method_status of this ProxyModifyPaymentMethod.

         Specifies the status of the payment method. It is set to Active on creation. **Character limit**: 6 **Values**: `Active` or `Closed`   # noqa: E501

        :param payment_method_status: The payment_method_status of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._payment_method_status = payment_method_status

    @property
    def payment_retry_window(self):
        """Gets the payment_retry_window of this ProxyModifyPaymentMethod.  # noqa: E501

         The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. This field is required if the `UseDefaultRetryRule` field value is set to `false`. **Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive   # noqa: E501

        :return: The payment_retry_window of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._payment_retry_window

    @payment_retry_window.setter
    def payment_retry_window(self, payment_retry_window):
        """Sets the payment_retry_window of this ProxyModifyPaymentMethod.

         The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. This field is required if the `UseDefaultRetryRule` field value is set to `false`. **Character limit**: 4 **Values**: a whole number between 1 and 1000, exclusive   # noqa: E501

        :param payment_retry_window: The payment_retry_window of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: int
        """

        self._payment_retry_window = payment_retry_window

    @property
    def phone(self):
        """Gets the phone of this ProxyModifyPaymentMethod.  # noqa: E501

         The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway. **Character limit**: 40 **Values**: a string of 40 characters or fewer   # noqa: E501

        :return: The phone of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ProxyModifyPaymentMethod.

         The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway. **Character limit**: 40 **Values**: a string of 40 characters or fewer   # noqa: E501

        :param phone: The phone of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this ProxyModifyPaymentMethod.  # noqa: E501

         The zip code of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 20 **Values**: a string of 20 characters or fewer   # noqa: E501

        :return: The postal_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ProxyModifyPaymentMethod.

         The zip code of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 20 **Values**: a string of 20 characters or fewer   # noqa: E501

        :param postal_code: The postal_code of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def second_token_id(self):
        """Gets the second_token_id of this ProxyModifyPaymentMethod.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data. `SecondTokenId` is conditionally required only when `TokenID` is being used to represent a gateway customer profile. `TokenID` is being used to represent a gateway customer profile. `SecondTokenId` is used in the CC Reference Transaction payment method. **Character limit**: 64 **Values**: a string of 64 characters or fewer   # noqa: E501

        :return: The second_token_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._second_token_id

    @second_token_id.setter
    def second_token_id(self, second_token_id):
        """Sets the second_token_id of this ProxyModifyPaymentMethod.

        A gateway unique identifier that replaces sensitive payment method data. `SecondTokenId` is conditionally required only when `TokenID` is being used to represent a gateway customer profile. `TokenID` is being used to represent a gateway customer profile. `SecondTokenId` is used in the CC Reference Transaction payment method. **Character limit**: 64 **Values**: a string of 64 characters or fewer   # noqa: E501

        :param second_token_id: The second_token_id of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._second_token_id = second_token_id

    @property
    def state(self):
        """Gets the state of this ProxyModifyPaymentMethod.  # noqa: E501

         The state of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :return: The state of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProxyModifyPaymentMethod.

         The state of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 70 **Values**: a string of 70 characters or fewer   # noqa: E501

        :param state: The state of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street_name(self):
        """Gets the street_name of this ProxyModifyPaymentMethod.  # noqa: E501

         The street name of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :return: The street_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this ProxyModifyPaymentMethod.

         The street name of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :param street_name: The street_name of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_number(self):
        """Gets the street_number of this ProxyModifyPaymentMethod.  # noqa: E501

         The street number of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 30 **Values**: a string of 30 characters or fewer   # noqa: E501

        :return: The street_number of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this ProxyModifyPaymentMethod.

         The street number of the customer's address. This field is used only for the direct debit payment method. **Character limit**: 30 **Values**: a string of 30 characters or fewer   # noqa: E501

        :param street_number: The street_number of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def use_default_retry_rule(self):
        """Gets the use_default_retry_rule of this ProxyModifyPaymentMethod.  # noqa: E501

         Determines whether to use the default retry rules configured in the Zuora Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required. **Character limit**: 5 **Values**: `true` or `false`   # noqa: E501

        :return: The use_default_retry_rule of this ProxyModifyPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_retry_rule

    @use_default_retry_rule.setter
    def use_default_retry_rule(self, use_default_retry_rule):
        """Sets the use_default_retry_rule of this ProxyModifyPaymentMethod.

         Determines whether to use the default retry rules configured in the Zuora Payments settings. Set this to `true` to use the default retry rules. Set this to `false` to set the specific rules for this payment method. If you set this value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`, are required. **Character limit**: 5 **Values**: `true` or `false`   # noqa: E501

        :param use_default_retry_rule: The use_default_retry_rule of this ProxyModifyPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._use_default_retry_rule = use_default_retry_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyModifyPaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyModifyPaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
