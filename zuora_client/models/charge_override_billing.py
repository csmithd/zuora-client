# coding: utf-8




import pprint
import re  # noqa: F401

import six


class ChargeOverrideBilling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bill_cycle_day': 'int',
        'bill_cycle_type': 'str',
        'billing_period': 'str',
        'billing_period_alignment': 'str',
        'billing_timing': 'str',
        'specific_billing_period': 'int',
        'weekly_bill_cycle_day': 'str'
    }

    attribute_map = {
        'bill_cycle_day': 'billCycleDay',
        'bill_cycle_type': 'billCycleType',
        'billing_period': 'billingPeriod',
        'billing_period_alignment': 'billingPeriodAlignment',
        'billing_timing': 'billingTiming',
        'specific_billing_period': 'specificBillingPeriod',
        'weekly_bill_cycle_day': 'weeklyBillCycleDay'
    }

    def __init__(self, bill_cycle_day=None, bill_cycle_type=None, billing_period=None, billing_period_alignment=None, billing_timing=None, specific_billing_period=None, weekly_bill_cycle_day=None):  # noqa: E501
        """ChargeOverrideBilling - a model defined in Swagger"""  # noqa: E501

        self._bill_cycle_day = None
        self._bill_cycle_type = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._specific_billing_period = None
        self._weekly_bill_cycle_day = None
        self.discriminator = None

        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_cycle_type is not None:
            self.bill_cycle_type = bill_cycle_type
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if weekly_bill_cycle_day is not None:
            self.weekly_bill_cycle_day = weekly_bill_cycle_day

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this ChargeOverrideBilling.  # noqa: E501

        Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`.   # noqa: E501

        :return: The bill_cycle_day of this ChargeOverrideBilling.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this ChargeOverrideBilling.

        Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this ChargeOverrideBilling.  # noqa: E501
        :type: int
        """
        if bill_cycle_day is not None and bill_cycle_day > 31:  # noqa: E501
            raise ValueError("Invalid value for `bill_cycle_day`, must be a value less than or equal to `31`")  # noqa: E501
        if bill_cycle_day is not None and bill_cycle_day < 1:  # noqa: E501
            raise ValueError("Invalid value for `bill_cycle_day`, must be a value greater than or equal to `1`")  # noqa: E501

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_cycle_type(self):
        """Gets the bill_cycle_type of this ChargeOverrideBilling.  # noqa: E501

        Specifies how Zuora determines the day that each billing period begins on.    * `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.   * `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.   * `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.   * `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.   * `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.   # noqa: E501

        :return: The bill_cycle_type of this ChargeOverrideBilling.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_type

    @bill_cycle_type.setter
    def bill_cycle_type(self, bill_cycle_type):
        """Sets the bill_cycle_type of this ChargeOverrideBilling.

        Specifies how Zuora determines the day that each billing period begins on.    * `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.   * `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.   * `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.   * `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.   * `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.   # noqa: E501

        :param bill_cycle_type: The bill_cycle_type of this ChargeOverrideBilling.  # noqa: E501
        :type: str
        """
        allowed_values = ["DefaultFromCustomer", "SpecificDayofMonth", "SubscriptionStartDay", "ChargeTriggerDay", "SpecificDayofWeek"]  # noqa: E501
        if bill_cycle_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bill_cycle_type` ({0}), must be one of {1}"  # noqa: E501
                .format(bill_cycle_type, allowed_values)
            )

        self._bill_cycle_type = bill_cycle_type

    @property
    def billing_period(self):
        """Gets the billing_period of this ChargeOverrideBilling.  # noqa: E501

        Billing frequency of the charge. The value of this field controls the duration of each billing period.  If the value of this field is `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.   # noqa: E501

        :return: The billing_period of this ChargeOverrideBilling.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this ChargeOverrideBilling.

        Billing frequency of the charge. The value of this field controls the duration of each billing period.  If the value of this field is `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.   # noqa: E501

        :param billing_period: The billing_period of this ChargeOverrideBilling.  # noqa: E501
        :type: str
        """
        allowed_values = ["Month", "Quarter", "Semi_Annual", "Annual", "Eighteen_Months", "Two_Years", "Three_Years", "Five_Years", "Specific_Months", "Subscription_Term", "Week", "Specific_Weeks"]  # noqa: E501
        if billing_period not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_period` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_period, allowed_values)
            )

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this ChargeOverrideBilling.  # noqa: E501

        Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.  * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active. * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription. * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.  See the `billCycleType` field for information about how Zuora determines the billing day.   # noqa: E501

        :return: The billing_period_alignment of this ChargeOverrideBilling.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this ChargeOverrideBilling.

        Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.  * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active. * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription. * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.  See the `billCycleType` field for information about how Zuora determines the billing day.   # noqa: E501

        :param billing_period_alignment: The billing_period_alignment of this ChargeOverrideBilling.  # noqa: E501
        :type: str
        """
        allowed_values = ["AlignToCharge", "AlignToSubscriptionStart", "AlignToTermStart"]  # noqa: E501
        if billing_period_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_period_alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_period_alignment, allowed_values)
            )

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this ChargeOverrideBilling.  # noqa: E501

        Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).   # noqa: E501

        :return: The billing_timing of this ChargeOverrideBilling.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this ChargeOverrideBilling.

        Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).   # noqa: E501

        :param billing_timing: The billing_timing of this ChargeOverrideBilling.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_ADVANCE", "IN_ARREARS"]  # noqa: E501
        if billing_timing not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_timing` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_timing, allowed_values)
            )

        self._billing_timing = billing_timing

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this ChargeOverrideBilling.  # noqa: E501

        Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`.   # noqa: E501

        :return: The specific_billing_period of this ChargeOverrideBilling.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this ChargeOverrideBilling.

        Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`.   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this ChargeOverrideBilling.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def weekly_bill_cycle_day(self):
        """Gets the weekly_bill_cycle_day of this ChargeOverrideBilling.  # noqa: E501

        Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.   # noqa: E501

        :return: The weekly_bill_cycle_day of this ChargeOverrideBilling.  # noqa: E501
        :rtype: str
        """
        return self._weekly_bill_cycle_day

    @weekly_bill_cycle_day.setter
    def weekly_bill_cycle_day(self, weekly_bill_cycle_day):
        """Sets the weekly_bill_cycle_day of this ChargeOverrideBilling.

        Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.   # noqa: E501

        :param weekly_bill_cycle_day: The weekly_bill_cycle_day of this ChargeOverrideBilling.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if weekly_bill_cycle_day not in allowed_values:
            raise ValueError(
                "Invalid value for `weekly_bill_cycle_day` ({0}), must be one of {1}"  # noqa: E501
                .format(weekly_bill_cycle_day, allowed_values)
            )

        self._weekly_bill_cycle_day = weekly_bill_cycle_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargeOverrideBilling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeOverrideBilling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
