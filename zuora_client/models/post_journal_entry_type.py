# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.journal_entry_object_custom_fields import JournalEntryObjectCustomFields  # noqa: F401,E501
from zuora_client.models.post_journal_entry_item_type import POSTJournalEntryItemType  # noqa: F401,E501
from zuora_client.models.post_journal_entry_segment_type import POSTJournalEntrySegmentType  # noqa: F401,E501


class POSTJournalEntryType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_period_name': 'str',
        'currency': 'str',
        'journal_entry_date': 'date',
        'journal_entry_items': 'list[POSTJournalEntryItemType]',
        'notes': 'str',
        'segments': 'list[POSTJournalEntrySegmentType]',
        'transferred_to_accounting': 'str'
    }

    attribute_map = {
        'accounting_period_name': 'accountingPeriodName',
        'currency': 'currency',
        'journal_entry_date': 'journalEntryDate',
        'journal_entry_items': 'journalEntryItems',
        'notes': 'notes',
        'segments': 'segments',
        'transferred_to_accounting': 'transferredToAccounting'
    }

    def __init__(self, accounting_period_name=None, currency=None, journal_entry_date=None, journal_entry_items=None, notes=None, segments=None, transferred_to_accounting=None):  # noqa: E501
        """POSTJournalEntryType - a model defined in Swagger"""  # noqa: E501

        self._accounting_period_name = None
        self._currency = None
        self._journal_entry_date = None
        self._journal_entry_items = None
        self._notes = None
        self._segments = None
        self._transferred_to_accounting = None
        self.discriminator = None

        self.accounting_period_name = accounting_period_name
        self.currency = currency
        self.journal_entry_date = journal_entry_date
        self.journal_entry_items = journal_entry_items
        if notes is not None:
            self.notes = notes
        if segments is not None:
            self.segments = segments
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting

    @property
    def accounting_period_name(self):
        """Gets the accounting_period_name of this POSTJournalEntryType.  # noqa: E501

        Name of the accounting period. The open-ended accounting period is named `Open-Ended`.   # noqa: E501

        :return: The accounting_period_name of this POSTJournalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period_name

    @accounting_period_name.setter
    def accounting_period_name(self, accounting_period_name):
        """Sets the accounting_period_name of this POSTJournalEntryType.

        Name of the accounting period. The open-ended accounting period is named `Open-Ended`.   # noqa: E501

        :param accounting_period_name: The accounting_period_name of this POSTJournalEntryType.  # noqa: E501
        :type: str
        """
        if accounting_period_name is None:
            raise ValueError("Invalid value for `accounting_period_name`, must not be `None`")  # noqa: E501

        self._accounting_period_name = accounting_period_name

    @property
    def currency(self):
        """Gets the currency of this POSTJournalEntryType.  # noqa: E501

        The type of currency used. Currency must be active.   # noqa: E501

        :return: The currency of this POSTJournalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this POSTJournalEntryType.

        The type of currency used. Currency must be active.   # noqa: E501

        :param currency: The currency of this POSTJournalEntryType.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def journal_entry_date(self):
        """Gets the journal_entry_date of this POSTJournalEntryType.  # noqa: E501

        Date of the journal entry.   # noqa: E501

        :return: The journal_entry_date of this POSTJournalEntryType.  # noqa: E501
        :rtype: date
        """
        return self._journal_entry_date

    @journal_entry_date.setter
    def journal_entry_date(self, journal_entry_date):
        """Sets the journal_entry_date of this POSTJournalEntryType.

        Date of the journal entry.   # noqa: E501

        :param journal_entry_date: The journal_entry_date of this POSTJournalEntryType.  # noqa: E501
        :type: date
        """
        if journal_entry_date is None:
            raise ValueError("Invalid value for `journal_entry_date`, must not be `None`")  # noqa: E501

        self._journal_entry_date = journal_entry_date

    @property
    def journal_entry_items(self):
        """Gets the journal_entry_items of this POSTJournalEntryType.  # noqa: E501

        Key name that represents the list of journal entry items.   # noqa: E501

        :return: The journal_entry_items of this POSTJournalEntryType.  # noqa: E501
        :rtype: list[POSTJournalEntryItemType]
        """
        return self._journal_entry_items

    @journal_entry_items.setter
    def journal_entry_items(self, journal_entry_items):
        """Sets the journal_entry_items of this POSTJournalEntryType.

        Key name that represents the list of journal entry items.   # noqa: E501

        :param journal_entry_items: The journal_entry_items of this POSTJournalEntryType.  # noqa: E501
        :type: list[POSTJournalEntryItemType]
        """
        if journal_entry_items is None:
            raise ValueError("Invalid value for `journal_entry_items`, must not be `None`")  # noqa: E501

        self._journal_entry_items = journal_entry_items

    @property
    def notes(self):
        """Gets the notes of this POSTJournalEntryType.  # noqa: E501

        The number associated with the revenue event.  Character limit: 2,000   # noqa: E501

        :return: The notes of this POSTJournalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this POSTJournalEntryType.

        The number associated with the revenue event.  Character limit: 2,000   # noqa: E501

        :param notes: The notes of this POSTJournalEntryType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def segments(self):
        """Gets the segments of this POSTJournalEntryType.  # noqa: E501

        List of segments that apply to the summary journal entry.   # noqa: E501

        :return: The segments of this POSTJournalEntryType.  # noqa: E501
        :rtype: list[POSTJournalEntrySegmentType]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this POSTJournalEntryType.

        List of segments that apply to the summary journal entry.   # noqa: E501

        :param segments: The segments of this POSTJournalEntryType.  # noqa: E501
        :type: list[POSTJournalEntrySegmentType]
        """

        self._segments = segments

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this POSTJournalEntryType.  # noqa: E501

        Status shows whether the journal entry has been transferred to an accounting system.   # noqa: E501

        :return: The transferred_to_accounting of this POSTJournalEntryType.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this POSTJournalEntryType.

        Status shows whether the journal entry has been transferred to an accounting system.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this POSTJournalEntryType.  # noqa: E501
        :type: str
        """
        allowed_values = ["No", "Processing", "Yes", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTJournalEntryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTJournalEntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
