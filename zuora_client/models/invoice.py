# coding: utf-8




import pprint
import re  # noqa: F401

import six


class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'adjustment_amount': 'float',
        'amount': 'float',
        'amount_without_tax': 'float',
        'balance': 'float',
        'bill_run_id': 'str',
        'body': 'str',
        'comments': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'credit_balance_adjustment_amount': 'float',
        'due_date': 'date',
        'includes_one_time': 'bool',
        'includes_recurring': 'bool',
        'includes_usage': 'bool',
        'invoice_date': 'date',
        'invoice_number': 'str',
        'last_email_sent_date': 'datetime',
        'payment_amount': 'float',
        'posted_by': 'str',
        'posted_date': 'datetime',
        'refund_amount': 'float',
        'regenerate_invoice_pdf': 'bool',
        'status': 'str',
        'target_date': 'date',
        'tax_amount': 'float',
        'tax_exempt_amount': 'float',
        'transferred_to_accounting': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'adjustment_amount': 'AdjustmentAmount',
        'amount': 'Amount',
        'amount_without_tax': 'AmountWithoutTax',
        'balance': 'Balance',
        'bill_run_id': 'BillRunId',
        'body': 'Body',
        'comments': 'Comments',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'credit_balance_adjustment_amount': 'CreditBalanceAdjustmentAmount',
        'due_date': 'DueDate',
        'includes_one_time': 'IncludesOneTime',
        'includes_recurring': 'IncludesRecurring',
        'includes_usage': 'IncludesUsage',
        'invoice_date': 'InvoiceDate',
        'invoice_number': 'InvoiceNumber',
        'last_email_sent_date': 'LastEmailSentDate',
        'payment_amount': 'PaymentAmount',
        'posted_by': 'PostedBy',
        'posted_date': 'PostedDate',
        'refund_amount': 'RefundAmount',
        'regenerate_invoice_pdf': 'RegenerateInvoicePDF',
        'status': 'Status',
        'target_date': 'TargetDate',
        'tax_amount': 'TaxAmount',
        'tax_exempt_amount': 'TaxExemptAmount',
        'transferred_to_accounting': 'TransferredToAccounting',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, account_id=None, adjustment_amount=None, amount=None, amount_without_tax=None, balance=None, bill_run_id=None, body=None, comments=None, created_by_id=None, created_date=None, credit_balance_adjustment_amount=None, due_date=None, includes_one_time=None, includes_recurring=None, includes_usage=None, invoice_date=None, invoice_number=None, last_email_sent_date=None, payment_amount=None, posted_by=None, posted_date=None, refund_amount=None, regenerate_invoice_pdf=None, status=None, target_date=None, tax_amount=None, tax_exempt_amount=None, transferred_to_accounting=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._adjustment_amount = None
        self._amount = None
        self._amount_without_tax = None
        self._balance = None
        self._bill_run_id = None
        self._body = None
        self._comments = None
        self._created_by_id = None
        self._created_date = None
        self._credit_balance_adjustment_amount = None
        self._due_date = None
        self._includes_one_time = None
        self._includes_recurring = None
        self._includes_usage = None
        self._invoice_date = None
        self._invoice_number = None
        self._last_email_sent_date = None
        self._payment_amount = None
        self._posted_by = None
        self._posted_date = None
        self._refund_amount = None
        self._regenerate_invoice_pdf = None
        self._status = None
        self._target_date = None
        self._tax_amount = None
        self._tax_exempt_amount = None
        self._transferred_to_accounting = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if adjustment_amount is not None:
            self.adjustment_amount = adjustment_amount
        if amount is not None:
            self.amount = amount
        if amount_without_tax is not None:
            self.amount_without_tax = amount_without_tax
        if balance is not None:
            self.balance = balance
        if bill_run_id is not None:
            self.bill_run_id = bill_run_id
        if body is not None:
            self.body = body
        if comments is not None:
            self.comments = comments
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if credit_balance_adjustment_amount is not None:
            self.credit_balance_adjustment_amount = credit_balance_adjustment_amount
        if due_date is not None:
            self.due_date = due_date
        if includes_one_time is not None:
            self.includes_one_time = includes_one_time
        if includes_recurring is not None:
            self.includes_recurring = includes_recurring
        if includes_usage is not None:
            self.includes_usage = includes_usage
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if last_email_sent_date is not None:
            self.last_email_sent_date = last_email_sent_date
        if payment_amount is not None:
            self.payment_amount = payment_amount
        if posted_by is not None:
            self.posted_by = posted_by
        if posted_date is not None:
            self.posted_date = posted_date
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if regenerate_invoice_pdf is not None:
            self.regenerate_invoice_pdf = regenerate_invoice_pdf
        if status is not None:
            self.status = status
        if target_date is not None:
            self.target_date = target_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_exempt_amount is not None:
            self.tax_exempt_amount = tax_exempt_amount
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def account_id(self):
        """Gets the account_id of this Invoice.  # noqa: E501

          # noqa: E501

        :return: The account_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Invoice.

          # noqa: E501

        :param account_id: The account_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def adjustment_amount(self):
        """Gets the adjustment_amount of this Invoice.  # noqa: E501

         The amount of the invoice adjustments associated with the invoice. **Character limi**t: 16  **Values**: a valid currency amount   # noqa: E501

        :return: The adjustment_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._adjustment_amount

    @adjustment_amount.setter
    def adjustment_amount(self, adjustment_amount):
        """Sets the adjustment_amount of this Invoice.

         The amount of the invoice adjustments associated with the invoice. **Character limi**t: 16  **Values**: a valid currency amount   # noqa: E501

        :param adjustment_amount: The adjustment_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._adjustment_amount = adjustment_amount

    @property
    def amount(self):
        """Gets the amount of this Invoice.  # noqa: E501

         The sum of all charges and taxes associated with the invoice.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :return: The amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Invoice.

         The sum of all charges and taxes associated with the invoice.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :param amount: The amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_without_tax(self):
        """Gets the amount_without_tax of this Invoice.  # noqa: E501

         The sum of all charges associated with the invoice. Taxes are excluded from this value.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :return: The amount_without_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._amount_without_tax

    @amount_without_tax.setter
    def amount_without_tax(self, amount_without_tax):
        """Sets the amount_without_tax of this Invoice.

         The sum of all charges associated with the invoice. Taxes are excluded from this value.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :param amount_without_tax: The amount_without_tax of this Invoice.  # noqa: E501
        :type: float
        """

        self._amount_without_tax = amount_without_tax

    @property
    def balance(self):
        """Gets the balance of this Invoice.  # noqa: E501

         The remaining balance of the invoice after all payments, adjustments, and refunds are applied.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :return: The balance of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Invoice.

         The remaining balance of the invoice after all payments, adjustments, and refunds are applied.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :param balance: The balance of this Invoice.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def bill_run_id(self):
        """Gets the bill_run_id of this Invoice.  # noqa: E501

         The ID of a Bill Run.   **Character limit**: 32  **Values**: a BillRun ID   # noqa: E501

        :return: The bill_run_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._bill_run_id

    @bill_run_id.setter
    def bill_run_id(self, bill_run_id):
        """Sets the bill_run_id of this Invoice.

         The ID of a Bill Run.   **Character limit**: 32  **Values**: a BillRun ID   # noqa: E501

        :param bill_run_id: The bill_run_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._bill_run_id = bill_run_id

    @property
    def body(self):
        """Gets the body of this Invoice.  # noqa: E501

         Required   # noqa: E501

        :return: The body of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Invoice.

         Required   # noqa: E501

        :param body: The body of this Invoice.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def comments(self):
        """Gets the comments of this Invoice.  # noqa: E501

         Additional information related to the invoice that a Zuora user added to the invoice.   **Character limit**: 255  **Values:** a string of 255 characters or fewer   # noqa: E501

        :return: The comments of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Invoice.

         Additional information related to the invoice that a Zuora user added to the invoice.   **Character limit**: 255  **Values:** a string of 255 characters or fewer   # noqa: E501

        :param comments: The comments of this Invoice.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Invoice.  # noqa: E501

         The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.   **Character limit**: 32  **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Invoice.

         The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.   **Character limit**: 32  **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this Invoice.  # noqa: E501

         The date when the invoice was generated.   **Character limit**: 29  **Values**: automatically generated   # noqa: E501

        :return: The created_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Invoice.

         The date when the invoice was generated.   **Character limit**: 29  **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def credit_balance_adjustment_amount(self):
        """Gets the credit_balance_adjustment_amount of this Invoice.  # noqa: E501

         The currency amount of the adjustment applied to the customer's credit balance.   **Character limit**: 16  **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.     # noqa: E501

        :return: The credit_balance_adjustment_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._credit_balance_adjustment_amount

    @credit_balance_adjustment_amount.setter
    def credit_balance_adjustment_amount(self, credit_balance_adjustment_amount):
        """Sets the credit_balance_adjustment_amount of this Invoice.

         The currency amount of the adjustment applied to the customer's credit balance.   **Character limit**: 16  **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.     # noqa: E501

        :param credit_balance_adjustment_amount: The credit_balance_adjustment_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._credit_balance_adjustment_amount = credit_balance_adjustment_amount

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.  # noqa: E501

         The date by which the payment for this invoice is due.   **Character limit**: 29   # noqa: E501

        :return: The due_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.

         The date by which the payment for this invoice is due.   **Character limit**: 29   # noqa: E501

        :param due_date: The due_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def includes_one_time(self):
        """Gets the includes_one_time of this Invoice.  # noqa: E501

         Specifies whether the invoice includes one-time charges.   **Character limit**: 5  **Values**: automatically generated from one of the following: `True` (default), `False`   # noqa: E501

        :return: The includes_one_time of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._includes_one_time

    @includes_one_time.setter
    def includes_one_time(self, includes_one_time):
        """Sets the includes_one_time of this Invoice.

         Specifies whether the invoice includes one-time charges.   **Character limit**: 5  **Values**: automatically generated from one of the following: `True` (default), `False`   # noqa: E501

        :param includes_one_time: The includes_one_time of this Invoice.  # noqa: E501
        :type: bool
        """

        self._includes_one_time = includes_one_time

    @property
    def includes_recurring(self):
        """Gets the includes_recurring of this Invoice.  # noqa: E501

         Specifies whether the invoice includes recurring charges.   **Character limit**: 5  **Values**: automatically generated from one of the following: `True` (default), `False`   # noqa: E501

        :return: The includes_recurring of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._includes_recurring

    @includes_recurring.setter
    def includes_recurring(self, includes_recurring):
        """Sets the includes_recurring of this Invoice.

         Specifies whether the invoice includes recurring charges.   **Character limit**: 5  **Values**: automatically generated from one of the following: `True` (default), `False`   # noqa: E501

        :param includes_recurring: The includes_recurring of this Invoice.  # noqa: E501
        :type: bool
        """

        self._includes_recurring = includes_recurring

    @property
    def includes_usage(self):
        """Gets the includes_usage of this Invoice.  # noqa: E501

         Specifies whether the invoice includes usage charges.   **Character limit**: 5  **Values**: automatically generated from one of the following: `True `(default), `False`   # noqa: E501

        :return: The includes_usage of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._includes_usage

    @includes_usage.setter
    def includes_usage(self, includes_usage):
        """Sets the includes_usage of this Invoice.

         Specifies whether the invoice includes usage charges.   **Character limit**: 5  **Values**: automatically generated from one of the following: `True `(default), `False`   # noqa: E501

        :param includes_usage: The includes_usage of this Invoice.  # noqa: E501
        :type: bool
        """

        self._includes_usage = includes_usage

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.  # noqa: E501

         Specifies the date on which to generate the invoice.   **Character limit**: 29   # noqa: E501

        :return: The invoice_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.

         Specifies the date on which to generate the invoice.   **Character limit**: 29   # noqa: E501

        :param invoice_date: The invoice_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._invoice_date = invoice_date

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.  # noqa: E501

         The unique identification number for the invoice. This number is returned as a string.   **Character limit**: 32  **Values**: automatically generated   # noqa: E501

        :return: The invoice_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.

         The unique identification number for the invoice. This number is returned as a string.   **Character limit**: 32  **Values**: automatically generated   # noqa: E501

        :param invoice_number: The invoice_number of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def last_email_sent_date(self):
        """Gets the last_email_sent_date of this Invoice.  # noqa: E501

         The date when the invoice was last emailed.   **Character limit**: 29  **Values**: automatically generated   # noqa: E501

        :return: The last_email_sent_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._last_email_sent_date

    @last_email_sent_date.setter
    def last_email_sent_date(self, last_email_sent_date):
        """Sets the last_email_sent_date of this Invoice.

         The date when the invoice was last emailed.   **Character limit**: 29  **Values**: automatically generated   # noqa: E501

        :param last_email_sent_date: The last_email_sent_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._last_email_sent_date = last_email_sent_date

    @property
    def payment_amount(self):
        """Gets the payment_amount of this Invoice.  # noqa: E501

         The amount of payments applied to the invoice.   **Character limit**: 16 **Value**s: automatically generated   # noqa: E501

        :return: The payment_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this Invoice.

         The amount of payments applied to the invoice.   **Character limit**: 16 **Value**s: automatically generated   # noqa: E501

        :param payment_amount: The payment_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._payment_amount = payment_amount

    @property
    def posted_by(self):
        """Gets the posted_by of this Invoice.  # noqa: E501

         The user ID of the person who moved the invoice to Posted status.   **Character limit**: 32  **Values**: automatically generated   # noqa: E501

        :return: The posted_by of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._posted_by

    @posted_by.setter
    def posted_by(self, posted_by):
        """Sets the posted_by of this Invoice.

         The user ID of the person who moved the invoice to Posted status.   **Character limit**: 32  **Values**: automatically generated   # noqa: E501

        :param posted_by: The posted_by of this Invoice.  # noqa: E501
        :type: str
        """

        self._posted_by = posted_by

    @property
    def posted_date(self):
        """Gets the posted_date of this Invoice.  # noqa: E501

         The date when the invoice was posted.   **Character limit:** 29  **Values**: automatically generated   # noqa: E501

        :return: The posted_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this Invoice.

         The date when the invoice was posted.   **Character limit:** 29  **Values**: automatically generated   # noqa: E501

        :param posted_date: The posted_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._posted_date = posted_date

    @property
    def refund_amount(self):
        """Gets the refund_amount of this Invoice.  # noqa: E501

         Specifies the amount of a refund that was applied against an earlier payment on the invoice.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :return: The refund_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this Invoice.

         Specifies the amount of a refund that was applied against an earlier payment on the invoice.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :param refund_amount: The refund_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._refund_amount = refund_amount

    @property
    def regenerate_invoice_pdf(self):
        """Gets the regenerate_invoice_pdf of this Invoice.  # noqa: E501

         Regenerates a PDF of an invoice that was already generated.  **Character limit**: 5  **Values**: `True`, `False`   # noqa: E501

        :return: The regenerate_invoice_pdf of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._regenerate_invoice_pdf

    @regenerate_invoice_pdf.setter
    def regenerate_invoice_pdf(self, regenerate_invoice_pdf):
        """Sets the regenerate_invoice_pdf of this Invoice.

         Regenerates a PDF of an invoice that was already generated.  **Character limit**: 5  **Values**: `True`, `False`   # noqa: E501

        :param regenerate_invoice_pdf: The regenerate_invoice_pdf of this Invoice.  # noqa: E501
        :type: bool
        """

        self._regenerate_invoice_pdf = regenerate_invoice_pdf

    @property
    def status(self):
        """Gets the status of this Invoice.  # noqa: E501

         The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.   **Character limit**: 8  **Values**: one of the following:  -  Draft (default, automatically set upon invoice creation)  -  Posted  -  Canceled    # noqa: E501

        :return: The status of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invoice.

         The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.   **Character limit**: 8  **Values**: one of the following:  -  Draft (default, automatically set upon invoice creation)  -  Posted  -  Canceled    # noqa: E501

        :param status: The status of this Invoice.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target_date(self):
        """Gets the target_date of this Invoice.  # noqa: E501

         This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.   **Character limit**: 29   # noqa: E501

        :return: The target_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this Invoice.

         This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.   **Character limit**: 29   # noqa: E501

        :param target_date: The target_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Invoice.  # noqa: E501

         The total amount of the taxes applied to the invoice.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :return: The tax_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Invoice.

         The total amount of the taxes applied to the invoice.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :param tax_amount: The tax_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_exempt_amount(self):
        """Gets the tax_exempt_amount of this Invoice.  # noqa: E501

         The total amount of the invoice that is exempt from taxation.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :return: The tax_exempt_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._tax_exempt_amount

    @tax_exempt_amount.setter
    def tax_exempt_amount(self, tax_exempt_amount):
        """Sets the tax_exempt_amount of this Invoice.

         The total amount of the invoice that is exempt from taxation.   **Character limit**: 16  **Values**: automatically generated   # noqa: E501

        :param tax_exempt_amount: The tax_exempt_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._tax_exempt_amount = tax_exempt_amount

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this Invoice.  # noqa: E501

         Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.   **Character limit**: 10  **Values**: Processing, Yes, Error, Ignore   # noqa: E501

        :return: The transferred_to_accounting of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this Invoice.

         Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.   **Character limit**: 10  **Values**: Processing, Yes, Error, Ignore   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this Invoice.  # noqa: E501
        :type: str
        """

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this Invoice.  # noqa: E501

          # noqa: E501

        :return: The updated_by_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this Invoice.

          # noqa: E501

        :param updated_by_id: The updated_by_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this Invoice.  # noqa: E501

         The date when the invoice was last updated.   **Character limit**: 29  **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Invoice.

         The date when the invoice was last updated.   **Character limit**: 29  **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
