# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.common_response_type import CommonResponseType  # noqa: F401,E501
from zuora_client.models.job_result_subscriptions import JobResultSubscriptions  # noqa: F401,E501


class JobResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'account_number': 'str',
        'credit_memo_numbers': 'list[str]',
        'invoice_numbers': 'list[str]',
        'order_number': 'str',
        'paid_amount': 'str',
        'payment_number': 'str',
        'status': 'str',
        'subscription_numbers': 'list[str]',
        'subscriptions': 'list[JobResultSubscriptions]'
    }

    attribute_map = {
        'success': 'success',
        'account_number': 'accountNumber',
        'credit_memo_numbers': 'creditMemoNumbers',
        'invoice_numbers': 'invoiceNumbers',
        'order_number': 'orderNumber',
        'paid_amount': 'paidAmount',
        'payment_number': 'paymentNumber',
        'status': 'status',
        'subscription_numbers': 'subscriptionNumbers',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, success=None, account_number=None, credit_memo_numbers=None, invoice_numbers=None, order_number=None, paid_amount=None, payment_number=None, status=None, subscription_numbers=None, subscriptions=None):  # noqa: E501
        """JobResult - a model defined in Swagger"""  # noqa: E501

        self._success = None
        self._account_number = None
        self._credit_memo_numbers = None
        self._invoice_numbers = None
        self._order_number = None
        self._paid_amount = None
        self._payment_number = None
        self._status = None
        self._subscription_numbers = None
        self._subscriptions = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if account_number is not None:
            self.account_number = account_number
        if credit_memo_numbers is not None:
            self.credit_memo_numbers = credit_memo_numbers
        if invoice_numbers is not None:
            self.invoice_numbers = invoice_numbers
        if order_number is not None:
            self.order_number = order_number
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if payment_number is not None:
            self.payment_number = payment_number
        if status is not None:
            self.status = status
        if subscription_numbers is not None:
            self.subscription_numbers = subscription_numbers
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def success(self):
        """Gets the success of this JobResult.  # noqa: E501

        Indicates whether the call succeeded.   # noqa: E501

        :return: The success of this JobResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this JobResult.

        Indicates whether the call succeeded.   # noqa: E501

        :param success: The success of this JobResult.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def account_number(self):
        """Gets the account_number of this JobResult.  # noqa: E501

        The account number for the order.  # noqa: E501

        :return: The account_number of this JobResult.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this JobResult.

        The account number for the order.  # noqa: E501

        :param account_number: The account_number of this JobResult.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def credit_memo_numbers(self):
        """Gets the credit_memo_numbers of this JobResult.  # noqa: E501

        An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Avdanced AR Settlement feature enabled.  # noqa: E501

        :return: The credit_memo_numbers of this JobResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._credit_memo_numbers

    @credit_memo_numbers.setter
    def credit_memo_numbers(self, credit_memo_numbers):
        """Sets the credit_memo_numbers of this JobResult.

        An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Avdanced AR Settlement feature enabled.  # noqa: E501

        :param credit_memo_numbers: The credit_memo_numbers of this JobResult.  # noqa: E501
        :type: list[str]
        """

        self._credit_memo_numbers = credit_memo_numbers

    @property
    def invoice_numbers(self):
        """Gets the invoice_numbers of this JobResult.  # noqa: E501

        An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.  # noqa: E501

        :return: The invoice_numbers of this JobResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._invoice_numbers

    @invoice_numbers.setter
    def invoice_numbers(self, invoice_numbers):
        """Sets the invoice_numbers of this JobResult.

        An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.  # noqa: E501

        :param invoice_numbers: The invoice_numbers of this JobResult.  # noqa: E501
        :type: list[str]
        """

        self._invoice_numbers = invoice_numbers

    @property
    def order_number(self):
        """Gets the order_number of this JobResult.  # noqa: E501

        The order number of the order created.  # noqa: E501

        :return: The order_number of this JobResult.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this JobResult.

        The order number of the order created.  # noqa: E501

        :param order_number: The order_number of this JobResult.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def paid_amount(self):
        """Gets the paid_amount of this JobResult.  # noqa: E501

        The total amount collected in this order request.  # noqa: E501

        :return: The paid_amount of this JobResult.  # noqa: E501
        :rtype: str
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this JobResult.

        The total amount collected in this order request.  # noqa: E501

        :param paid_amount: The paid_amount of this JobResult.  # noqa: E501
        :type: str
        """

        self._paid_amount = paid_amount

    @property
    def payment_number(self):
        """Gets the payment_number of this JobResult.  # noqa: E501

        The payment number that collected in this order request.  # noqa: E501

        :return: The payment_number of this JobResult.  # noqa: E501
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this JobResult.

        The payment number that collected in this order request.  # noqa: E501

        :param payment_number: The payment_number of this JobResult.  # noqa: E501
        :type: str
        """

        self._payment_number = payment_number

    @property
    def status(self):
        """Gets the status of this JobResult.  # noqa: E501

        Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.  # noqa: E501

        :return: The status of this JobResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobResult.

        Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.  # noqa: E501

        :param status: The status of this JobResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Completed", "Pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_numbers(self):
        """Gets the subscription_numbers of this JobResult.  # noqa: E501

        **Note:** This field is in Zuora REST API version control. Supported minor versions are 222.4 or earlier. To use this field in the method, you must set theÂ `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers of the subscriptions in an order.   # noqa: E501

        :return: The subscription_numbers of this JobResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_numbers

    @subscription_numbers.setter
    def subscription_numbers(self, subscription_numbers):
        """Sets the subscription_numbers of this JobResult.

        **Note:** This field is in Zuora REST API version control. Supported minor versions are 222.4 or earlier. To use this field in the method, you must set theÂ `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers of the subscriptions in an order.   # noqa: E501

        :param subscription_numbers: The subscription_numbers of this JobResult.  # noqa: E501
        :type: list[str]
        """

        self._subscription_numbers = subscription_numbers

    @property
    def subscriptions(self):
        """Gets the subscriptions of this JobResult.  # noqa: E501

        **Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set theÂ `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers and statuses in an order.   # noqa: E501

        :return: The subscriptions of this JobResult.  # noqa: E501
        :rtype: list[JobResultSubscriptions]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this JobResult.

        **Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set theÂ `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers and statuses in an order.   # noqa: E501

        :param subscriptions: The subscriptions of this JobResult.  # noqa: E501
        :type: list[JobResultSubscriptions]
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
