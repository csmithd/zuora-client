# coding: utf-8




import pprint
import re  # noqa: F401

import six


class FinanceInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjustment_liability_accounting_code': 'str',
        'adjustment_liability_accounting_code_type': 'str',
        'adjustment_revenue_accounting_code': 'str',
        'adjustment_revenue_accounting_code_type': 'str',
        'contract_asset_accounting_code': 'str',
        'contract_asset_accounting_code_type': 'str',
        'contract_liability_accounting_code': 'str',
        'contract_liability_accounting_code_type': 'str',
        'contract_recognized_revenue_accounting_code': 'str',
        'contract_recognized_revenue_accounting_code_type': 'str',
        'deferred_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code_type': 'str',
        'recognized_revenue_accounting_code': 'str',
        'recognized_revenue_accounting_code_type': 'str',
        'unbilled_receivables_accounting_code': 'str',
        'unbilled_receivables_accounting_code_type': 'str'
    }

    attribute_map = {
        'adjustment_liability_accounting_code': 'adjustmentLiabilityAccountingCode',
        'adjustment_liability_accounting_code_type': 'adjustmentLiabilityAccountingCodeType',
        'adjustment_revenue_accounting_code': 'adjustmentRevenueAccountingCode',
        'adjustment_revenue_accounting_code_type': 'adjustmentRevenueAccountingCodeType',
        'contract_asset_accounting_code': 'contractAssetAccountingCode',
        'contract_asset_accounting_code_type': 'contractAssetAccountingCodeType',
        'contract_liability_accounting_code': 'contractLiabilityAccountingCode',
        'contract_liability_accounting_code_type': 'contractLiabilityAccountingCodeType',
        'contract_recognized_revenue_accounting_code': 'contractRecognizedRevenueAccountingCode',
        'contract_recognized_revenue_accounting_code_type': 'contractRecognizedRevenueAccountingCodeType',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'deferred_revenue_accounting_code_type': 'deferredRevenueAccountingCodeType',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'recognized_revenue_accounting_code_type': 'recognizedRevenueAccountingCodeType',
        'unbilled_receivables_accounting_code': 'unbilledReceivablesAccountingCode',
        'unbilled_receivables_accounting_code_type': 'unbilledReceivablesAccountingCodeType'
    }

    def __init__(self, adjustment_liability_accounting_code=None, adjustment_liability_accounting_code_type=None, adjustment_revenue_accounting_code=None, adjustment_revenue_accounting_code_type=None, contract_asset_accounting_code=None, contract_asset_accounting_code_type=None, contract_liability_accounting_code=None, contract_liability_accounting_code_type=None, contract_recognized_revenue_accounting_code=None, contract_recognized_revenue_accounting_code_type=None, deferred_revenue_accounting_code=None, deferred_revenue_accounting_code_type=None, recognized_revenue_accounting_code=None, recognized_revenue_accounting_code_type=None, unbilled_receivables_accounting_code=None, unbilled_receivables_accounting_code_type=None):  # noqa: E501
        """FinanceInformation - a model defined in Swagger"""  # noqa: E501

        self._adjustment_liability_accounting_code = None
        self._adjustment_liability_accounting_code_type = None
        self._adjustment_revenue_accounting_code = None
        self._adjustment_revenue_accounting_code_type = None
        self._contract_asset_accounting_code = None
        self._contract_asset_accounting_code_type = None
        self._contract_liability_accounting_code = None
        self._contract_liability_accounting_code_type = None
        self._contract_recognized_revenue_accounting_code = None
        self._contract_recognized_revenue_accounting_code_type = None
        self._deferred_revenue_accounting_code = None
        self._deferred_revenue_accounting_code_type = None
        self._recognized_revenue_accounting_code = None
        self._recognized_revenue_accounting_code_type = None
        self._unbilled_receivables_accounting_code = None
        self._unbilled_receivables_accounting_code_type = None
        self.discriminator = None

        if adjustment_liability_accounting_code is not None:
            self.adjustment_liability_accounting_code = adjustment_liability_accounting_code
        if adjustment_liability_accounting_code_type is not None:
            self.adjustment_liability_accounting_code_type = adjustment_liability_accounting_code_type
        if adjustment_revenue_accounting_code is not None:
            self.adjustment_revenue_accounting_code = adjustment_revenue_accounting_code
        if adjustment_revenue_accounting_code_type is not None:
            self.adjustment_revenue_accounting_code_type = adjustment_revenue_accounting_code_type
        if contract_asset_accounting_code is not None:
            self.contract_asset_accounting_code = contract_asset_accounting_code
        if contract_asset_accounting_code_type is not None:
            self.contract_asset_accounting_code_type = contract_asset_accounting_code_type
        if contract_liability_accounting_code is not None:
            self.contract_liability_accounting_code = contract_liability_accounting_code
        if contract_liability_accounting_code_type is not None:
            self.contract_liability_accounting_code_type = contract_liability_accounting_code_type
        if contract_recognized_revenue_accounting_code is not None:
            self.contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code
        if contract_recognized_revenue_accounting_code_type is not None:
            self.contract_recognized_revenue_accounting_code_type = contract_recognized_revenue_accounting_code_type
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if deferred_revenue_accounting_code_type is not None:
            self.deferred_revenue_accounting_code_type = deferred_revenue_accounting_code_type
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if recognized_revenue_accounting_code_type is not None:
            self.recognized_revenue_accounting_code_type = recognized_revenue_accounting_code_type
        if unbilled_receivables_accounting_code is not None:
            self.unbilled_receivables_accounting_code = unbilled_receivables_accounting_code
        if unbilled_receivables_accounting_code_type is not None:
            self.unbilled_receivables_accounting_code_type = unbilled_receivables_accounting_code_type

    @property
    def adjustment_liability_accounting_code(self):
        """Gets the adjustment_liability_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for adjustment liability.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :return: The adjustment_liability_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code

    @adjustment_liability_accounting_code.setter
    def adjustment_liability_accounting_code(self, adjustment_liability_accounting_code):
        """Sets the adjustment_liability_accounting_code of this FinanceInformation.

        The accounting code for adjustment liability.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :param adjustment_liability_accounting_code: The adjustment_liability_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code = adjustment_liability_accounting_code

    @property
    def adjustment_liability_accounting_code_type(self):
        """Gets the adjustment_liability_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the adjustment liability accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :return: The adjustment_liability_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code_type

    @adjustment_liability_accounting_code_type.setter
    def adjustment_liability_accounting_code_type(self, adjustment_liability_accounting_code_type):
        """Sets the adjustment_liability_accounting_code_type of this FinanceInformation.

        The type associated with the adjustment liability accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :param adjustment_liability_accounting_code_type: The adjustment_liability_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code_type = adjustment_liability_accounting_code_type

    @property
    def adjustment_revenue_accounting_code(self):
        """Gets the adjustment_revenue_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for adjustment revenue.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :return: The adjustment_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code

    @adjustment_revenue_accounting_code.setter
    def adjustment_revenue_accounting_code(self, adjustment_revenue_accounting_code):
        """Sets the adjustment_revenue_accounting_code of this FinanceInformation.

        The accounting code for adjustment revenue.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :param adjustment_revenue_accounting_code: The adjustment_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code = adjustment_revenue_accounting_code

    @property
    def adjustment_revenue_accounting_code_type(self):
        """Gets the adjustment_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the adjustment revenue accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :return: The adjustment_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code_type

    @adjustment_revenue_accounting_code_type.setter
    def adjustment_revenue_accounting_code_type(self, adjustment_revenue_accounting_code_type):
        """Sets the adjustment_revenue_accounting_code_type of this FinanceInformation.

        The type associated with the adjustment revenue accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :param adjustment_revenue_accounting_code_type: The adjustment_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code_type = adjustment_revenue_accounting_code_type

    @property
    def contract_asset_accounting_code(self):
        """Gets the contract_asset_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for contract asset.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :return: The contract_asset_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code

    @contract_asset_accounting_code.setter
    def contract_asset_accounting_code(self, contract_asset_accounting_code):
        """Sets the contract_asset_accounting_code of this FinanceInformation.

        The accounting code for contract asset.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :param contract_asset_accounting_code: The contract_asset_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code = contract_asset_accounting_code

    @property
    def contract_asset_accounting_code_type(self):
        """Gets the contract_asset_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the contract asset accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :return: The contract_asset_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code_type

    @contract_asset_accounting_code_type.setter
    def contract_asset_accounting_code_type(self, contract_asset_accounting_code_type):
        """Sets the contract_asset_accounting_code_type of this FinanceInformation.

        The type associated with the contract asset accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :param contract_asset_accounting_code_type: The contract_asset_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code_type = contract_asset_accounting_code_type

    @property
    def contract_liability_accounting_code(self):
        """Gets the contract_liability_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for contract liability.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :return: The contract_liability_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code

    @contract_liability_accounting_code.setter
    def contract_liability_accounting_code(self, contract_liability_accounting_code):
        """Sets the contract_liability_accounting_code of this FinanceInformation.

        The accounting code for contract liability.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :param contract_liability_accounting_code: The contract_liability_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code = contract_liability_accounting_code

    @property
    def contract_liability_accounting_code_type(self):
        """Gets the contract_liability_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the contract liability accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :return: The contract_liability_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code_type

    @contract_liability_accounting_code_type.setter
    def contract_liability_accounting_code_type(self, contract_liability_accounting_code_type):
        """Sets the contract_liability_accounting_code_type of this FinanceInformation.

        The type associated with the contract liability accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :param contract_liability_accounting_code_type: The contract_liability_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code_type = contract_liability_accounting_code_type

    @property
    def contract_recognized_revenue_accounting_code(self):
        """Gets the contract_recognized_revenue_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for contract recognized revenue.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :return: The contract_recognized_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code

    @contract_recognized_revenue_accounting_code.setter
    def contract_recognized_revenue_accounting_code(self, contract_recognized_revenue_accounting_code):
        """Sets the contract_recognized_revenue_accounting_code of this FinanceInformation.

        The accounting code for contract recognized revenue.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :param contract_recognized_revenue_accounting_code: The contract_recognized_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code

    @property
    def contract_recognized_revenue_accounting_code_type(self):
        """Gets the contract_recognized_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the contract recognized revenue accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :return: The contract_recognized_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code_type

    @contract_recognized_revenue_accounting_code_type.setter
    def contract_recognized_revenue_accounting_code_type(self, contract_recognized_revenue_accounting_code_type):
        """Sets the contract_recognized_revenue_accounting_code_type of this FinanceInformation.

        The type associated with the contract recognized revenue accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :param contract_recognized_revenue_accounting_code_type: The contract_recognized_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code_type = contract_recognized_revenue_accounting_code_type

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for deferred revenue, such as Monthly Recurring Liability.    # noqa: E501

        :return: The deferred_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this FinanceInformation.

        The accounting code for deferred revenue, such as Monthly Recurring Liability.    # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code_type(self):
        """Gets the deferred_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the deferred revenue accounting code, such as Deferred Revenue.    # noqa: E501

        :return: The deferred_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code_type

    @deferred_revenue_accounting_code_type.setter
    def deferred_revenue_accounting_code_type(self, deferred_revenue_accounting_code_type):
        """Sets the deferred_revenue_accounting_code_type of this FinanceInformation.

        The type associated with the deferred revenue accounting code, such as Deferred Revenue.    # noqa: E501

        :param deferred_revenue_accounting_code_type: The deferred_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code_type = deferred_revenue_accounting_code_type

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges.    # noqa: E501

        :return: The recognized_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this FinanceInformation.

        The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges.    # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def recognized_revenue_accounting_code_type(self):
        """Gets the recognized_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount.    # noqa: E501

        :return: The recognized_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code_type

    @recognized_revenue_accounting_code_type.setter
    def recognized_revenue_accounting_code_type(self, recognized_revenue_accounting_code_type):
        """Sets the recognized_revenue_accounting_code_type of this FinanceInformation.

        The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount.    # noqa: E501

        :param recognized_revenue_accounting_code_type: The recognized_revenue_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code_type = recognized_revenue_accounting_code_type

    @property
    def unbilled_receivables_accounting_code(self):
        """Gets the unbilled_receivables_accounting_code of this FinanceInformation.  # noqa: E501

        The accounting code for unbilled receivables.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :return: The unbilled_receivables_accounting_code of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_accounting_code

    @unbilled_receivables_accounting_code.setter
    def unbilled_receivables_accounting_code(self, unbilled_receivables_accounting_code):
        """Sets the unbilled_receivables_accounting_code of this FinanceInformation.

        The accounting code for unbilled receivables.   **Note**: This field is only available if you have the RevPro Integration feature enabled.    # noqa: E501

        :param unbilled_receivables_accounting_code: The unbilled_receivables_accounting_code of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    @property
    def unbilled_receivables_accounting_code_type(self):
        """Gets the unbilled_receivables_accounting_code_type of this FinanceInformation.  # noqa: E501

        The type associated with the unbilled receivables accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :return: The unbilled_receivables_accounting_code_type of this FinanceInformation.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_accounting_code_type

    @unbilled_receivables_accounting_code_type.setter
    def unbilled_receivables_accounting_code_type(self, unbilled_receivables_accounting_code_type):
        """Sets the unbilled_receivables_accounting_code_type of this FinanceInformation.

        The type associated with the unbilled receivables accounting code.   **Note**: This field is only available if you have the RevPro Integration feature enabled.   # noqa: E501

        :param unbilled_receivables_accounting_code_type: The unbilled_receivables_accounting_code_type of this FinanceInformation.  # noqa: E501
        :type: str
        """

        self._unbilled_receivables_accounting_code_type = unbilled_receivables_accounting_code_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinanceInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinanceInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
