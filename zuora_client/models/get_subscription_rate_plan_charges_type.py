# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_discount_apply_details_type import GETDiscountApplyDetailsType  # noqa: F401,E501
from zuora_client.models.get_tier_type import GETTierType  # noqa: F401,E501
from zuora_client.models.rate_plan_charge_object_custom_fields import RatePlanChargeObjectCustomFields  # noqa: F401,E501


class GETSubscriptionRatePlanChargesType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_discount_to': 'str',
        'billing_day': 'str',
        'billing_period': 'str',
        'billing_period_alignment': 'str',
        'billing_timing': 'str',
        'charged_through_date': 'date',
        'currency': 'str',
        'description': 'str',
        'discount_amount': 'float',
        'discount_apply_details': 'list[GETDiscountApplyDetailsType]',
        'discount_class': 'str',
        'discount_level': 'str',
        'discount_percentage': 'str',
        'dmrc': 'str',
        'done': 'bool',
        'dtcv': 'str',
        'effective_end_date': 'date',
        'effective_start_date': 'date',
        'end_date_condition': 'str',
        'id': 'str',
        'included_units': 'str',
        'list_price_base': 'str',
        'model': 'str',
        'mrr': 'str',
        'name': 'str',
        'number': 'str',
        'number_of_periods': 'int',
        'original_charge_id': 'str',
        'overage_calculation_option': 'str',
        'overage_price': 'str',
        'overage_unused_units_credit_option': 'str',
        'price': 'float',
        'price_change_option': 'str',
        'price_increase_percentage': 'str',
        'pricing_summary': 'str',
        'processed_through_date': 'date',
        'product_rate_plan_charge_id': 'str',
        'quantity': 'str',
        'rating_group': 'str',
        'segment': 'int',
        'smoothing_model': 'str',
        'specific_billing_period': 'int',
        'specific_end_date': 'date',
        'tcv': 'str',
        'tiers': 'list[GETTierType]',
        'trigger_date': 'date',
        'trigger_event': 'str',
        'type': 'str',
        'unused_units_credit_rates': 'str',
        'uom': 'str',
        'up_to_periods': 'str',
        'up_to_periods_type': 'str',
        'usage_record_rating_option': 'str',
        'version': 'int'
    }

    attribute_map = {
        'apply_discount_to': 'applyDiscountTo',
        'billing_day': 'billingDay',
        'billing_period': 'billingPeriod',
        'billing_period_alignment': 'billingPeriodAlignment',
        'billing_timing': 'billingTiming',
        'charged_through_date': 'chargedThroughDate',
        'currency': 'currency',
        'description': 'description',
        'discount_amount': 'discountAmount',
        'discount_apply_details': 'discountApplyDetails',
        'discount_class': 'discountClass',
        'discount_level': 'discountLevel',
        'discount_percentage': 'discountPercentage',
        'dmrc': 'dmrc',
        'done': 'done',
        'dtcv': 'dtcv',
        'effective_end_date': 'effectiveEndDate',
        'effective_start_date': 'effectiveStartDate',
        'end_date_condition': 'endDateCondition',
        'id': 'id',
        'included_units': 'includedUnits',
        'list_price_base': 'listPriceBase',
        'model': 'model',
        'mrr': 'mrr',
        'name': 'name',
        'number': 'number',
        'number_of_periods': 'numberOfPeriods',
        'original_charge_id': 'originalChargeId',
        'overage_calculation_option': 'overageCalculationOption',
        'overage_price': 'overagePrice',
        'overage_unused_units_credit_option': 'overageUnusedUnitsCreditOption',
        'price': 'price',
        'price_change_option': 'priceChangeOption',
        'price_increase_percentage': 'priceIncreasePercentage',
        'pricing_summary': 'pricingSummary',
        'processed_through_date': 'processedThroughDate',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'quantity': 'quantity',
        'rating_group': 'ratingGroup',
        'segment': 'segment',
        'smoothing_model': 'smoothingModel',
        'specific_billing_period': 'specificBillingPeriod',
        'specific_end_date': 'specificEndDate',
        'tcv': 'tcv',
        'tiers': 'tiers',
        'trigger_date': 'triggerDate',
        'trigger_event': 'triggerEvent',
        'type': 'type',
        'unused_units_credit_rates': 'unusedUnitsCreditRates',
        'uom': 'uom',
        'up_to_periods': 'upToPeriods',
        'up_to_periods_type': 'upToPeriodsType',
        'usage_record_rating_option': 'usageRecordRatingOption',
        'version': 'version'
    }

    def __init__(self, apply_discount_to=None, billing_day=None, billing_period=None, billing_period_alignment=None, billing_timing=None, charged_through_date=None, currency=None, description=None, discount_amount=None, discount_apply_details=None, discount_class=None, discount_level=None, discount_percentage=None, dmrc=None, done=None, dtcv=None, effective_end_date=None, effective_start_date=None, end_date_condition=None, id=None, included_units=None, list_price_base=None, model=None, mrr=None, name=None, number=None, number_of_periods=None, original_charge_id=None, overage_calculation_option=None, overage_price=None, overage_unused_units_credit_option=None, price=None, price_change_option=None, price_increase_percentage=None, pricing_summary=None, processed_through_date=None, product_rate_plan_charge_id=None, quantity=None, rating_group=None, segment=None, smoothing_model=None, specific_billing_period=None, specific_end_date=None, tcv=None, tiers=None, trigger_date=None, trigger_event=None, type=None, unused_units_credit_rates=None, uom=None, up_to_periods=None, up_to_periods_type=None, usage_record_rating_option=None, version=None):  # noqa: E501
        """GETSubscriptionRatePlanChargesType - a model defined in Swagger"""  # noqa: E501

        self._apply_discount_to = None
        self._billing_day = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._charged_through_date = None
        self._currency = None
        self._description = None
        self._discount_amount = None
        self._discount_apply_details = None
        self._discount_class = None
        self._discount_level = None
        self._discount_percentage = None
        self._dmrc = None
        self._done = None
        self._dtcv = None
        self._effective_end_date = None
        self._effective_start_date = None
        self._end_date_condition = None
        self._id = None
        self._included_units = None
        self._list_price_base = None
        self._model = None
        self._mrr = None
        self._name = None
        self._number = None
        self._number_of_periods = None
        self._original_charge_id = None
        self._overage_calculation_option = None
        self._overage_price = None
        self._overage_unused_units_credit_option = None
        self._price = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._pricing_summary = None
        self._processed_through_date = None
        self._product_rate_plan_charge_id = None
        self._quantity = None
        self._rating_group = None
        self._segment = None
        self._smoothing_model = None
        self._specific_billing_period = None
        self._specific_end_date = None
        self._tcv = None
        self._tiers = None
        self._trigger_date = None
        self._trigger_event = None
        self._type = None
        self._unused_units_credit_rates = None
        self._uom = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._usage_record_rating_option = None
        self._version = None
        self.discriminator = None

        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if billing_day is not None:
            self.billing_day = billing_day
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charged_through_date is not None:
            self.charged_through_date = charged_through_date
        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_apply_details is not None:
            self.discount_apply_details = discount_apply_details
        if discount_class is not None:
            self.discount_class = discount_class
        if discount_level is not None:
            self.discount_level = discount_level
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if dmrc is not None:
            self.dmrc = dmrc
        if done is not None:
            self.done = done
        if dtcv is not None:
            self.dtcv = dtcv
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if id is not None:
            self.id = id
        if included_units is not None:
            self.included_units = included_units
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if model is not None:
            self.model = model
        if mrr is not None:
            self.mrr = mrr
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if number_of_periods is not None:
            self.number_of_periods = number_of_periods
        if original_charge_id is not None:
            self.original_charge_id = original_charge_id
        if overage_calculation_option is not None:
            self.overage_calculation_option = overage_calculation_option
        if overage_price is not None:
            self.overage_price = overage_price
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if price is not None:
            self.price = price
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if pricing_summary is not None:
            self.pricing_summary = pricing_summary
        if processed_through_date is not None:
            self.processed_through_date = processed_through_date
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if quantity is not None:
            self.quantity = quantity
        if rating_group is not None:
            self.rating_group = rating_group
        if segment is not None:
            self.segment = segment
        if smoothing_model is not None:
            self.smoothing_model = smoothing_model
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if tcv is not None:
            self.tcv = tcv
        if tiers is not None:
            self.tiers = tiers
        if trigger_date is not None:
            self.trigger_date = trigger_date
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if type is not None:
            self.type = type
        if unused_units_credit_rates is not None:
            self.unused_units_credit_rates = unused_units_credit_rates
        if uom is not None:
            self.uom = uom
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if usage_record_rating_option is not None:
            self.usage_record_rating_option = usage_record_rating_option
        if version is not None:
            self.version = version

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies the type of charges a specific discount applies to.   This field is only used when applied to a discount charge model. If you are not using a discount charge model, the value is null.  Possible values:  * `RECURRING` * `USAGE` * `ONETIMERECURRING` * `ONETIMEUSAGE` * `RECURRINGUSAGE` * `ONETIMERECURRINGUSAGE`   # noqa: E501

        :return: The apply_discount_to of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this GETSubscriptionRatePlanChargesType.

        Specifies the type of charges a specific discount applies to.   This field is only used when applied to a discount charge model. If you are not using a discount charge model, the value is null.  Possible values:  * `RECURRING` * `USAGE` * `ONETIMERECURRING` * `ONETIMEUSAGE` * `RECURRINGUSAGE` * `ONETIMERECURRINGUSAGE`   # noqa: E501

        :param apply_discount_to: The apply_discount_to of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._apply_discount_to = apply_discount_to

    @property
    def billing_day(self):
        """Gets the billing_day of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.    Values:  * `DefaultFromCustomer` * `SpecificDayofMonth(#)` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.  In the response data, a day-of-the-month value (`1`-`31`) appears in place of the hash sign above (\"#\"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.   # noqa: E501

        :return: The billing_day of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._billing_day

    @billing_day.setter
    def billing_day(self, billing_day):
        """Sets the billing_day of this GETSubscriptionRatePlanChargesType.

        Billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.    Values:  * `DefaultFromCustomer` * `SpecificDayofMonth(#)` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.  In the response data, a day-of-the-month value (`1`-`31`) appears in place of the hash sign above (\"#\"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.   # noqa: E501

        :param billing_day: The billing_day of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._billing_day = billing_day

    @property
    def billing_period(self):
        """Gets the billing_period of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Allows billing period to be overridden on the rate plan charge.   # noqa: E501

        :return: The billing_period of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this GETSubscriptionRatePlanChargesType.

        Allows billing period to be overridden on the rate plan charge.   # noqa: E501

        :param billing_period: The billing_period of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Possible values:  * `AlignToCharge` * `AlignToSubscriptionStart` * `AlignToTermStart`   # noqa: E501

        :return: The billing_period_alignment of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this GETSubscriptionRatePlanChargesType.

        Possible values:  * `AlignToCharge` * `AlignToSubscriptionStart` * `AlignToTermStart`   # noqa: E501

        :param billing_period_alignment: The billing_period_alignment of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The billing timing for the charge. This field is only used if the `ratePlanChargeType` value is `Recurring`.  Possible values are:  * `In Advance` * `In Arrears`  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :return: The billing_timing of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this GETSubscriptionRatePlanChargesType.

        The billing timing for the charge. This field is only used if the `ratePlanChargeType` value is `Recurring`.  Possible values are:  * `In Advance` * `In Arrears`  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :param billing_timing: The billing_timing of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._billing_timing = billing_timing

    @property
    def charged_through_date(self):
        """Gets the charged_through_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The date through which a customer has been billed for the charge.   # noqa: E501

        :return: The charged_through_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: date
        """
        return self._charged_through_date

    @charged_through_date.setter
    def charged_through_date(self, charged_through_date):
        """Sets the charged_through_date of this GETSubscriptionRatePlanChargesType.

        The date through which a customer has been billed for the charge.   # noqa: E501

        :param charged_through_date: The charged_through_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: date
        """

        self._charged_through_date = charged_through_date

    @property
    def currency(self):
        """Gets the currency of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Currency used by the account. For example, `USD` or `EUR`.   # noqa: E501

        :return: The currency of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETSubscriptionRatePlanChargesType.

        Currency used by the account. For example, `USD` or `EUR`.   # noqa: E501

        :param currency: The currency of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Description of the rate plan charge.   # noqa: E501

        :return: The description of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GETSubscriptionRatePlanChargesType.

        Description of the rate plan charge.   # noqa: E501

        :param description: The description of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The amount of the discount.   # noqa: E501

        :return: The discount_amount of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this GETSubscriptionRatePlanChargesType.

        The amount of the discount.   # noqa: E501

        :param discount_amount: The discount_amount of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._discount_amount = discount_amount

    @property
    def discount_apply_details(self):
        """Gets the discount_apply_details of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field.   # noqa: E501

        :return: The discount_apply_details of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: list[GETDiscountApplyDetailsType]
        """
        return self._discount_apply_details

    @discount_apply_details.setter
    def discount_apply_details(self, discount_apply_details):
        """Sets the discount_apply_details of this GETSubscriptionRatePlanChargesType.

        Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field.   # noqa: E501

        :param discount_apply_details: The discount_apply_details of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: list[GETDiscountApplyDetailsType]
        """

        self._discount_apply_details = discount_apply_details

    @property
    def discount_class(self):
        """Gets the discount_class of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :return: The discount_class of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._discount_class

    @discount_class.setter
    def discount_class(self, discount_class):
        """Sets the discount_class of this GETSubscriptionRatePlanChargesType.

        The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :param discount_class: The discount_class of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._discount_class = discount_class

    @property
    def discount_level(self):
        """Gets the discount_level of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The level of the discount. Values: `RatePlan`, `Subscription`, `Account`.   # noqa: E501

        :return: The discount_level of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this GETSubscriptionRatePlanChargesType.

        The level of the discount. Values: `RatePlan`, `Subscription`, `Account`.   # noqa: E501

        :param discount_level: The discount_level of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._discount_level = discount_level

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The amount of the discount as a percentage.   # noqa: E501

        :return: The discount_percentage of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this GETSubscriptionRatePlanChargesType.

        The amount of the discount as a percentage.   # noqa: E501

        :param discount_percentage: The discount_percentage of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._discount_percentage = discount_percentage

    @property
    def dmrc(self):
        """Gets the dmrc of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.   # noqa: E501

        :return: The dmrc of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._dmrc

    @dmrc.setter
    def dmrc(self, dmrc):
        """Sets the dmrc of this GETSubscriptionRatePlanChargesType.

        The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.   # noqa: E501

        :param dmrc: The dmrc of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._dmrc = dmrc

    @property
    def done(self):
        """Gets the done of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not bee completed for the charge segment.   # noqa: E501

        :return: The done of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this GETSubscriptionRatePlanChargesType.

        A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not bee completed for the charge segment.   # noqa: E501

        :param done: The done of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def dtcv(self):
        """Gets the dtcv of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.   # noqa: E501

        :return: The dtcv of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._dtcv

    @dtcv.setter
    def dtcv(self, dtcv):
        """Sets the dtcv of this GETSubscriptionRatePlanChargesType.

        After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.   # noqa: E501

        :param dtcv: The dtcv of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._dtcv = dtcv

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The effective end date of the rate plan charge.   # noqa: E501

        :return: The effective_end_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this GETSubscriptionRatePlanChargesType.

        The effective end date of the rate plan charge.   # noqa: E501

        :param effective_end_date: The effective_end_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The effective start date of the rate plan charge.   # noqa: E501

        :return: The effective_start_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this GETSubscriptionRatePlanChargesType.

        The effective start date of the rate plan charge.   # noqa: E501

        :param effective_start_date: The effective_start_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Defines when the charge ends after the charge trigger date.  If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values:  * `Subscription_End` * `Fixed_Period` * `Specific_End_Date`   # noqa: E501

        :return: The end_date_condition of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this GETSubscriptionRatePlanChargesType.

        Defines when the charge ends after the charge trigger date.  If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values:  * `Subscription_End` * `Fixed_Period` * `Specific_End_Date`   # noqa: E501

        :param end_date_condition: The end_date_condition of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._end_date_condition = end_date_condition

    @property
    def id(self):
        """Gets the id of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Rate plan charge ID.   # noqa: E501

        :return: The id of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETSubscriptionRatePlanChargesType.

        Rate plan charge ID.   # noqa: E501

        :param id: The id of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def included_units(self):
        """Gets the included_units of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies the number of units in the base set of units.   # noqa: E501

        :return: The included_units of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this GETSubscriptionRatePlanChargesType.

        Specifies the number of units in the base set of units.   # noqa: E501

        :param included_units: The included_units of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._included_units = included_units

    @property
    def list_price_base(self):
        """Gets the list_price_base of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        List price base; possible values are:  * `Per_Billing_Period` * `Per_Month` * `Per_Week`   # noqa: E501

        :return: The list_price_base of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this GETSubscriptionRatePlanChargesType.

        List price base; possible values are:  * `Per_Billing_Period` * `Per_Month` * `Per_Week`   # noqa: E501

        :param list_price_base: The list_price_base of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._list_price_base = list_price_base

    @property
    def model(self):
        """Gets the model of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Charge model; possible values are:  * `FlatFee` * `PerUnit` * `Overage` * `Volume` * `Tiered` * `TieredWithOverage` * `DiscountFixedAmount` * `DiscountPercentage`   # noqa: E501

        :return: The model of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GETSubscriptionRatePlanChargesType.

        Charge model; possible values are:  * `FlatFee` * `PerUnit` * `Overage` * `Volume` * `Tiered` * `TieredWithOverage` * `DiscountFixedAmount` * `DiscountPercentage`   # noqa: E501

        :param model: The model of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def mrr(self):
        """Gets the mrr of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Monthly recurring revenue of the rate plan charge.   # noqa: E501

        :return: The mrr of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._mrr

    @mrr.setter
    def mrr(self, mrr):
        """Sets the mrr of this GETSubscriptionRatePlanChargesType.

        Monthly recurring revenue of the rate plan charge.   # noqa: E501

        :param mrr: The mrr of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._mrr = mrr

    @property
    def name(self):
        """Gets the name of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Charge name.   # noqa: E501

        :return: The name of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GETSubscriptionRatePlanChargesType.

        Charge name.   # noqa: E501

        :param name: The name of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Charge number.   # noqa: E501

        :return: The number of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GETSubscriptionRatePlanChargesType.

        Charge number.   # noqa: E501

        :param number: The number of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def number_of_periods(self):
        """Gets the number_of_periods of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model.   # noqa: E501

        :return: The number_of_periods of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: int
        """
        return self._number_of_periods

    @number_of_periods.setter
    def number_of_periods(self, number_of_periods):
        """Sets the number_of_periods of this GETSubscriptionRatePlanChargesType.

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model.   # noqa: E501

        :param number_of_periods: The number_of_periods of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: int
        """

        self._number_of_periods = number_of_periods

    @property
    def original_charge_id(self):
        """Gets the original_charge_id of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The original ID of the rate plan charge.   # noqa: E501

        :return: The original_charge_id of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._original_charge_id

    @original_charge_id.setter
    def original_charge_id(self, original_charge_id):
        """Sets the original_charge_id of this GETSubscriptionRatePlanChargesType.

        The original ID of the rate plan charge.   # noqa: E501

        :param original_charge_id: The original_charge_id of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._original_charge_id = original_charge_id

    @property
    def overage_calculation_option(self):
        """Gets the overage_calculation_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Determines when to calculate overage charges.   # noqa: E501

        :return: The overage_calculation_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._overage_calculation_option

    @overage_calculation_option.setter
    def overage_calculation_option(self, overage_calculation_option):
        """Sets the overage_calculation_option of this GETSubscriptionRatePlanChargesType.

        Determines when to calculate overage charges.   # noqa: E501

        :param overage_calculation_option: The overage_calculation_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._overage_calculation_option = overage_calculation_option

    @property
    def overage_price(self):
        """Gets the overage_price of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The price for units over the allowed amount.   # noqa: E501

        :return: The overage_price of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._overage_price

    @overage_price.setter
    def overage_price(self, overage_price):
        """Sets the overage_price of this GETSubscriptionRatePlanChargesType.

        The price for units over the allowed amount.   # noqa: E501

        :param overage_price: The overage_price of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._overage_price = overage_price

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Determines whether to credit the customer with unused units of usage.   # noqa: E501

        :return: The overage_unused_units_credit_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this GETSubscriptionRatePlanChargesType.

        Determines whether to credit the customer with unused units of usage.   # noqa: E501

        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def price(self):
        """Gets the price of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The price associated with the rate plan charge expressed as a decimal.   # noqa: E501

        :return: The price of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GETSubscriptionRatePlanChargesType.

        The price associated with the rate plan charge expressed as a decimal.   # noqa: E501

        :param price: The price of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def price_change_option(self):
        """Gets the price_change_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        When the following is true:  1. AutomatedPriceChange setting is on  2. Charge type is not one-time  3. Charge model is not discount percentage  Then an automatic price change can have a value for when a termed subscription is renewed.   Values (one of the following):  * `NoChange` (default) * `SpecificPercentageValue` * `UseLatestProductCatalogPricing`   # noqa: E501

        :return: The price_change_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this GETSubscriptionRatePlanChargesType.

        When the following is true:  1. AutomatedPriceChange setting is on  2. Charge type is not one-time  3. Charge model is not discount percentage  Then an automatic price change can have a value for when a termed subscription is renewed.   Values (one of the following):  * `NoChange` (default) * `SpecificPercentageValue` * `UseLatestProductCatalogPricing`   # noqa: E501

        :param price_change_option: The price_change_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        A planned future price increase amount as a percentage.   # noqa: E501

        :return: The price_increase_percentage of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this GETSubscriptionRatePlanChargesType.

        A planned future price increase amount as a percentage.   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def pricing_summary(self):
        """Gets the pricing_summary of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Concise description of rate plan charge model.   # noqa: E501

        :return: The pricing_summary of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._pricing_summary

    @pricing_summary.setter
    def pricing_summary(self, pricing_summary):
        """Sets the pricing_summary of this GETSubscriptionRatePlanChargesType.

        Concise description of rate plan charge model.   # noqa: E501

        :param pricing_summary: The pricing_summary of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._pricing_summary = pricing_summary

    @property
    def processed_through_date(self):
        """Gets the processed_through_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.   # noqa: E501

        :return: The processed_through_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: date
        """
        return self._processed_through_date

    @processed_through_date.setter
    def processed_through_date(self, processed_through_date):
        """Sets the processed_through_date of this GETSubscriptionRatePlanChargesType.

        The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.   # noqa: E501

        :param processed_through_date: The processed_through_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: date
        """

        self._processed_through_date = processed_through_date

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this GETSubscriptionRatePlanChargesType.  # noqa: E501

          # noqa: E501

        :return: The product_rate_plan_charge_id of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this GETSubscriptionRatePlanChargesType.

          # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def quantity(self):
        """Gets the quantity of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.   # noqa: E501

        :return: The quantity of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GETSubscriptionRatePlanChargesType.

        The quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.   # noqa: E501

        :param quantity: The quantity of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def rating_group(self):
        """Gets the rating_group of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies a rating group based on which usage records are rated.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have [Active Rating](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/H_Active_Rating) feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :return: The rating_group of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this GETSubscriptionRatePlanChargesType.

        Specifies a rating group based on which usage records are rated.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have [Active Rating](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/H_Active_Rating) feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :param rating_group: The rating_group of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._rating_group = rating_group

    @property
    def segment(self):
        """Gets the segment of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.   # noqa: E501

        :return: The segment of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: int
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this GETSubscriptionRatePlanChargesType.

        The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.   # noqa: E501

        :param segment: The segment of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: int
        """

        self._segment = segment

    @property
    def smoothing_model(self):
        """Gets the smoothing_model of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies when revenue recognition begins. When charge model is `Overage` or `TieredWithOverage`, `smoothingModel` will be one of the following values:  * `ContractEffectiveDate` * `ServiceActivationDate` * `CustomerAcceptanceDate`   # noqa: E501

        :return: The smoothing_model of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._smoothing_model

    @smoothing_model.setter
    def smoothing_model(self, smoothing_model):
        """Sets the smoothing_model of this GETSubscriptionRatePlanChargesType.

        Specifies when revenue recognition begins. When charge model is `Overage` or `TieredWithOverage`, `smoothingModel` will be one of the following values:  * `ContractEffectiveDate` * `ServiceActivationDate` * `CustomerAcceptanceDate`   # noqa: E501

        :param smoothing_model: The smoothing_model of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._smoothing_model = smoothing_model

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Customizes the number of month or week for the charges billing period. This field is required if you set the value of the `BillingPeriod` field to `Specific_Months` or `Specific_Weeks`.   # noqa: E501

        :return: The specific_billing_period of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this GETSubscriptionRatePlanChargesType.

        Customizes the number of month or week for the charges billing period. This field is required if you set the value of the `BillingPeriod` field to `Specific_Months` or `Specific_Weeks`.   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The specific date on which the charge ends. If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :return: The specific_end_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this GETSubscriptionRatePlanChargesType.

        The specific date on which the charge ends. If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :param specific_end_date: The specific_end_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def tcv(self):
        """Gets the tcv of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The total contract value.   # noqa: E501

        :return: The tcv of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._tcv

    @tcv.setter
    def tcv(self, tcv):
        """Sets the tcv of this GETSubscriptionRatePlanChargesType.

        The total contract value.   # noqa: E501

        :param tcv: The tcv of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._tcv = tcv

    @property
    def tiers(self):
        """Gets the tiers of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        One or many defined ranges with distinct pricing.   # noqa: E501

        :return: The tiers of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: list[GETTierType]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this GETSubscriptionRatePlanChargesType.

        One or many defined ranges with distinct pricing.   # noqa: E501

        :param tiers: The tiers of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: list[GETTierType]
        """

        self._tiers = tiers

    @property
    def trigger_date(self):
        """Gets the trigger_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The date that the rate plan charge will be triggered.   # noqa: E501

        :return: The trigger_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: date
        """
        return self._trigger_date

    @trigger_date.setter
    def trigger_date(self, trigger_date):
        """Sets the trigger_date of this GETSubscriptionRatePlanChargesType.

        The date that the rate plan charge will be triggered.   # noqa: E501

        :param trigger_date: The trigger_date of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: date
        """

        self._trigger_date = trigger_date

    @property
    def trigger_event(self):
        """Gets the trigger_event of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The event that will cause the rate plan charge to be triggered.  Possible values:   * `ContractEffective` * `ServiceActivation` * `CustomerAcceptance` * `SpecificDate`   # noqa: E501

        :return: The trigger_event of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this GETSubscriptionRatePlanChargesType.

        The event that will cause the rate plan charge to be triggered.  Possible values:   * `ContractEffective` * `ServiceActivation` * `CustomerAcceptance` * `SpecificDate`   # noqa: E501

        :param trigger_event: The trigger_event of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._trigger_event = trigger_event

    @property
    def type(self):
        """Gets the type of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Charge type. Possible values are: `OneTime`, `Recurring`, `Usage`.   # noqa: E501

        :return: The type of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GETSubscriptionRatePlanChargesType.

        Charge type. Possible values are: `OneTime`, `Recurring`, `Usage`.   # noqa: E501

        :param type: The type of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unused_units_credit_rates(self):
        """Gets the unused_units_credit_rates of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the  `OverageUnusedUnitsCreditOption` field value is `CreditBySpecificRate`.   # noqa: E501

        :return: The unused_units_credit_rates of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._unused_units_credit_rates

    @unused_units_credit_rates.setter
    def unused_units_credit_rates(self, unused_units_credit_rates):
        """Sets the unused_units_credit_rates of this GETSubscriptionRatePlanChargesType.

        Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the  `OverageUnusedUnitsCreditOption` field value is `CreditBySpecificRate`.   # noqa: E501

        :param unused_units_credit_rates: The unused_units_credit_rates of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._unused_units_credit_rates = unused_units_credit_rates

    @property
    def uom(self):
        """Gets the uom of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies the units to measure usage.    # noqa: E501

        :return: The uom of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this GETSubscriptionRatePlanChargesType.

        Specifies the units to measure usage.    # noqa: E501

        :param uom: The uom of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.  If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :return: The up_to_periods of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this GETSubscriptionRatePlanChargesType.

        Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.  If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :param up_to_periods: The up_to_periods of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`   # noqa: E501

        :return: The up_to_periods_type of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this GETSubscriptionRatePlanChargesType.

        The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`   # noqa: E501

        :param up_to_periods_type: The up_to_periods_type of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def usage_record_rating_option(self):
        """Gets the usage_record_rating_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Determines how Zuora processes usage records for per-unit usage charges.    # noqa: E501

        :return: The usage_record_rating_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: str
        """
        return self._usage_record_rating_option

    @usage_record_rating_option.setter
    def usage_record_rating_option(self, usage_record_rating_option):
        """Sets the usage_record_rating_option of this GETSubscriptionRatePlanChargesType.

        Determines how Zuora processes usage records for per-unit usage charges.    # noqa: E501

        :param usage_record_rating_option: The usage_record_rating_option of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: str
        """

        self._usage_record_rating_option = usage_record_rating_option

    @property
    def version(self):
        """Gets the version of this GETSubscriptionRatePlanChargesType.  # noqa: E501

        Rate plan charge revision number.   # noqa: E501

        :return: The version of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GETSubscriptionRatePlanChargesType.

        Rate plan charge revision number.   # noqa: E501

        :param version: The version of this GETSubscriptionRatePlanChargesType.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETSubscriptionRatePlanChargesType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETSubscriptionRatePlanChargesType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
