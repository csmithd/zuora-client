# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_journal_entry_item_type import GETJournalEntryItemType  # noqa: F401,E501
from zuora_client.models.get_journal_entry_segment_type import GETJournalEntrySegmentType  # noqa: F401,E501
from zuora_client.models.journal_entry_object_custom_fields import JournalEntryObjectCustomFields  # noqa: F401,E501


class GETJournalEntryDetailTypeWithoutSuccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_period_name': 'str',
        'aggregate_currency': 'bool',
        'currency': 'str',
        'home_currency': 'str',
        'journal_entry_date': 'date',
        'journal_entry_items': 'list[GETJournalEntryItemType]',
        'notes': 'str',
        'number': 'str',
        'segments': 'list[GETJournalEntrySegmentType]',
        'status': 'str',
        'time_period_end': 'date',
        'time_period_start': 'date',
        'transaction_type': 'str',
        'transfer_date_time': 'datetime',
        'transferred_by': 'str',
        'transferred_to_accounting': 'str'
    }

    attribute_map = {
        'accounting_period_name': 'accountingPeriodName',
        'aggregate_currency': 'aggregateCurrency',
        'currency': 'currency',
        'home_currency': 'homeCurrency',
        'journal_entry_date': 'journalEntryDate',
        'journal_entry_items': 'journalEntryItems',
        'notes': 'notes',
        'number': 'number',
        'segments': 'segments',
        'status': 'status',
        'time_period_end': 'timePeriodEnd',
        'time_period_start': 'timePeriodStart',
        'transaction_type': 'transactionType',
        'transfer_date_time': 'transferDateTime',
        'transferred_by': 'transferredBy',
        'transferred_to_accounting': 'transferredToAccounting'
    }

    def __init__(self, accounting_period_name=None, aggregate_currency=None, currency=None, home_currency=None, journal_entry_date=None, journal_entry_items=None, notes=None, number=None, segments=None, status=None, time_period_end=None, time_period_start=None, transaction_type=None, transfer_date_time=None, transferred_by=None, transferred_to_accounting=None):  # noqa: E501
        """GETJournalEntryDetailTypeWithoutSuccess - a model defined in Swagger"""  # noqa: E501

        self._accounting_period_name = None
        self._aggregate_currency = None
        self._currency = None
        self._home_currency = None
        self._journal_entry_date = None
        self._journal_entry_items = None
        self._notes = None
        self._number = None
        self._segments = None
        self._status = None
        self._time_period_end = None
        self._time_period_start = None
        self._transaction_type = None
        self._transfer_date_time = None
        self._transferred_by = None
        self._transferred_to_accounting = None
        self.discriminator = None

        if accounting_period_name is not None:
            self.accounting_period_name = accounting_period_name
        if aggregate_currency is not None:
            self.aggregate_currency = aggregate_currency
        if currency is not None:
            self.currency = currency
        if home_currency is not None:
            self.home_currency = home_currency
        if journal_entry_date is not None:
            self.journal_entry_date = journal_entry_date
        if journal_entry_items is not None:
            self.journal_entry_items = journal_entry_items
        if notes is not None:
            self.notes = notes
        if number is not None:
            self.number = number
        if segments is not None:
            self.segments = segments
        if status is not None:
            self.status = status
        if time_period_end is not None:
            self.time_period_end = time_period_end
        if time_period_start is not None:
            self.time_period_start = time_period_start
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if transfer_date_time is not None:
            self.transfer_date_time = transfer_date_time
        if transferred_by is not None:
            self.transferred_by = transferred_by
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting

    @property
    def accounting_period_name(self):
        """Gets the accounting_period_name of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Name of the accounting period that the journal entry belongs to.   # noqa: E501

        :return: The accounting_period_name of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period_name

    @accounting_period_name.setter
    def accounting_period_name(self, accounting_period_name):
        """Sets the accounting_period_name of this GETJournalEntryDetailTypeWithoutSuccess.

        Name of the accounting period that the journal entry belongs to.   # noqa: E501

        :param accounting_period_name: The accounting_period_name of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._accounting_period_name = accounting_period_name

    @property
    def aggregate_currency(self):
        """Gets the aggregate_currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a JournalRun` setting was configured to \"Yes\". Otherwise, returns `false`.   # noqa: E501

        :return: The aggregate_currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: bool
        """
        return self._aggregate_currency

    @aggregate_currency.setter
    def aggregate_currency(self, aggregate_currency):
        """Sets the aggregate_currency of this GETJournalEntryDetailTypeWithoutSuccess.

        Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a JournalRun` setting was configured to \"Yes\". Otherwise, returns `false`.   # noqa: E501

        :param aggregate_currency: The aggregate_currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: bool
        """

        self._aggregate_currency = aggregate_currency

    @property
    def currency(self):
        """Gets the currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Currency used.   # noqa: E501

        :return: The currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETJournalEntryDetailTypeWithoutSuccess.

        Currency used.   # noqa: E501

        :param currency: The currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def home_currency(self):
        """Gets the home_currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Home currency used.   # noqa: E501

        :return: The home_currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._home_currency

    @home_currency.setter
    def home_currency(self, home_currency):
        """Sets the home_currency of this GETJournalEntryDetailTypeWithoutSuccess.

        Home currency used.   # noqa: E501

        :param home_currency: The home_currency of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._home_currency = home_currency

    @property
    def journal_entry_date(self):
        """Gets the journal_entry_date of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Date of the journal entry.   # noqa: E501

        :return: The journal_entry_date of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: date
        """
        return self._journal_entry_date

    @journal_entry_date.setter
    def journal_entry_date(self, journal_entry_date):
        """Sets the journal_entry_date of this GETJournalEntryDetailTypeWithoutSuccess.

        Date of the journal entry.   # noqa: E501

        :param journal_entry_date: The journal_entry_date of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: date
        """

        self._journal_entry_date = journal_entry_date

    @property
    def journal_entry_items(self):
        """Gets the journal_entry_items of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Key name that represents the list of journal entry items.   # noqa: E501

        :return: The journal_entry_items of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: list[GETJournalEntryItemType]
        """
        return self._journal_entry_items

    @journal_entry_items.setter
    def journal_entry_items(self, journal_entry_items):
        """Sets the journal_entry_items of this GETJournalEntryDetailTypeWithoutSuccess.

        Key name that represents the list of journal entry items.   # noqa: E501

        :param journal_entry_items: The journal_entry_items of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: list[GETJournalEntryItemType]
        """

        self._journal_entry_items = journal_entry_items

    @property
    def notes(self):
        """Gets the notes of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Additional information about this record. Character limit: 2,000   # noqa: E501

        :return: The notes of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GETJournalEntryDetailTypeWithoutSuccess.

        Additional information about this record. Character limit: 2,000   # noqa: E501

        :param notes: The notes of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def number(self):
        """Gets the number of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Journal entry number in the format JE-00000001.   # noqa: E501

        :return: The number of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GETJournalEntryDetailTypeWithoutSuccess.

        Journal entry number in the format JE-00000001.   # noqa: E501

        :param number: The number of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def segments(self):
        """Gets the segments of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        List of segments that apply to the summary journal entry.   # noqa: E501

        :return: The segments of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: list[GETJournalEntrySegmentType]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this GETJournalEntryDetailTypeWithoutSuccess.

        List of segments that apply to the summary journal entry.   # noqa: E501

        :param segments: The segments of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: list[GETJournalEntrySegmentType]
        """

        self._segments = segments

    @property
    def status(self):
        """Gets the status of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Status of journal entry.   # noqa: E501

        :return: The status of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETJournalEntryDetailTypeWithoutSuccess.

        Status of journal entry.   # noqa: E501

        :param status: The status of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """
        allowed_values = ["Created", "Cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_period_end(self):
        """Gets the time_period_end of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        End date of time period included in the journal entry.   # noqa: E501

        :return: The time_period_end of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: date
        """
        return self._time_period_end

    @time_period_end.setter
    def time_period_end(self, time_period_end):
        """Sets the time_period_end of this GETJournalEntryDetailTypeWithoutSuccess.

        End date of time period included in the journal entry.   # noqa: E501

        :param time_period_end: The time_period_end of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: date
        """

        self._time_period_end = time_period_end

    @property
    def time_period_start(self):
        """Gets the time_period_start of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Start date of time period included in the journal entry.   # noqa: E501

        :return: The time_period_start of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: date
        """
        return self._time_period_start

    @time_period_start.setter
    def time_period_start(self, time_period_start):
        """Sets the time_period_start of this GETJournalEntryDetailTypeWithoutSuccess.

        Start date of time period included in the journal entry.   # noqa: E501

        :param time_period_start: The time_period_start of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: date
        """

        self._time_period_start = time_period_start

    @property
    def transaction_type(self):
        """Gets the transaction_type of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Transaction type of the transactions included in the summary journal entry.   # noqa: E501

        :return: The transaction_type of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this GETJournalEntryDetailTypeWithoutSuccess.

        Transaction type of the transactions included in the summary journal entry.   # noqa: E501

        :param transaction_type: The transaction_type of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def transfer_date_time(self):
        """Gets the transfer_date_time of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.   # noqa: E501

        :return: The transfer_date_time of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: datetime
        """
        return self._transfer_date_time

    @transfer_date_time.setter
    def transfer_date_time(self, transfer_date_time):
        """Sets the transfer_date_time of this GETJournalEntryDetailTypeWithoutSuccess.

        Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.   # noqa: E501

        :param transfer_date_time: The transfer_date_time of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: datetime
        """

        self._transfer_date_time = transfer_date_time

    @property
    def transferred_by(self):
        """Gets the transferred_by of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.   # noqa: E501

        :return: The transferred_by of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._transferred_by

    @transferred_by.setter
    def transferred_by(self, transferred_by):
        """Sets the transferred_by of this GETJournalEntryDetailTypeWithoutSuccess.

        User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.   # noqa: E501

        :param transferred_by: The transferred_by of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """

        self._transferred_by = transferred_by

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501

        Status shows whether the journal entry has been transferred to an accounting system.   # noqa: E501

        :return: The transferred_to_accounting of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this GETJournalEntryDetailTypeWithoutSuccess.

        Status shows whether the journal entry has been transferred to an accounting system.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this GETJournalEntryDetailTypeWithoutSuccess.  # noqa: E501
        :type: str
        """
        allowed_values = ["No", "Processing", "Yes", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETJournalEntryDetailTypeWithoutSuccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETJournalEntryDetailTypeWithoutSuccess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
