# coding: utf-8




import pprint
import re  # noqa: F401

import six


class TaxInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vat_id': 'str',
        'company_code': 'str',
        'exempt_certificate_id': 'str',
        'exempt_certificate_type': 'str',
        'exempt_description': 'str',
        'exempt_effective_date': 'date',
        'exempt_expiration_date': 'date',
        'exempt_issuing_jurisdiction': 'str',
        'exempt_status': 'str'
    }

    attribute_map = {
        'vat_id': 'VATId',
        'company_code': 'companyCode',
        'exempt_certificate_id': 'exemptCertificateId',
        'exempt_certificate_type': 'exemptCertificateType',
        'exempt_description': 'exemptDescription',
        'exempt_effective_date': 'exemptEffectiveDate',
        'exempt_expiration_date': 'exemptExpirationDate',
        'exempt_issuing_jurisdiction': 'exemptIssuingJurisdiction',
        'exempt_status': 'exemptStatus'
    }

    def __init__(self, vat_id=None, company_code=None, exempt_certificate_id=None, exempt_certificate_type=None, exempt_description=None, exempt_effective_date=None, exempt_expiration_date=None, exempt_issuing_jurisdiction=None, exempt_status='No'):  # noqa: E501
        """TaxInfo - a model defined in Swagger"""  # noqa: E501

        self._vat_id = None
        self._company_code = None
        self._exempt_certificate_id = None
        self._exempt_certificate_type = None
        self._exempt_description = None
        self._exempt_effective_date = None
        self._exempt_expiration_date = None
        self._exempt_issuing_jurisdiction = None
        self._exempt_status = None
        self.discriminator = None

        if vat_id is not None:
            self.vat_id = vat_id
        if company_code is not None:
            self.company_code = company_code
        if exempt_certificate_id is not None:
            self.exempt_certificate_id = exempt_certificate_id
        if exempt_certificate_type is not None:
            self.exempt_certificate_type = exempt_certificate_type
        if exempt_description is not None:
            self.exempt_description = exempt_description
        if exempt_effective_date is not None:
            self.exempt_effective_date = exempt_effective_date
        if exempt_expiration_date is not None:
            self.exempt_expiration_date = exempt_expiration_date
        if exempt_issuing_jurisdiction is not None:
            self.exempt_issuing_jurisdiction = exempt_issuing_jurisdiction
        if exempt_status is not None:
            self.exempt_status = exempt_status

    @property
    def vat_id(self):
        """Gets the vat_id of this TaxInfo.  # noqa: E501

        EU Value Added Tax ID.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).   # noqa: E501

        :return: The vat_id of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this TaxInfo.

        EU Value Added Tax ID.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).   # noqa: E501

        :param vat_id: The vat_id of this TaxInfo.  # noqa: E501
        :type: str
        """
        if vat_id is not None and len(vat_id) > 25:
            raise ValueError("Invalid value for `vat_id`, length must be less than or equal to `25`")  # noqa: E501

        self._vat_id = vat_id

    @property
    def company_code(self):
        """Gets the company_code of this TaxInfo.  # noqa: E501

        Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).   # noqa: E501

        :return: The company_code of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """Sets the company_code of this TaxInfo.

        Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).   # noqa: E501

        :param company_code: The company_code of this TaxInfo.  # noqa: E501
        :type: str
        """
        if company_code is not None and len(company_code) > 50:
            raise ValueError("Invalid value for `company_code`, length must be less than or equal to `50`")  # noqa: E501

        self._company_code = company_code

    @property
    def exempt_certificate_id(self):
        """Gets the exempt_certificate_id of this TaxInfo.  # noqa: E501

        ID of the customer tax exemption certificate. Only applicable if you use Zuora Tax.   # noqa: E501

        :return: The exempt_certificate_id of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._exempt_certificate_id

    @exempt_certificate_id.setter
    def exempt_certificate_id(self, exempt_certificate_id):
        """Sets the exempt_certificate_id of this TaxInfo.

        ID of the customer tax exemption certificate. Only applicable if you use Zuora Tax.   # noqa: E501

        :param exempt_certificate_id: The exempt_certificate_id of this TaxInfo.  # noqa: E501
        :type: str
        """
        if exempt_certificate_id is not None and len(exempt_certificate_id) > 32:
            raise ValueError("Invalid value for `exempt_certificate_id`, length must be less than or equal to `32`")  # noqa: E501

        self._exempt_certificate_id = exempt_certificate_id

    @property
    def exempt_certificate_type(self):
        """Gets the exempt_certificate_type of this TaxInfo.  # noqa: E501

        Type of tax exemption certificate that the customer holds. Only applicable if you use Zuora Tax.   # noqa: E501

        :return: The exempt_certificate_type of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._exempt_certificate_type

    @exempt_certificate_type.setter
    def exempt_certificate_type(self, exempt_certificate_type):
        """Sets the exempt_certificate_type of this TaxInfo.

        Type of tax exemption certificate that the customer holds. Only applicable if you use Zuora Tax.   # noqa: E501

        :param exempt_certificate_type: The exempt_certificate_type of this TaxInfo.  # noqa: E501
        :type: str
        """
        if exempt_certificate_type is not None and len(exempt_certificate_type) > 32:
            raise ValueError("Invalid value for `exempt_certificate_type`, length must be less than or equal to `32`")  # noqa: E501

        self._exempt_certificate_type = exempt_certificate_type

    @property
    def exempt_description(self):
        """Gets the exempt_description of this TaxInfo.  # noqa: E501

        Description of the tax exemption certificate that the customer holds. Only applicable if you use Zuora Tax.   # noqa: E501

        :return: The exempt_description of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._exempt_description

    @exempt_description.setter
    def exempt_description(self, exempt_description):
        """Sets the exempt_description of this TaxInfo.

        Description of the tax exemption certificate that the customer holds. Only applicable if you use Zuora Tax.   # noqa: E501

        :param exempt_description: The exempt_description of this TaxInfo.  # noqa: E501
        :type: str
        """
        if exempt_description is not None and len(exempt_description) > 500:
            raise ValueError("Invalid value for `exempt_description`, length must be less than or equal to `500`")  # noqa: E501

        self._exempt_description = exempt_description

    @property
    def exempt_effective_date(self):
        """Gets the exempt_effective_date of this TaxInfo.  # noqa: E501

        Date when the customer tax exemption starts, in YYYY-MM-DD format. Only applicable if you use Zuora Tax.   # noqa: E501

        :return: The exempt_effective_date of this TaxInfo.  # noqa: E501
        :rtype: date
        """
        return self._exempt_effective_date

    @exempt_effective_date.setter
    def exempt_effective_date(self, exempt_effective_date):
        """Sets the exempt_effective_date of this TaxInfo.

        Date when the customer tax exemption starts, in YYYY-MM-DD format. Only applicable if you use Zuora Tax.   # noqa: E501

        :param exempt_effective_date: The exempt_effective_date of this TaxInfo.  # noqa: E501
        :type: date
        """

        self._exempt_effective_date = exempt_effective_date

    @property
    def exempt_expiration_date(self):
        """Gets the exempt_expiration_date of this TaxInfo.  # noqa: E501

        Date when the customer tax exemption expires, in YYYY-MM-DD format. Only applicable if you use Zuora Tax.   # noqa: E501

        :return: The exempt_expiration_date of this TaxInfo.  # noqa: E501
        :rtype: date
        """
        return self._exempt_expiration_date

    @exempt_expiration_date.setter
    def exempt_expiration_date(self, exempt_expiration_date):
        """Sets the exempt_expiration_date of this TaxInfo.

        Date when the customer tax exemption expires, in YYYY-MM-DD format. Only applicable if you use Zuora Tax.   # noqa: E501

        :param exempt_expiration_date: The exempt_expiration_date of this TaxInfo.  # noqa: E501
        :type: date
        """

        self._exempt_expiration_date = exempt_expiration_date

    @property
    def exempt_issuing_jurisdiction(self):
        """Gets the exempt_issuing_jurisdiction of this TaxInfo.  # noqa: E501

        Jurisdiction in which the customer tax exemption certificate was issued.   # noqa: E501

        :return: The exempt_issuing_jurisdiction of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._exempt_issuing_jurisdiction

    @exempt_issuing_jurisdiction.setter
    def exempt_issuing_jurisdiction(self, exempt_issuing_jurisdiction):
        """Sets the exempt_issuing_jurisdiction of this TaxInfo.

        Jurisdiction in which the customer tax exemption certificate was issued.   # noqa: E501

        :param exempt_issuing_jurisdiction: The exempt_issuing_jurisdiction of this TaxInfo.  # noqa: E501
        :type: str
        """
        if exempt_issuing_jurisdiction is not None and len(exempt_issuing_jurisdiction) > 32:
            raise ValueError("Invalid value for `exempt_issuing_jurisdiction`, length must be less than or equal to `32`")  # noqa: E501

        self._exempt_issuing_jurisdiction = exempt_issuing_jurisdiction

    @property
    def exempt_status(self):
        """Gets the exempt_status of this TaxInfo.  # noqa: E501

        Status of the account tax exemption. Required if you use Zuora Tax. Only applicable if you use Zuora Tax.   # noqa: E501

        :return: The exempt_status of this TaxInfo.  # noqa: E501
        :rtype: str
        """
        return self._exempt_status

    @exempt_status.setter
    def exempt_status(self, exempt_status):
        """Sets the exempt_status of this TaxInfo.

        Status of the account tax exemption. Required if you use Zuora Tax. Only applicable if you use Zuora Tax.   # noqa: E501

        :param exempt_status: The exempt_status of this TaxInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["No", "Yes", "PendingVerification"]  # noqa: E501
        if exempt_status not in allowed_values:
            raise ValueError(
                "Invalid value for `exempt_status` ({0}), must be one of {1}"  # noqa: E501
                .format(exempt_status, allowed_values)
            )

        self._exempt_status = exempt_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
