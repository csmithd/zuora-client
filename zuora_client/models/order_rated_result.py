# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.subscription_rated_result import SubscriptionRatedResult  # noqa: F401,E501


class OrderRatedResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'str',
        'subscription_rated_results': 'list[SubscriptionRatedResult]'
    }

    attribute_map = {
        'order_number': 'orderNumber',
        'subscription_rated_results': 'subscriptionRatedResults'
    }

    def __init__(self, order_number=None, subscription_rated_results=None):  # noqa: E501
        """OrderRatedResult - a model defined in Swagger"""  # noqa: E501

        self._order_number = None
        self._subscription_rated_results = None
        self.discriminator = None

        if order_number is not None:
            self.order_number = order_number
        if subscription_rated_results is not None:
            self.subscription_rated_results = subscription_rated_results

    @property
    def order_number(self):
        """Gets the order_number of this OrderRatedResult.  # noqa: E501


        :return: The order_number of this OrderRatedResult.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this OrderRatedResult.


        :param order_number: The order_number of this OrderRatedResult.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def subscription_rated_results(self):
        """Gets the subscription_rated_results of this OrderRatedResult.  # noqa: E501

        An array of subscription changes included in this order.  # noqa: E501

        :return: The subscription_rated_results of this OrderRatedResult.  # noqa: E501
        :rtype: list[SubscriptionRatedResult]
        """
        return self._subscription_rated_results

    @subscription_rated_results.setter
    def subscription_rated_results(self, subscription_rated_results):
        """Sets the subscription_rated_results of this OrderRatedResult.

        An array of subscription changes included in this order.  # noqa: E501

        :param subscription_rated_results: The subscription_rated_results of this OrderRatedResult.  # noqa: E501
        :type: list[SubscriptionRatedResult]
        """

        self._subscription_rated_results = subscription_rated_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRatedResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRatedResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
