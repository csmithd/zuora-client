# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.invoice_item_adjustment_object_custom_fields import InvoiceItemAdjustmentObjectCustomFields  # noqa: F401,E501
from zuora_client.models.invoice_item_adjustment_object_ns_fields import InvoiceItemAdjustmentObjectNSFields  # noqa: F401,E501


class ProxyGetInvoiceItemAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_item_adjustment_integration_id__ns': 'str',
        'invoice_item_adjustment_integration_status__ns': 'str',
        'invoice_item_adjustment_sync_date__ns': 'str',
        'account_id': 'str',
        'accounting_code': 'str',
        'adjustment_date': 'date',
        'adjustment_number': 'str',
        'amount': 'float',
        'cancelled_by_id': 'str',
        'cancelled_date': 'datetime',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'customer_name': 'str',
        'customer_number': 'str',
        'id': 'str',
        'invoice_id': 'str',
        'invoice_item_name': 'str',
        'invoice_number': 'str',
        'reason_code': 'str',
        'reference_id': 'str',
        'service_end_date': 'date',
        'service_start_date': 'date',
        'source_id': 'str',
        'source_type': 'str',
        'status': 'str',
        'transferred_to_accounting': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'invoice_item_adjustment_integration_id__ns': 'InvoiceItemAdjustment.IntegrationId__NS',
        'invoice_item_adjustment_integration_status__ns': 'InvoiceItemAdjustment.IntegrationStatus__NS',
        'invoice_item_adjustment_sync_date__ns': 'InvoiceItemAdjustment.SyncDate__NS',
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'adjustment_date': 'AdjustmentDate',
        'adjustment_number': 'AdjustmentNumber',
        'amount': 'Amount',
        'cancelled_by_id': 'CancelledById',
        'cancelled_date': 'CancelledDate',
        'comment': 'Comment',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'customer_name': 'CustomerName',
        'customer_number': 'CustomerNumber',
        'id': 'Id',
        'invoice_id': 'InvoiceId',
        'invoice_item_name': 'InvoiceItemName',
        'invoice_number': 'InvoiceNumber',
        'reason_code': 'ReasonCode',
        'reference_id': 'ReferenceId',
        'service_end_date': 'ServiceEndDate',
        'service_start_date': 'ServiceStartDate',
        'source_id': 'SourceId',
        'source_type': 'SourceType',
        'status': 'Status',
        'transferred_to_accounting': 'TransferredToAccounting',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, invoice_item_adjustment_integration_id__ns=None, invoice_item_adjustment_integration_status__ns=None, invoice_item_adjustment_sync_date__ns=None, account_id=None, accounting_code=None, adjustment_date=None, adjustment_number=None, amount=None, cancelled_by_id=None, cancelled_date=None, comment=None, created_by_id=None, created_date=None, customer_name=None, customer_number=None, id=None, invoice_id=None, invoice_item_name=None, invoice_number=None, reason_code=None, reference_id=None, service_end_date=None, service_start_date=None, source_id=None, source_type=None, status=None, transferred_to_accounting=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """ProxyGetInvoiceItemAdjustment - a model defined in Swagger"""  # noqa: E501

        self._invoice_item_adjustment_integration_id__ns = None
        self._invoice_item_adjustment_integration_status__ns = None
        self._invoice_item_adjustment_sync_date__ns = None
        self._account_id = None
        self._accounting_code = None
        self._adjustment_date = None
        self._adjustment_number = None
        self._amount = None
        self._cancelled_by_id = None
        self._cancelled_date = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._customer_name = None
        self._customer_number = None
        self._id = None
        self._invoice_id = None
        self._invoice_item_name = None
        self._invoice_number = None
        self._reason_code = None
        self._reference_id = None
        self._service_end_date = None
        self._service_start_date = None
        self._source_id = None
        self._source_type = None
        self._status = None
        self._transferred_to_accounting = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if invoice_item_adjustment_integration_id__ns is not None:
            self.invoice_item_adjustment_integration_id__ns = invoice_item_adjustment_integration_id__ns
        if invoice_item_adjustment_integration_status__ns is not None:
            self.invoice_item_adjustment_integration_status__ns = invoice_item_adjustment_integration_status__ns
        if invoice_item_adjustment_sync_date__ns is not None:
            self.invoice_item_adjustment_sync_date__ns = invoice_item_adjustment_sync_date__ns
        if account_id is not None:
            self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_date is not None:
            self.adjustment_date = adjustment_date
        if adjustment_number is not None:
            self.adjustment_number = adjustment_number
        if amount is not None:
            self.amount = amount
        if cancelled_by_id is not None:
            self.cancelled_by_id = cancelled_by_id
        if cancelled_date is not None:
            self.cancelled_date = cancelled_date
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_number is not None:
            self.customer_number = customer_number
        if id is not None:
            self.id = id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_item_name is not None:
            self.invoice_item_name = invoice_item_name
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if reason_code is not None:
            self.reason_code = reason_code
        if reference_id is not None:
            self.reference_id = reference_id
        if service_end_date is not None:
            self.service_end_date = service_end_date
        if service_start_date is not None:
            self.service_start_date = service_start_date
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if status is not None:
            self.status = status
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def invoice_item_adjustment_integration_id__ns(self):
        """Gets the invoice_item_adjustment_integration_id__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The invoice_item_adjustment_integration_id__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_adjustment_integration_id__ns

    @invoice_item_adjustment_integration_id__ns.setter
    def invoice_item_adjustment_integration_id__ns(self, invoice_item_adjustment_integration_id__ns):
        """Sets the invoice_item_adjustment_integration_id__ns of this ProxyGetInvoiceItemAdjustment.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param invoice_item_adjustment_integration_id__ns: The invoice_item_adjustment_integration_id__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """
        if invoice_item_adjustment_integration_id__ns is not None and len(invoice_item_adjustment_integration_id__ns) > 255:
            raise ValueError("Invalid value for `invoice_item_adjustment_integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._invoice_item_adjustment_integration_id__ns = invoice_item_adjustment_integration_id__ns

    @property
    def invoice_item_adjustment_integration_status__ns(self):
        """Gets the invoice_item_adjustment_integration_status__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

        Status of the invoice item adjustment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The invoice_item_adjustment_integration_status__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_adjustment_integration_status__ns

    @invoice_item_adjustment_integration_status__ns.setter
    def invoice_item_adjustment_integration_status__ns(self, invoice_item_adjustment_integration_status__ns):
        """Sets the invoice_item_adjustment_integration_status__ns of this ProxyGetInvoiceItemAdjustment.

        Status of the invoice item adjustment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param invoice_item_adjustment_integration_status__ns: The invoice_item_adjustment_integration_status__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """
        if invoice_item_adjustment_integration_status__ns is not None and len(invoice_item_adjustment_integration_status__ns) > 255:
            raise ValueError("Invalid value for `invoice_item_adjustment_integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._invoice_item_adjustment_integration_status__ns = invoice_item_adjustment_integration_status__ns

    @property
    def invoice_item_adjustment_sync_date__ns(self):
        """Gets the invoice_item_adjustment_sync_date__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

        Date when the invoice item adjustment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The invoice_item_adjustment_sync_date__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_adjustment_sync_date__ns

    @invoice_item_adjustment_sync_date__ns.setter
    def invoice_item_adjustment_sync_date__ns(self, invoice_item_adjustment_sync_date__ns):
        """Sets the invoice_item_adjustment_sync_date__ns of this ProxyGetInvoiceItemAdjustment.

        Date when the invoice item adjustment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param invoice_item_adjustment_sync_date__ns: The invoice_item_adjustment_sync_date__ns of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """
        if invoice_item_adjustment_sync_date__ns is not None and len(invoice_item_adjustment_sync_date__ns) > 255:
            raise ValueError("Invalid value for `invoice_item_adjustment_sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._invoice_item_adjustment_sync_date__ns = invoice_item_adjustment_sync_date__ns

    @property
    def account_id(self):
        """Gets the account_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The ID of the account that owns the invoice. **Values**: inherited from `Account.ID` for the invoice owner   # noqa: E501

        :return: The account_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyGetInvoiceItemAdjustment.

         The ID of the account that owns the invoice. **Values**: inherited from `Account.ID` for the invoice owner   # noqa: E501

        :param account_id: The account_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The accounting code for the invoice item. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: inherited from `InvoiceItem.AccountingCode`   # noqa: E501

        :return: The accounting_code of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyGetInvoiceItemAdjustment.

         The accounting code for the invoice item. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: inherited from `InvoiceItem.AccountingCode`   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_date(self):
        """Gets the adjustment_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The date when the invoice item adjustment is applied, in `yyyy-mm-dd` format. This date must be the same as the invoice's date or later. **Character limit**: 29   # noqa: E501

        :return: The adjustment_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._adjustment_date

    @adjustment_date.setter
    def adjustment_date(self, adjustment_date):
        """Sets the adjustment_date of this ProxyGetInvoiceItemAdjustment.

         The date when the invoice item adjustment is applied, in `yyyy-mm-dd` format. This date must be the same as the invoice's date or later. **Character limit**: 29   # noqa: E501

        :param adjustment_date: The adjustment_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: date
        """

        self._adjustment_date = adjustment_date

    @property
    def adjustment_number(self):
        """Gets the adjustment_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         A unique string to identify an individual invoice item adjustment. **Character limit**: 255 **Values**: automatically generated   # noqa: E501

        :return: The adjustment_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_number

    @adjustment_number.setter
    def adjustment_number(self, adjustment_number):
        """Sets the adjustment_number of this ProxyGetInvoiceItemAdjustment.

         A unique string to identify an individual invoice item adjustment. **Character limit**: 255 **Values**: automatically generated   # noqa: E501

        :param adjustment_number: The adjustment_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._adjustment_number = adjustment_number

    @property
    def amount(self):
        """Gets the amount of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The amount of the invoice item adjustment. The value of Amount must be positive. Use the required parameter Type to either credit or charge (debit) this amount on the invoice. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :return: The amount of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyGetInvoiceItemAdjustment.

         The amount of the invoice item adjustment. The value of Amount must be positive. Use the required parameter Type to either credit or charge (debit) this amount on the invoice. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :param amount: The amount of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cancelled_by_id(self):
        """Gets the cancelled_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The ID of the Zuora user who canceled the invoice item adjustment. Zuora generates this read-only field only if the adjustment is canceled. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The cancelled_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_by_id

    @cancelled_by_id.setter
    def cancelled_by_id(self, cancelled_by_id):
        """Sets the cancelled_by_id of this ProxyGetInvoiceItemAdjustment.

         The ID of the Zuora user who canceled the invoice item adjustment. Zuora generates this read-only field only if the adjustment is canceled. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param cancelled_by_id: The cancelled_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._cancelled_by_id = cancelled_by_id

    @property
    def cancelled_date(self):
        """Gets the cancelled_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The date when the invoice item adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The cancelled_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_date

    @cancelled_date.setter
    def cancelled_date(self, cancelled_date):
        """Sets the cancelled_date of this ProxyGetInvoiceItemAdjustment.

         The date when the invoice item adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param cancelled_date: The cancelled_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: datetime
        """

        self._cancelled_date = cancelled_date

    @property
    def comment(self):
        """Gets the comment of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         Use this field to record comments about the invoice item adjustment. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The comment of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProxyGetInvoiceItemAdjustment.

         Use this field to record comments about the invoice item adjustment. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param comment: The comment of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The user ID of the person who created the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProxyGetInvoiceItemAdjustment.

         The user ID of the person who created the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The date the invoice item was created. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The created_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProxyGetInvoiceItemAdjustment.

         The date the invoice item was created. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def customer_name(self):
        """Gets the customer_name of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The name of the account that owns the associated invoice.  **Character limit**: 50  **Values**: inherited from `Account.Name`  **Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.Name` is updated.   # noqa: E501

        :return: The customer_name of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this ProxyGetInvoiceItemAdjustment.

         The name of the account that owns the associated invoice.  **Character limit**: 50  **Values**: inherited from `Account.Name`  **Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.Name` is updated.   # noqa: E501

        :param customer_name: The customer_name of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_number(self):
        """Gets the customer_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The unique account number of the customer's account.  **Character limit**: 50  **Values**: inherited from `Account.AccountNumber`  **Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.AccountNumber` is updated.   # noqa: E501

        :return: The customer_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this ProxyGetInvoiceItemAdjustment.

         The unique account number of the customer's account.  **Character limit**: 50  **Values**: inherited from `Account.AccountNumber`  **Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.AccountNumber` is updated.   # noqa: E501

        :param customer_number: The customer_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._customer_number = customer_number

    @property
    def id(self):
        """Gets the id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

        Object identifier.  # noqa: E501

        :return: The id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyGetInvoiceItemAdjustment.

        Object identifier.  # noqa: E501

        :param id: The id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The ID of the invoice associated with the adjustment. The adjustment invoice item is in this invoice. This field is optional if you specify a value for the `InvoiceNumber` field. **Character limit**: 3 **Values**: a valid invoice ID   # noqa: E501

        :return: The invoice_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ProxyGetInvoiceItemAdjustment.

         The ID of the invoice associated with the adjustment. The adjustment invoice item is in this invoice. This field is optional if you specify a value for the `InvoiceNumber` field. **Character limit**: 3 **Values**: a valid invoice ID   # noqa: E501

        :param invoice_id: The invoice_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_item_name(self):
        """Gets the invoice_item_name of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The name of the invoice item's charge. This field is required in the Query call, but is inherited in other calls. **Character limit**: 255 **Values**: inherited from `InvoiceItem.ChargeName`   # noqa: E501

        :return: The invoice_item_name of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_name

    @invoice_item_name.setter
    def invoice_item_name(self, invoice_item_name):
        """Sets the invoice_item_name of this ProxyGetInvoiceItemAdjustment.

         The name of the invoice item's charge. This field is required in the Query call, but is inherited in other calls. **Character limit**: 255 **Values**: inherited from `InvoiceItem.ChargeName`   # noqa: E501

        :param invoice_item_name: The invoice_item_name of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._invoice_item_name = invoice_item_name

    @property
    def invoice_number(self):
        """Gets the invoice_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The unique identification number for the invoice that contains the invoice item. This field is optional if you specify a value for the `InvoiceId` field. **Character limit**: 32 **Values**: a valid invoice number   # noqa: E501

        :return: The invoice_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this ProxyGetInvoiceItemAdjustment.

         The unique identification number for the invoice that contains the invoice item. This field is optional if you specify a value for the `InvoiceId` field. **Character limit**: 32 **Values**: a valid invoice number   # noqa: E501

        :param invoice_number: The invoice_number of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def reason_code(self):
        """Gets the reason_code of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :return: The reason_code of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ProxyGetInvoiceItemAdjustment.

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :param reason_code: The reason_code of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :return: The reference_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyGetInvoiceItemAdjustment.

         A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :param reference_id: The reference_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def service_end_date(self):
        """Gets the service_end_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The end date of the service period associated with the invoice item. Service ends one second before the date in this value.  **Character limit**: 29   # noqa: E501

        :return: The service_end_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """Sets the service_end_date of this ProxyGetInvoiceItemAdjustment.

         The end date of the service period associated with the invoice item. Service ends one second before the date in this value.  **Character limit**: 29   # noqa: E501

        :param service_end_date: The service_end_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: date
        """

        self._service_end_date = service_end_date

    @property
    def service_start_date(self):
        """Gets the service_start_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The start date of the service period associated with the invoice item. Service ends one second before the date in this value.  **Character limit**: 29   # noqa: E501

        :return: The service_start_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """Sets the service_start_date of this ProxyGetInvoiceItemAdjustment.

         The start date of the service period associated with the invoice item. Service ends one second before the date in this value.  **Character limit**: 29   # noqa: E501

        :param service_start_date: The service_start_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: date
        """

        self._service_start_date = service_start_date

    @property
    def source_id(self):
        """Gets the source_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The ID of the item specified in the SourceType field. **Character limit**: 32 **Values**: a valid invoice item ID or taxation item ID   # noqa: E501

        :return: The source_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ProxyGetInvoiceItemAdjustment.

         The ID of the item specified in the SourceType field. **Character limit**: 32 **Values**: a valid invoice item ID or taxation item ID   # noqa: E501

        :param source_id: The source_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The type of adjustment. **Character limit**: 13 **Values**: InvoiceDetail, Tax   # noqa: E501

        :return: The source_type of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ProxyGetInvoiceItemAdjustment.

         The type of adjustment. **Character limit**: 13 **Values**: InvoiceDetail, Tax   # noqa: E501

        :param source_type: The source_type of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The status of the invoice item adjustment. This field is required in the Query call, but is automatically generated in other calls. **Character limit**: 9 **Values**: Canceled, Processed   # noqa: E501

        :return: The status of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyGetInvoiceItemAdjustment.

         The status of the invoice item adjustment. This field is required in the Query call, but is automatically generated in other calls. **Character limit**: 9 **Values**: Canceled, Processed   # noqa: E501

        :param status: The status of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

        Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :return: The transferred_to_accounting of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyGetInvoiceItemAdjustment.

        Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "No", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The ID of the user who last updated the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The updated_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this ProxyGetInvoiceItemAdjustment.

         The ID of the user who last updated the invoice item. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501

         The date when the invoice item was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ProxyGetInvoiceItemAdjustment.

         The date when the invoice item was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this ProxyGetInvoiceItemAdjustment.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyGetInvoiceItemAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGetInvoiceItemAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
