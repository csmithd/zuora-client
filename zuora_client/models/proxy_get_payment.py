# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.payment_object_custom_fields import PaymentObjectCustomFields  # noqa: F401,E501
from zuora_client.models.payment_object_ns_fields import PaymentObjectNSFields  # noqa: F401,E501


class ProxyGetPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'transaction__ns': 'str',
        'account_id': 'str',
        'accounting_code': 'str',
        'amount': 'float',
        'applied_credit_balance_amount': 'float',
        'auth_transaction_id': 'str',
        'bank_identification_number': 'str',
        'cancelled_on': 'datetime',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'effective_date': 'date',
        'gateway': 'str',
        'gateway_order_id': 'str',
        'gateway_response': 'str',
        'gateway_response_code': 'str',
        'gateway_state': 'str',
        'id': 'str',
        'marked_for_submission_on': 'datetime',
        'payment_method_id': 'str',
        'payment_method_snapshot_id': 'str',
        'payment_number': 'str',
        'reference_id': 'str',
        'refund_amount': 'float',
        'second_payment_reference_id': 'str',
        'settled_on': 'datetime',
        'soft_descriptor': 'str',
        'soft_descriptor_phone': 'str',
        'source': 'str',
        'source_name': 'str',
        'status': 'str',
        'submitted_on': 'datetime',
        'transferred_to_accounting': 'str',
        'type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'transaction__ns': 'Transaction__NS',
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'amount': 'Amount',
        'applied_credit_balance_amount': 'AppliedCreditBalanceAmount',
        'auth_transaction_id': 'AuthTransactionId',
        'bank_identification_number': 'BankIdentificationNumber',
        'cancelled_on': 'CancelledOn',
        'comment': 'Comment',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'effective_date': 'EffectiveDate',
        'gateway': 'Gateway',
        'gateway_order_id': 'GatewayOrderId',
        'gateway_response': 'GatewayResponse',
        'gateway_response_code': 'GatewayResponseCode',
        'gateway_state': 'GatewayState',
        'id': 'Id',
        'marked_for_submission_on': 'MarkedForSubmissionOn',
        'payment_method_id': 'PaymentMethodId',
        'payment_method_snapshot_id': 'PaymentMethodSnapshotId',
        'payment_number': 'PaymentNumber',
        'reference_id': 'ReferenceId',
        'refund_amount': 'RefundAmount',
        'second_payment_reference_id': 'SecondPaymentReferenceId',
        'settled_on': 'SettledOn',
        'soft_descriptor': 'SoftDescriptor',
        'soft_descriptor_phone': 'SoftDescriptorPhone',
        'source': 'Source',
        'source_name': 'SourceName',
        'status': 'Status',
        'submitted_on': 'SubmittedOn',
        'transferred_to_accounting': 'TransferredToAccounting',
        'type': 'Type',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, transaction__ns=None, account_id=None, accounting_code=None, amount=None, applied_credit_balance_amount=None, auth_transaction_id=None, bank_identification_number=None, cancelled_on=None, comment=None, created_by_id=None, created_date=None, effective_date=None, gateway=None, gateway_order_id=None, gateway_response=None, gateway_response_code=None, gateway_state=None, id=None, marked_for_submission_on=None, payment_method_id=None, payment_method_snapshot_id=None, payment_number=None, reference_id=None, refund_amount=None, second_payment_reference_id=None, settled_on=None, soft_descriptor=None, soft_descriptor_phone=None, source=None, source_name=None, status=None, submitted_on=None, transferred_to_accounting=None, type=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """ProxyGetPayment - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._transaction__ns = None
        self._account_id = None
        self._accounting_code = None
        self._amount = None
        self._applied_credit_balance_amount = None
        self._auth_transaction_id = None
        self._bank_identification_number = None
        self._cancelled_on = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._effective_date = None
        self._gateway = None
        self._gateway_order_id = None
        self._gateway_response = None
        self._gateway_response_code = None
        self._gateway_state = None
        self._id = None
        self._marked_for_submission_on = None
        self._payment_method_id = None
        self._payment_method_snapshot_id = None
        self._payment_number = None
        self._reference_id = None
        self._refund_amount = None
        self._second_payment_reference_id = None
        self._settled_on = None
        self._soft_descriptor = None
        self._soft_descriptor_phone = None
        self._source = None
        self._source_name = None
        self._status = None
        self._submitted_on = None
        self._transferred_to_accounting = None
        self._type = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if transaction__ns is not None:
            self.transaction__ns = transaction__ns
        if account_id is not None:
            self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if amount is not None:
            self.amount = amount
        if applied_credit_balance_amount is not None:
            self.applied_credit_balance_amount = applied_credit_balance_amount
        if auth_transaction_id is not None:
            self.auth_transaction_id = auth_transaction_id
        if bank_identification_number is not None:
            self.bank_identification_number = bank_identification_number
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if effective_date is not None:
            self.effective_date = effective_date
        if gateway is not None:
            self.gateway = gateway
        if gateway_order_id is not None:
            self.gateway_order_id = gateway_order_id
        if gateway_response is not None:
            self.gateway_response = gateway_response
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if gateway_state is not None:
            self.gateway_state = gateway_state
        if id is not None:
            self.id = id
        if marked_for_submission_on is not None:
            self.marked_for_submission_on = marked_for_submission_on
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if payment_method_snapshot_id is not None:
            self.payment_method_snapshot_id = payment_method_snapshot_id
        if payment_number is not None:
            self.payment_number = payment_number
        if reference_id is not None:
            self.reference_id = reference_id
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if second_payment_reference_id is not None:
            self.second_payment_reference_id = second_payment_reference_id
        if settled_on is not None:
            self.settled_on = settled_on
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if soft_descriptor_phone is not None:
            self.soft_descriptor_phone = soft_descriptor_phone
        if source is not None:
            self.source = source
        if source_name is not None:
            self.source_name = source_name
        if status is not None:
            self.status = status
        if submitted_on is not None:
            self.submitted_on = submitted_on
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if type is not None:
            self.type = type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyGetPayment.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyGetPayment.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyGetPayment.  # noqa: E501

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyGetPayment.

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this ProxyGetPayment.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this ProxyGetPayment.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        if origin__ns is not None and len(origin__ns) > 255:
            raise ValueError("Invalid value for `origin__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyGetPayment.  # noqa: E501

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyGetPayment.

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def transaction__ns(self):
        """Gets the transaction__ns of this ProxyGetPayment.  # noqa: E501

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The transaction__ns of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._transaction__ns

    @transaction__ns.setter
    def transaction__ns(self, transaction__ns):
        """Sets the transaction__ns of this ProxyGetPayment.

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param transaction__ns: The transaction__ns of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        if transaction__ns is not None and len(transaction__ns) > 255:
            raise ValueError("Invalid value for `transaction__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._transaction__ns = transaction__ns

    @property
    def account_id(self):
        """Gets the account_id of this ProxyGetPayment.  # noqa: E501

        The unique account ID for the customer that the payment is for.   # noqa: E501

        :return: The account_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyGetPayment.

        The unique account ID for the customer that the payment is for.   # noqa: E501

        :param account_id: The account_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyGetPayment.  # noqa: E501

        The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :return: The accounting_code of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyGetPayment.

        The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def amount(self):
        """Gets the amount of this ProxyGetPayment.  # noqa: E501

        The amount of the payment.   # noqa: E501

        :return: The amount of this ProxyGetPayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyGetPayment.

        The amount of the payment.   # noqa: E501

        :param amount: The amount of this ProxyGetPayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def applied_credit_balance_amount(self):
        """Gets the applied_credit_balance_amount of this ProxyGetPayment.  # noqa: E501

        The amount of the payment to apply to a credit balance.   # noqa: E501

        :return: The applied_credit_balance_amount of this ProxyGetPayment.  # noqa: E501
        :rtype: float
        """
        return self._applied_credit_balance_amount

    @applied_credit_balance_amount.setter
    def applied_credit_balance_amount(self, applied_credit_balance_amount):
        """Sets the applied_credit_balance_amount of this ProxyGetPayment.

        The amount of the payment to apply to a credit balance.   # noqa: E501

        :param applied_credit_balance_amount: The applied_credit_balance_amount of this ProxyGetPayment.  # noqa: E501
        :type: float
        """

        self._applied_credit_balance_amount = applied_credit_balance_amount

    @property
    def auth_transaction_id(self):
        """Gets the auth_transaction_id of this ProxyGetPayment.  # noqa: E501

        The authorization transaction ID from the payment gateway.    # noqa: E501

        :return: The auth_transaction_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._auth_transaction_id

    @auth_transaction_id.setter
    def auth_transaction_id(self, auth_transaction_id):
        """Sets the auth_transaction_id of this ProxyGetPayment.

        The authorization transaction ID from the payment gateway.    # noqa: E501

        :param auth_transaction_id: The auth_transaction_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._auth_transaction_id = auth_transaction_id

    @property
    def bank_identification_number(self):
        """Gets the bank_identification_number of this ProxyGetPayment.  # noqa: E501

        The first six digits of the credit card or debit card used for the payment, when applicable.    # noqa: E501

        :return: The bank_identification_number of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._bank_identification_number

    @bank_identification_number.setter
    def bank_identification_number(self, bank_identification_number):
        """Sets the bank_identification_number of this ProxyGetPayment.

        The first six digits of the credit card or debit card used for the payment, when applicable.    # noqa: E501

        :param bank_identification_number: The bank_identification_number of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._bank_identification_number = bank_identification_number

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this ProxyGetPayment.  # noqa: E501

        The date and time when the payment was canceled.   # noqa: E501

        :return: The cancelled_on of this ProxyGetPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this ProxyGetPayment.

        The date and time when the payment was canceled.   # noqa: E501

        :param cancelled_on: The cancelled_on of this ProxyGetPayment.  # noqa: E501
        :type: datetime
        """

        self._cancelled_on = cancelled_on

    @property
    def comment(self):
        """Gets the comment of this ProxyGetPayment.  # noqa: E501

        Additional information related to the payment.   # noqa: E501

        :return: The comment of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProxyGetPayment.

        Additional information related to the payment.   # noqa: E501

        :param comment: The comment of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProxyGetPayment.  # noqa: E501

        The ID of the Zuora user who created the payment.   # noqa: E501

        :return: The created_by_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProxyGetPayment.

        The ID of the Zuora user who created the payment.   # noqa: E501

        :param created_by_id: The created_by_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProxyGetPayment.  # noqa: E501

        The date and time when the payment was created.   # noqa: E501

        :return: The created_date of this ProxyGetPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProxyGetPayment.

        The date and time when the payment was created.   # noqa: E501

        :param created_date: The created_date of this ProxyGetPayment.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def effective_date(self):
        """Gets the effective_date of this ProxyGetPayment.  # noqa: E501

        The date when the payment takes effect.   # noqa: E501

        :return: The effective_date of this ProxyGetPayment.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this ProxyGetPayment.

        The date when the payment takes effect.   # noqa: E501

        :param effective_date: The effective_date of this ProxyGetPayment.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def gateway(self):
        """Gets the gateway of this ProxyGetPayment.  # noqa: E501

        The name of the gateway instance that processes the payment.    # noqa: E501

        :return: The gateway of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ProxyGetPayment.

        The name of the gateway instance that processes the payment.    # noqa: E501

        :param gateway: The gateway of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def gateway_order_id(self):
        """Gets the gateway_order_id of this ProxyGetPayment.  # noqa: E501

        A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.   # noqa: E501

        :return: The gateway_order_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_order_id

    @gateway_order_id.setter
    def gateway_order_id(self, gateway_order_id):
        """Sets the gateway_order_id of this ProxyGetPayment.

        A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.   # noqa: E501

        :param gateway_order_id: The gateway_order_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._gateway_order_id = gateway_order_id

    @property
    def gateway_response(self):
        """Gets the gateway_response of this ProxyGetPayment.  # noqa: E501

        The message returned from the payment gateway for the payment. This message is gateway-dependent.   # noqa: E501

        :return: The gateway_response of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response

    @gateway_response.setter
    def gateway_response(self, gateway_response):
        """Sets the gateway_response of this ProxyGetPayment.

        The message returned from the payment gateway for the payment. This message is gateway-dependent.   # noqa: E501

        :param gateway_response: The gateway_response of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._gateway_response = gateway_response

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this ProxyGetPayment.  # noqa: E501

        The code returned from the payment gateway for the payment. This code is gateway-dependent.   # noqa: E501

        :return: The gateway_response_code of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this ProxyGetPayment.

        The code returned from the payment gateway for the payment. This code is gateway-dependent.   # noqa: E501

        :param gateway_response_code: The gateway_response_code of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._gateway_response_code = gateway_response_code

    @property
    def gateway_state(self):
        """Gets the gateway_state of this ProxyGetPayment.  # noqa: E501

        The status of the payment in the gateway; use for reconciliation.   # noqa: E501

        :return: The gateway_state of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_state

    @gateway_state.setter
    def gateway_state(self, gateway_state):
        """Sets the gateway_state of this ProxyGetPayment.

        The status of the payment in the gateway; use for reconciliation.   # noqa: E501

        :param gateway_state: The gateway_state of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["MarkedForSubmission", "Submitted", "Settled", "NotSubmitted", "FailedToSettle"]  # noqa: E501
        if gateway_state not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_state` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway_state, allowed_values)
            )

        self._gateway_state = gateway_state

    @property
    def id(self):
        """Gets the id of this ProxyGetPayment.  # noqa: E501

        The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.   # noqa: E501

        :return: The id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyGetPayment.

        The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.   # noqa: E501

        :param id: The id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def marked_for_submission_on(self):
        """Gets the marked_for_submission_on of this ProxyGetPayment.  # noqa: E501

        The date and time when a payment was marked and waiting for batch submission to the payment process.    # noqa: E501

        :return: The marked_for_submission_on of this ProxyGetPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._marked_for_submission_on

    @marked_for_submission_on.setter
    def marked_for_submission_on(self, marked_for_submission_on):
        """Sets the marked_for_submission_on of this ProxyGetPayment.

        The date and time when a payment was marked and waiting for batch submission to the payment process.    # noqa: E501

        :param marked_for_submission_on: The marked_for_submission_on of this ProxyGetPayment.  # noqa: E501
        :type: datetime
        """

        self._marked_for_submission_on = marked_for_submission_on

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this ProxyGetPayment.  # noqa: E501

        The ID of the payment method used for the payment.    # noqa: E501

        :return: The payment_method_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this ProxyGetPayment.

        The ID of the payment method used for the payment.    # noqa: E501

        :param payment_method_id: The payment_method_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_method_snapshot_id(self):
        """Gets the payment_method_snapshot_id of this ProxyGetPayment.  # noqa: E501

        The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.   # noqa: E501

        :return: The payment_method_snapshot_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_snapshot_id

    @payment_method_snapshot_id.setter
    def payment_method_snapshot_id(self, payment_method_snapshot_id):
        """Sets the payment_method_snapshot_id of this ProxyGetPayment.

        The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.   # noqa: E501

        :param payment_method_snapshot_id: The payment_method_snapshot_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._payment_method_snapshot_id = payment_method_snapshot_id

    @property
    def payment_number(self):
        """Gets the payment_number of this ProxyGetPayment.  # noqa: E501

        The unique identification number of the payment. For example, P-00000028.   # noqa: E501

        :return: The payment_number of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this ProxyGetPayment.

        The unique identification number of the payment. For example, P-00000028.   # noqa: E501

        :param payment_number: The payment_number of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._payment_number = payment_number

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyGetPayment.  # noqa: E501

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :return: The reference_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyGetPayment.

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :param reference_id: The reference_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def refund_amount(self):
        """Gets the refund_amount of this ProxyGetPayment.  # noqa: E501

        The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.   # noqa: E501

        :return: The refund_amount of this ProxyGetPayment.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this ProxyGetPayment.

        The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.   # noqa: E501

        :param refund_amount: The refund_amount of this ProxyGetPayment.  # noqa: E501
        :type: float
        """

        self._refund_amount = refund_amount

    @property
    def second_payment_reference_id(self):
        """Gets the second_payment_reference_id of this ProxyGetPayment.  # noqa: E501

        The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :return: The second_payment_reference_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._second_payment_reference_id

    @second_payment_reference_id.setter
    def second_payment_reference_id(self, second_payment_reference_id):
        """Sets the second_payment_reference_id of this ProxyGetPayment.

        The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :param second_payment_reference_id: The second_payment_reference_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._second_payment_reference_id = second_payment_reference_id

    @property
    def settled_on(self):
        """Gets the settled_on of this ProxyGetPayment.  # noqa: E501

        The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.   # noqa: E501

        :return: The settled_on of this ProxyGetPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._settled_on

    @settled_on.setter
    def settled_on(self, settled_on):
        """Sets the settled_on of this ProxyGetPayment.

        The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.   # noqa: E501

        :param settled_on: The settled_on of this ProxyGetPayment.  # noqa: E501
        :type: datetime
        """

        self._settled_on = settled_on

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this ProxyGetPayment.  # noqa: E501

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.    # noqa: E501

        :return: The soft_descriptor of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this ProxyGetPayment.

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.    # noqa: E501

        :param soft_descriptor: The soft_descriptor of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._soft_descriptor = soft_descriptor

    @property
    def soft_descriptor_phone(self):
        """Gets the soft_descriptor_phone of this ProxyGetPayment.  # noqa: E501

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.   # noqa: E501

        :return: The soft_descriptor_phone of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor_phone

    @soft_descriptor_phone.setter
    def soft_descriptor_phone(self, soft_descriptor_phone):
        """Sets the soft_descriptor_phone of this ProxyGetPayment.

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.   # noqa: E501

        :param soft_descriptor_phone: The soft_descriptor_phone of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._soft_descriptor_phone = soft_descriptor_phone

    @property
    def source(self):
        """Gets the source of this ProxyGetPayment.  # noqa: E501

        How the payment was created, whether through the API, manually, import, or payment run.   # noqa: E501

        :return: The source of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ProxyGetPayment.

        How the payment was created, whether through the API, manually, import, or payment run.   # noqa: E501

        :param source: The source of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["PaymentRun", "Import", "Manually", "API"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def source_name(self):
        """Gets the source_name of this ProxyGetPayment.  # noqa: E501

        The name of the source. The value is a Payment Run number or a file name.   # noqa: E501

        :return: The source_name of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this ProxyGetPayment.

        The name of the source. The value is a Payment Run number or a file name.   # noqa: E501

        :param source_name: The source_name of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def status(self):
        """Gets the status of this ProxyGetPayment.  # noqa: E501

        The status of the payment in Zuora. The value depends on the type of payment.  For electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.   # noqa: E501

        :return: The status of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyGetPayment.

        The status of the payment in Zuora. The value depends on the type of payment.  For electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.   # noqa: E501

        :param status: The status of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processed", "Error", "Voided", "Canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted_on(self):
        """Gets the submitted_on of this ProxyGetPayment.  # noqa: E501

        The date and time when the payment was submitted.   # noqa: E501

        :return: The submitted_on of this ProxyGetPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_on

    @submitted_on.setter
    def submitted_on(self, submitted_on):
        """Sets the submitted_on of this ProxyGetPayment.

        The date and time when the payment was submitted.   # noqa: E501

        :param submitted_on: The submitted_on of this ProxyGetPayment.  # noqa: E501
        :type: datetime
        """

        self._submitted_on = submitted_on

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyGetPayment.  # noqa: E501

        Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.   # noqa: E501

        :return: The transferred_to_accounting of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyGetPayment.

        Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def type(self):
        """Gets the type of this ProxyGetPayment.  # noqa: E501

        The type of the payment, whether the payment is external or electronic.   # noqa: E501

        :return: The type of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxyGetPayment.

        The type of the payment, whether the payment is external or electronic.   # noqa: E501

        :param type: The type of this ProxyGetPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["External", "Electronic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this ProxyGetPayment.  # noqa: E501

        The ID of the Zuora user who last updated the payment.   # noqa: E501

        :return: The updated_by_id of this ProxyGetPayment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this ProxyGetPayment.

        The ID of the Zuora user who last updated the payment.   # noqa: E501

        :param updated_by_id: The updated_by_id of this ProxyGetPayment.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this ProxyGetPayment.  # noqa: E501

        The date and time when the payment was last updated.   # noqa: E501

        :return: The updated_date of this ProxyGetPayment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ProxyGetPayment.

        The date and time when the payment was last updated.   # noqa: E501

        :param updated_date: The updated_date of this ProxyGetPayment.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyGetPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGetPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
