# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.accounting_code_object_custom_fields import AccountingCodeObjectCustomFields  # noqa: F401,E501


class GETAccountingCodeItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'created_by': 'str',
        'created_on': 'datetime',
        'gl_account_name': 'str',
        'gl_account_number': 'str',
        'id': 'str',
        'name': 'str',
        'notes': 'str',
        'status': 'str',
        'success': 'bool',
        'type': 'str',
        'updated_by': 'str',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'category': 'category',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'gl_account_name': 'glAccountName',
        'gl_account_number': 'glAccountNumber',
        'id': 'id',
        'name': 'name',
        'notes': 'notes',
        'status': 'status',
        'success': 'success',
        'type': 'type',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn'
    }

    def __init__(self, category=None, created_by=None, created_on=None, gl_account_name=None, gl_account_number=None, id=None, name=None, notes=None, status=None, success=None, type=None, updated_by=None, updated_on=None):  # noqa: E501
        """GETAccountingCodeItemType - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._created_by = None
        self._created_on = None
        self._gl_account_name = None
        self._gl_account_number = None
        self._id = None
        self._name = None
        self._notes = None
        self._status = None
        self._success = None
        self._type = None
        self._updated_by = None
        self._updated_on = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if gl_account_name is not None:
            self.gl_account_name = gl_account_name
        if gl_account_number is not None:
            self.gl_account_number = gl_account_number
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if status is not None:
            self.status = status
        if success is not None:
            self.success = success
        if type is not None:
            self.type = type
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def category(self):
        """Gets the category of this GETAccountingCodeItemType.  # noqa: E501

        The category associated with the accounting code.   # noqa: E501

        :return: The category of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GETAccountingCodeItemType.

        The category associated with the accounting code.   # noqa: E501

        :param category: The category of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Assets", "Liabilities", "Equity", "Revenue", "Expenses"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_by(self):
        """Gets the created_by of this GETAccountingCodeItemType.  # noqa: E501

        The ID of the user who created the accounting code.   # noqa: E501

        :return: The created_by of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GETAccountingCodeItemType.

        The ID of the user who created the accounting code.   # noqa: E501

        :param created_by: The created_by of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this GETAccountingCodeItemType.  # noqa: E501

        Date and time when the accounting code was created.   # noqa: E501

        :return: The created_on of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this GETAccountingCodeItemType.

        Date and time when the accounting code was created.   # noqa: E501

        :param created_on: The created_on of this GETAccountingCodeItemType.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def gl_account_name(self):
        """Gets the gl_account_name of this GETAccountingCodeItemType.  # noqa: E501

        Name of the account in your general ledger.  Field only available if you have Zuora Finance enabled.   # noqa: E501

        :return: The gl_account_name of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._gl_account_name

    @gl_account_name.setter
    def gl_account_name(self, gl_account_name):
        """Sets the gl_account_name of this GETAccountingCodeItemType.

        Name of the account in your general ledger.  Field only available if you have Zuora Finance enabled.   # noqa: E501

        :param gl_account_name: The gl_account_name of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._gl_account_name = gl_account_name

    @property
    def gl_account_number(self):
        """Gets the gl_account_number of this GETAccountingCodeItemType.  # noqa: E501

        Account number in your general ledger.  Field only available if you have Zuora Finance enabled.   # noqa: E501

        :return: The gl_account_number of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._gl_account_number

    @gl_account_number.setter
    def gl_account_number(self, gl_account_number):
        """Sets the gl_account_number of this GETAccountingCodeItemType.

        Account number in your general ledger.  Field only available if you have Zuora Finance enabled.   # noqa: E501

        :param gl_account_number: The gl_account_number of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._gl_account_number = gl_account_number

    @property
    def id(self):
        """Gets the id of this GETAccountingCodeItemType.  # noqa: E501

        ID of the accounting code.   # noqa: E501

        :return: The id of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETAccountingCodeItemType.

        ID of the accounting code.   # noqa: E501

        :param id: The id of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GETAccountingCodeItemType.  # noqa: E501

        Name of the accounting code.   # noqa: E501

        :return: The name of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GETAccountingCodeItemType.

        Name of the accounting code.   # noqa: E501

        :param name: The name of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this GETAccountingCodeItemType.  # noqa: E501

        Any optional notes for the accounting code.   # noqa: E501

        :return: The notes of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GETAccountingCodeItemType.

        Any optional notes for the accounting code.   # noqa: E501

        :param notes: The notes of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def status(self):
        """Gets the status of this GETAccountingCodeItemType.  # noqa: E501

        The accounting code status.   # noqa: E501

        :return: The status of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETAccountingCodeItemType.

        The accounting code status.   # noqa: E501

        :param status: The status of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def success(self):
        """Gets the success of this GETAccountingCodeItemType.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GETAccountingCodeItemType.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this GETAccountingCodeItemType.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def type(self):
        """Gets the type of this GETAccountingCodeItemType.  # noqa: E501

        Accounting code type.   Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature.    # noqa: E501

        :return: The type of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GETAccountingCodeItemType.

        Accounting code type.   Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature.    # noqa: E501

        :param type: The type of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """
        allowed_values = ["AccountsReceivable", "On-Account Receivable", "Cash", "OtherAssets", "CustomerCashOnAccount", "DeferredRevenue", "SalesTaxPayable", "OtherLiabilities", "SalesRevenue", "SalesDiscounts", "OtherRevenue", "OtherEquity", "BadDebt", "OtherExpenses"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_by(self):
        """Gets the updated_by of this GETAccountingCodeItemType.  # noqa: E501

        The ID of the user who last updated the accounting code.   # noqa: E501

        :return: The updated_by of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this GETAccountingCodeItemType.

        The ID of the user who last updated the accounting code.   # noqa: E501

        :param updated_by: The updated_by of this GETAccountingCodeItemType.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this GETAccountingCodeItemType.  # noqa: E501

        Date and time when the accounting code was last updated.   # noqa: E501

        :return: The updated_on of this GETAccountingCodeItemType.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this GETAccountingCodeItemType.

        Date and time when the accounting code was last updated.   # noqa: E501

        :param updated_on: The updated_on of this GETAccountingCodeItemType.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETAccountingCodeItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETAccountingCodeItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
