# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.subscription_object_custom_fields import SubscriptionObjectCustomFields  # noqa: F401,E501
from zuora_client.models.subscription_object_ns_fields import SubscriptionObjectNSFields  # noqa: F401,E501
from zuora_client.models.subscription_object_qt_fields import SubscriptionObjectQTFields  # noqa: F401,E501


class SubscribeRequestSubscriptionDataSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpq_bundle_json_id__qt': 'str',
        'opportunity_close_date__qt': 'date',
        'opportunity_name__qt': 'str',
        'quote_business_type__qt': 'str',
        'quote_number__qt': 'str',
        'quote_type__qt': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'project__ns': 'str',
        'sales_order__ns': 'str',
        'sync_date__ns': 'str',
        'account_id': 'str',
        'ancestor_account_id': 'str',
        'auto_renew': 'bool',
        'cancelled_date': 'date',
        'contract_acceptance_date': 'date',
        'contract_effective_date': 'date',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'creator_account_id': 'str',
        'creator_invoice_owner_id': 'str',
        'current_term': 'int',
        'current_term_period_type': 'str',
        'initial_term': 'int',
        'initial_term_period_type': 'str',
        'invoice_owner_id': 'str',
        'is_invoice_separate': 'bool',
        'name': 'str',
        'notes': 'str',
        'original_created_date': 'datetime',
        'original_id': 'str',
        'previous_subscription_id': 'str',
        'renewal_setting': 'str',
        'renewal_term': 'int',
        'renewal_term_period_type': 'str',
        'service_activation_date': 'date',
        'status': 'str',
        'subscription_end_date': 'date',
        'subscription_start_date': 'date',
        'term_end_date': 'date',
        'term_start_date': 'date',
        'term_type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime',
        'version': 'int'
    }

    attribute_map = {
        'cpq_bundle_json_id__qt': 'CpqBundleJsonId__QT',
        'opportunity_close_date__qt': 'OpportunityCloseDate__QT',
        'opportunity_name__qt': 'OpportunityName__QT',
        'quote_business_type__qt': 'QuoteBusinessType__QT',
        'quote_number__qt': 'QuoteNumber__QT',
        'quote_type__qt': 'QuoteType__QT',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'project__ns': 'Project__NS',
        'sales_order__ns': 'SalesOrder__NS',
        'sync_date__ns': 'SyncDate__NS',
        'account_id': 'AccountId',
        'ancestor_account_id': 'AncestorAccountId',
        'auto_renew': 'AutoRenew',
        'cancelled_date': 'CancelledDate',
        'contract_acceptance_date': 'ContractAcceptanceDate',
        'contract_effective_date': 'ContractEffectiveDate',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'creator_account_id': 'CreatorAccountId',
        'creator_invoice_owner_id': 'CreatorInvoiceOwnerId',
        'current_term': 'CurrentTerm',
        'current_term_period_type': 'CurrentTermPeriodType',
        'initial_term': 'InitialTerm',
        'initial_term_period_type': 'InitialTermPeriodType',
        'invoice_owner_id': 'InvoiceOwnerId',
        'is_invoice_separate': 'IsInvoiceSeparate',
        'name': 'Name',
        'notes': 'Notes',
        'original_created_date': 'OriginalCreatedDate',
        'original_id': 'OriginalId',
        'previous_subscription_id': 'PreviousSubscriptionId',
        'renewal_setting': 'RenewalSetting',
        'renewal_term': 'RenewalTerm',
        'renewal_term_period_type': 'RenewalTermPeriodType',
        'service_activation_date': 'ServiceActivationDate',
        'status': 'Status',
        'subscription_end_date': 'SubscriptionEndDate',
        'subscription_start_date': 'SubscriptionStartDate',
        'term_end_date': 'TermEndDate',
        'term_start_date': 'TermStartDate',
        'term_type': 'TermType',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate',
        'version': 'Version'
    }

    def __init__(self, cpq_bundle_json_id__qt=None, opportunity_close_date__qt=None, opportunity_name__qt=None, quote_business_type__qt=None, quote_number__qt=None, quote_type__qt=None, integration_id__ns=None, integration_status__ns=None, project__ns=None, sales_order__ns=None, sync_date__ns=None, account_id=None, ancestor_account_id=None, auto_renew=None, cancelled_date=None, contract_acceptance_date=None, contract_effective_date=None, created_by_id=None, created_date=None, creator_account_id=None, creator_invoice_owner_id=None, current_term=None, current_term_period_type=None, initial_term=None, initial_term_period_type=None, invoice_owner_id=None, is_invoice_separate=None, name=None, notes=None, original_created_date=None, original_id=None, previous_subscription_id=None, renewal_setting=None, renewal_term=None, renewal_term_period_type=None, service_activation_date=None, status=None, subscription_end_date=None, subscription_start_date=None, term_end_date=None, term_start_date=None, term_type=None, updated_by_id=None, updated_date=None, version=None):  # noqa: E501
        """SubscribeRequestSubscriptionDataSubscription - a model defined in Swagger"""  # noqa: E501

        self._cpq_bundle_json_id__qt = None
        self._opportunity_close_date__qt = None
        self._opportunity_name__qt = None
        self._quote_business_type__qt = None
        self._quote_number__qt = None
        self._quote_type__qt = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._project__ns = None
        self._sales_order__ns = None
        self._sync_date__ns = None
        self._account_id = None
        self._ancestor_account_id = None
        self._auto_renew = None
        self._cancelled_date = None
        self._contract_acceptance_date = None
        self._contract_effective_date = None
        self._created_by_id = None
        self._created_date = None
        self._creator_account_id = None
        self._creator_invoice_owner_id = None
        self._current_term = None
        self._current_term_period_type = None
        self._initial_term = None
        self._initial_term_period_type = None
        self._invoice_owner_id = None
        self._is_invoice_separate = None
        self._name = None
        self._notes = None
        self._original_created_date = None
        self._original_id = None
        self._previous_subscription_id = None
        self._renewal_setting = None
        self._renewal_term = None
        self._renewal_term_period_type = None
        self._service_activation_date = None
        self._status = None
        self._subscription_end_date = None
        self._subscription_start_date = None
        self._term_end_date = None
        self._term_start_date = None
        self._term_type = None
        self._updated_by_id = None
        self._updated_date = None
        self._version = None
        self.discriminator = None

        if cpq_bundle_json_id__qt is not None:
            self.cpq_bundle_json_id__qt = cpq_bundle_json_id__qt
        if opportunity_close_date__qt is not None:
            self.opportunity_close_date__qt = opportunity_close_date__qt
        if opportunity_name__qt is not None:
            self.opportunity_name__qt = opportunity_name__qt
        if quote_business_type__qt is not None:
            self.quote_business_type__qt = quote_business_type__qt
        if quote_number__qt is not None:
            self.quote_number__qt = quote_number__qt
        if quote_type__qt is not None:
            self.quote_type__qt = quote_type__qt
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if project__ns is not None:
            self.project__ns = project__ns
        if sales_order__ns is not None:
            self.sales_order__ns = sales_order__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if account_id is not None:
            self.account_id = account_id
        if ancestor_account_id is not None:
            self.ancestor_account_id = ancestor_account_id
        if auto_renew is not None:
            self.auto_renew = auto_renew
        if cancelled_date is not None:
            self.cancelled_date = cancelled_date
        if contract_acceptance_date is not None:
            self.contract_acceptance_date = contract_acceptance_date
        self.contract_effective_date = contract_effective_date
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if creator_account_id is not None:
            self.creator_account_id = creator_account_id
        if creator_invoice_owner_id is not None:
            self.creator_invoice_owner_id = creator_invoice_owner_id
        if current_term is not None:
            self.current_term = current_term
        if current_term_period_type is not None:
            self.current_term_period_type = current_term_period_type
        if initial_term is not None:
            self.initial_term = initial_term
        if initial_term_period_type is not None:
            self.initial_term_period_type = initial_term_period_type
        if invoice_owner_id is not None:
            self.invoice_owner_id = invoice_owner_id
        if is_invoice_separate is not None:
            self.is_invoice_separate = is_invoice_separate
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if original_created_date is not None:
            self.original_created_date = original_created_date
        if original_id is not None:
            self.original_id = original_id
        if previous_subscription_id is not None:
            self.previous_subscription_id = previous_subscription_id
        if renewal_setting is not None:
            self.renewal_setting = renewal_setting
        if renewal_term is not None:
            self.renewal_term = renewal_term
        if renewal_term_period_type is not None:
            self.renewal_term_period_type = renewal_term_period_type
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        if status is not None:
            self.status = status
        if subscription_end_date is not None:
            self.subscription_end_date = subscription_end_date
        if subscription_start_date is not None:
            self.subscription_start_date = subscription_start_date
        if term_end_date is not None:
            self.term_end_date = term_end_date
        if term_start_date is not None:
            self.term_start_date = term_start_date
        self.term_type = term_type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date
        if version is not None:
            self.version = version

    @property
    def cpq_bundle_json_id__qt(self):
        """Gets the cpq_bundle_json_id__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :return: The cpq_bundle_json_id__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._cpq_bundle_json_id__qt

    @cpq_bundle_json_id__qt.setter
    def cpq_bundle_json_id__qt(self, cpq_bundle_json_id__qt):
        """Sets the cpq_bundle_json_id__qt of this SubscribeRequestSubscriptionDataSubscription.

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :param cpq_bundle_json_id__qt: The cpq_bundle_json_id__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if cpq_bundle_json_id__qt is not None and len(cpq_bundle_json_id__qt) > 32:
            raise ValueError("Invalid value for `cpq_bundle_json_id__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._cpq_bundle_json_id__qt = cpq_bundle_json_id__qt

    @property
    def opportunity_close_date__qt(self):
        """Gets the opportunity_close_date__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_close_date__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._opportunity_close_date__qt

    @opportunity_close_date__qt.setter
    def opportunity_close_date__qt(self, opportunity_close_date__qt):
        """Sets the opportunity_close_date__qt of this SubscribeRequestSubscriptionDataSubscription.

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_close_date__qt: The opportunity_close_date__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._opportunity_close_date__qt = opportunity_close_date__qt

    @property
    def opportunity_name__qt(self):
        """Gets the opportunity_name__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_name__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._opportunity_name__qt

    @opportunity_name__qt.setter
    def opportunity_name__qt(self, opportunity_name__qt):
        """Sets the opportunity_name__qt of this SubscribeRequestSubscriptionDataSubscription.

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_name__qt: The opportunity_name__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if opportunity_name__qt is not None and len(opportunity_name__qt) > 100:
            raise ValueError("Invalid value for `opportunity_name__qt`, length must be less than or equal to `100`")  # noqa: E501

        self._opportunity_name__qt = opportunity_name__qt

    @property
    def quote_business_type__qt(self):
        """Gets the quote_business_type__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_business_type__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._quote_business_type__qt

    @quote_business_type__qt.setter
    def quote_business_type__qt(self, quote_business_type__qt):
        """Sets the quote_business_type__qt of this SubscribeRequestSubscriptionDataSubscription.

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_business_type__qt: The quote_business_type__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if quote_business_type__qt is not None and len(quote_business_type__qt) > 32:
            raise ValueError("Invalid value for `quote_business_type__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._quote_business_type__qt = quote_business_type__qt

    @property
    def quote_number__qt(self):
        """Gets the quote_number__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_number__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._quote_number__qt

    @quote_number__qt.setter
    def quote_number__qt(self, quote_number__qt):
        """Sets the quote_number__qt of this SubscribeRequestSubscriptionDataSubscription.

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_number__qt: The quote_number__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if quote_number__qt is not None and len(quote_number__qt) > 32:
            raise ValueError("Invalid value for `quote_number__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._quote_number__qt = quote_number__qt

    @property
    def quote_type__qt(self):
        """Gets the quote_type__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_type__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._quote_type__qt

    @quote_type__qt.setter
    def quote_type__qt(self, quote_type__qt):
        """Sets the quote_type__qt of this SubscribeRequestSubscriptionDataSubscription.

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_type__qt: The quote_type__qt of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if quote_type__qt is not None and len(quote_type__qt) > 32:
            raise ValueError("Invalid value for `quote_type__qt`, length must be less than or equal to `32`")  # noqa: E501

        self._quote_type__qt = quote_type__qt

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this SubscribeRequestSubscriptionDataSubscription.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this SubscribeRequestSubscriptionDataSubscription.

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def project__ns(self):
        """Gets the project__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The project__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._project__ns

    @project__ns.setter
    def project__ns(self, project__ns):
        """Sets the project__ns of this SubscribeRequestSubscriptionDataSubscription.

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param project__ns: The project__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if project__ns is not None and len(project__ns) > 255:
            raise ValueError("Invalid value for `project__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._project__ns = project__ns

    @property
    def sales_order__ns(self):
        """Gets the sales_order__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sales_order__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._sales_order__ns

    @sales_order__ns.setter
    def sales_order__ns(self, sales_order__ns):
        """Sets the sales_order__ns of this SubscribeRequestSubscriptionDataSubscription.

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sales_order__ns: The sales_order__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if sales_order__ns is not None and len(sales_order__ns) > 255:
            raise ValueError("Invalid value for `sales_order__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sales_order__ns = sales_order__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this SubscribeRequestSubscriptionDataSubscription.

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def account_id(self):
        """Gets the account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when `Status` is `Draft`.   # noqa: E501

        :return: The account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when `Status` is `Draft`.   # noqa: E501

        :param account_id: The account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def ancestor_account_id(self):
        """Gets the ancestor_account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         A filter option for querying all subscriptions under the same account hierarchy.   **Character limit**: 32   **Values**: a valid account ID   # noqa: E501

        :return: The ancestor_account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._ancestor_account_id

    @ancestor_account_id.setter
    def ancestor_account_id(self, ancestor_account_id):
        """Sets the ancestor_account_id of this SubscribeRequestSubscriptionDataSubscription.

         A filter option for querying all subscriptions under the same account hierarchy.   **Character limit**: 32   **Values**: a valid account ID   # noqa: E501

        :param ancestor_account_id: The ancestor_account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._ancestor_account_id = ancestor_account_id

    @property
    def auto_renew(self):
        """Gets the auto_renew of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when `Status` is `Draft`. Indicates if the subscription automatically renews at the end of the term. This field is only required if the `TermType` field is set to `TERMED`.    **Values**: `true`, `false`   # noqa: E501

        :return: The auto_renew of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when `Status` is `Draft`. Indicates if the subscription automatically renews at the end of the term. This field is only required if the `TermType` field is set to `TERMED`.    **Values**: `true`, `false`   # noqa: E501

        :param auto_renew: The auto_renew of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def cancelled_date(self):
        """Gets the cancelled_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date of the amendment that canceled the subscription.    **Values**: inherited from `Amendment`.`EffectiveDate`   # noqa: E501

        :return: The cancelled_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._cancelled_date

    @cancelled_date.setter
    def cancelled_date(self, cancelled_date):
        """Sets the cancelled_date of this SubscribeRequestSubscriptionDataSubscription.

         The date of the amendment that canceled the subscription.    **Values**: inherited from `Amendment`.`EffectiveDate`   # noqa: E501

        :param cancelled_date: The cancelled_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._cancelled_date = cancelled_date

    @property
    def contract_acceptance_date(self):
        """Gets the contract_acceptance_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`.   This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:  - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription. - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.   # noqa: E501

        :return: The contract_acceptance_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._contract_acceptance_date

    @contract_acceptance_date.setter
    def contract_acceptance_date(self, contract_acceptance_date):
        """Sets the contract_acceptance_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`.   This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:  - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription. - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.   # noqa: E501

        :param contract_acceptance_date: The contract_acceptance_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._contract_acceptance_date = contract_acceptance_date

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the contract takes effect. This field can be updated when **Status** is `Draft`.   **Note**: This field is required in the subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field.   # noqa: E501

        :return: The contract_effective_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the contract takes effect. This field can be updated when **Status** is `Draft`.   **Note**: This field is required in the subscribe call. If you set the value of this field to null and both the ServiceActivationDate and ContractAcceptanceDate fields are not required, the subscribe call still returns success, but the new subscription is in `DRAFT` status. To activate the subscription, you must set a valid date to this field.   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """
        if contract_effective_date is None:
            raise ValueError("Invalid value for `contract_effective_date`, must not be `None`")  # noqa: E501

        self._contract_effective_date = contract_effective_date

    @property
    def created_by_id(self):
        """Gets the created_by_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The user ID of the person who created the subscription.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this SubscribeRequestSubscriptionDataSubscription.

        The user ID of the person who created the subscription.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date the subscription was created. This value is the same as the OriginalCreatedDate value until the subscription is amended.    **Values**: automatically generated   # noqa: E501

        :return: The created_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SubscribeRequestSubscriptionDataSubscription.

         The date the subscription was created. This value is the same as the OriginalCreatedDate value until the subscription is amended.    **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def creator_account_id(self):
        """Gets the creator_account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The account ID that created the subscription or the amended subscription.   **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The creator_account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._creator_account_id

    @creator_account_id.setter
    def creator_account_id(self, creator_account_id):
        """Sets the creator_account_id of this SubscribeRequestSubscriptionDataSubscription.

         The account ID that created the subscription or the amended subscription.   **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param creator_account_id: The creator_account_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._creator_account_id = creator_account_id

    @property
    def creator_invoice_owner_id(self):
        """Gets the creator_invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

        The account ID that owns the invoices associated with the subscription or the amended subscription.   **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The creator_invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._creator_invoice_owner_id

    @creator_invoice_owner_id.setter
    def creator_invoice_owner_id(self, creator_invoice_owner_id):
        """Sets the creator_invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.

        The account ID that owns the invoices associated with the subscription or the amended subscription.   **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param creator_invoice_owner_id: The creator_invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._creator_invoice_owner_id = creator_invoice_owner_id

    @property
    def current_term(self):
        """Gets the current_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The length of the period for the current subscription term. This field is only required If the `TermType` field is set to `TERMED` and its value must be greater than `0`. If TermType is set to `EVERGREEN`, this value is ignored. Default is `0`.   **Character limit**: 20   **Values**: automatically generated   # noqa: E501

        :return: The current_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: int
        """
        return self._current_term

    @current_term.setter
    def current_term(self, current_term):
        """Sets the current_term of this SubscribeRequestSubscriptionDataSubscription.

         The length of the period for the current subscription term. This field is only required If the `TermType` field is set to `TERMED` and its value must be greater than `0`. If TermType is set to `EVERGREEN`, this value is ignored. Default is `0`.   **Character limit**: 20   **Values**: automatically generated   # noqa: E501

        :param current_term: The current_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: int
        """

        self._current_term = current_term

    @property
    def current_term_period_type(self):
        """Gets the current_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.    **Values**:  - `Month` (default) - `Year` - `Day` - `Week`   # noqa: E501

        :return: The current_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._current_term_period_type

    @current_term_period_type.setter
    def current_term_period_type(self, current_term_period_type):
        """Sets the current_term_period_type of this SubscribeRequestSubscriptionDataSubscription.

         The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.    **Values**:  - `Month` (default) - `Year` - `Day` - `Week`   # noqa: E501

        :param current_term_period_type: The current_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._current_term_period_type = current_term_period_type

    @property
    def initial_term(self):
        """Gets the initial_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The length of the period for the first subscription term. This field can be updated when Status is `Draft`. If you use the subscribe call, this field is required.   This field is only required if the `TermType` field is set to `TERMED`.  **Character limit**: 20   **Values**: any valid number. The default value is 0.   # noqa: E501

        :return: The initial_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: int
        """
        return self._initial_term

    @initial_term.setter
    def initial_term(self, initial_term):
        """Sets the initial_term of this SubscribeRequestSubscriptionDataSubscription.

         The length of the period for the first subscription term. This field can be updated when Status is `Draft`. If you use the subscribe call, this field is required.   This field is only required if the `TermType` field is set to `TERMED`.  **Character limit**: 20   **Values**: any valid number. The default value is 0.   # noqa: E501

        :param initial_term: The initial_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: int
        """

        self._initial_term = initial_term

    @property
    def initial_term_period_type(self):
        """Gets the initial_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The period type for the first subscription term.    **Values**:  - `Month` (default) - `Year` - `Day` - `Week`   **Note**:  - This field can be updated when `Status` is `Draft`. - This field is used with the `InitialTerm` field to specify the initial subscription term.   # noqa: E501

        :return: The initial_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._initial_term_period_type

    @initial_term_period_type.setter
    def initial_term_period_type(self, initial_term_period_type):
        """Sets the initial_term_period_type of this SubscribeRequestSubscriptionDataSubscription.

         The period type for the first subscription term.    **Values**:  - `Month` (default) - `Year` - `Day` - `Week`   **Note**:  - This field can be updated when `Status` is `Draft`. - This field is used with the `InitialTerm` field to specify the initial subscription term.   # noqa: E501

        :param initial_term_period_type: The initial_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._initial_term_period_type = initial_term_period_type

    @property
    def invoice_owner_id(self):
        """Gets the invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when `Status` is `Draft`.   # noqa: E501

        :return: The invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_id

    @invoice_owner_id.setter
    def invoice_owner_id(self, invoice_owner_id):
        """Sets the invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when `Status` is `Draft`.   # noqa: E501

        :param invoice_owner_id: The invoice_owner_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._invoice_owner_id = invoice_owner_id

    @property
    def is_invoice_separate(self):
        """Gets the is_invoice_separate of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.    **Values**: `TRUE`, `FALSE `(default)   # noqa: E501

        :return: The is_invoice_separate of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_invoice_separate

    @is_invoice_separate.setter
    def is_invoice_separate(self, is_invoice_separate):
        """Sets the is_invoice_separate of this SubscribeRequestSubscriptionDataSubscription.

         Determines if the subscription is invoiced separately. If `TRUE`, then all charges for this subscription are collected into the subscription's own invoice.    **Values**: `TRUE`, `FALSE `(default)   # noqa: E501

        :param is_invoice_separate: The is_invoice_separate of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: bool
        """

        self._is_invoice_separate = is_invoice_separate

    @property
    def name(self):
        """Gets the name of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur. You can change this value only when the subscription is in `Draft` status. Once the subscription is activated, you can't change this value, nor can you use this value for a different subscription.   **Character limit**: 100   **Values**: one of the following:  - leave null to automatically generate - a string of 100 characters or fewer   # noqa: E501

        :return: The name of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscribeRequestSubscriptionDataSubscription.

         The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur. You can change this value only when the subscription is in `Draft` status. Once the subscription is activated, you can't change this value, nor can you use this value for a different subscription.   **Character limit**: 100   **Values**: one of the following:  - leave null to automatically generate - a string of 100 characters or fewer   # noqa: E501

        :param name: The name of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         Use this field to record comments about the subscription.   **Character limit**: 500   **Values**: a string of 500 characters or fewer   # noqa: E501

        :return: The notes of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SubscribeRequestSubscriptionDataSubscription.

         Use this field to record comments about the subscription.   **Character limit**: 500   **Values**: a string of 500 characters or fewer   # noqa: E501

        :param notes: The notes of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def original_created_date(self):
        """Gets the original_created_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the subscription was originally created. This value is the same as the CreatedDate value until the subscription is amended.    **Values**: automatically generated   # noqa: E501

        :return: The original_created_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._original_created_date

    @original_created_date.setter
    def original_created_date(self, original_created_date):
        """Sets the original_created_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the subscription was originally created. This value is the same as the CreatedDate value until the subscription is amended.    **Values**: automatically generated   # noqa: E501

        :param original_created_date: The original_created_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: datetime
        """

        self._original_created_date = original_created_date

    @property
    def original_id(self):
        """Gets the original_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The original ID of this subscription.    **Values**: automatically generated   # noqa: E501

        :return: The original_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this SubscribeRequestSubscriptionDataSubscription.

         The original ID of this subscription.    **Values**: automatically generated   # noqa: E501

        :param original_id: The original_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._original_id = original_id

    @property
    def previous_subscription_id(self):
        """Gets the previous_subscription_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The subscription ID immediately prior to the current subscription.   **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The previous_subscription_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._previous_subscription_id

    @previous_subscription_id.setter
    def previous_subscription_id(self, previous_subscription_id):
        """Sets the previous_subscription_id of this SubscribeRequestSubscriptionDataSubscription.

         The subscription ID immediately prior to the current subscription.   **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param previous_subscription_id: The previous_subscription_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._previous_subscription_id = previous_subscription_id

    @property
    def renewal_setting(self):
        """Gets the renewal_setting of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.   This field is only required if the `TermType` field is set to `TERMED`.   **Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN`   # noqa: E501

        :return: The renewal_setting of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._renewal_setting

    @renewal_setting.setter
    def renewal_setting(self, renewal_setting):
        """Sets the renewal_setting of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when **Status** is `Draft`. Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.   This field is only required if the `TermType` field is set to `TERMED`.   **Values**: `RENEW_WITH_SPECIFIC_TERM `(default), `RENEW_TO_EVERGREEN`   # noqa: E501

        :param renewal_setting: The renewal_setting of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._renewal_setting = renewal_setting

    @property
    def renewal_term(self):
        """Gets the renewal_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. If you use the subscribe call, this field is required.   This field is only required if the `TermType` field is set to `TERMED`.   **Character limit**: 20   **Values**: one of the following:  - leave null to default to `0` - any number   # noqa: E501

        :return: The renewal_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: int
        """
        return self._renewal_term

    @renewal_term.setter
    def renewal_term(self, renewal_term):
        """Sets the renewal_term of this SubscribeRequestSubscriptionDataSubscription.

         The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. If you use the subscribe call, this field is required.   This field is only required if the `TermType` field is set to `TERMED`.   **Character limit**: 20   **Values**: one of the following:  - leave null to default to `0` - any number   # noqa: E501

        :param renewal_term: The renewal_term of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: int
        """

        self._renewal_term = renewal_term

    @property
    def renewal_term_period_type(self):
        """Gets the renewal_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The period type for the subscription renewal term.    **Values**:  - `Month` (default) - `Year` - `Day` - `Week`   **Note**:  - This field is used with the RenewalTerm field to specify the subscription renewal term. - This field can be updated when Status is `Draft`.   # noqa: E501

        :return: The renewal_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._renewal_term_period_type

    @renewal_term_period_type.setter
    def renewal_term_period_type(self, renewal_term_period_type):
        """Sets the renewal_term_period_type of this SubscribeRequestSubscriptionDataSubscription.

         The period type for the subscription renewal term.    **Values**:  - `Month` (default) - `Year` - `Day` - `Week`   **Note**:  - This field is used with the RenewalTerm field to specify the subscription renewal term. - This field can be updated when Status is `Draft`.   # noqa: E501

        :param renewal_term_period_type: The renewal_term_period_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._renewal_term_period_type = renewal_term_period_type

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the subscription is activated. This field can be updated when **Status** is `Draft`. This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:  - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription. - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.   **Character limit**: 29    # noqa: E501

        :return: The service_activation_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the subscription is activated. This field can be updated when **Status** is `Draft`. This field is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:  - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription. - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.   **Character limit**: 29    # noqa: E501

        :param service_activation_date: The service_activation_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def status(self):
        """Gets the status of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The status of the subscription.   **Character limit**: 17   **Values**: automatically generated  **Possible values**: one of the following:  - `Draft` - `PendingActivation` - `PendingAcceptance` - `Active` - `Cancelled` - `Expired` - `Suspended` (This value is in **Limited Availability**.)   # noqa: E501

        :return: The status of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscribeRequestSubscriptionDataSubscription.

         The status of the subscription.   **Character limit**: 17   **Values**: automatically generated  **Possible values**: one of the following:  - `Draft` - `PendingActivation` - `PendingAcceptance` - `Active` - `Cancelled` - `Expired` - `Suspended` (This value is in **Limited Availability**.)   # noqa: E501

        :param status: The status of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscription_end_date(self):
        """Gets the subscription_end_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The subscription_end_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._subscription_end_date

    @subscription_end_date.setter
    def subscription_end_date(self, subscription_end_date):
        """Sets the subscription_end_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param subscription_end_date: The subscription_end_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._subscription_end_date = subscription_end_date

    @property
    def subscription_start_date(self):
        """Gets the subscription_start_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The subscription_start_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._subscription_start_date

    @subscription_start_date.setter
    def subscription_start_date(self, subscription_start_date):
        """Sets the subscription_start_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param subscription_start_date: The subscription_start_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._subscription_start_date = subscription_start_date

    @property
    def term_end_date(self):
        """Gets the term_end_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when **Status** is `Draft`. The date when the subscription term ends. If the subscription is evergreen, the TermEndDate value is null or is the cancelation date, as appropriate.  **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The term_end_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._term_end_date

    @term_end_date.setter
    def term_end_date(self, term_end_date):
        """Sets the term_end_date of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when **Status** is `Draft`. The date when the subscription term ends. If the subscription is evergreen, the TermEndDate value is null or is the cancelation date, as appropriate.  **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param term_end_date: The term_end_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._term_end_date = term_end_date

    @property
    def term_start_date(self):
        """Gets the term_start_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date. If you don't specify a value, then Zuora uses ContractEffectiveDate automatically.   **Character limit**: 29   # noqa: E501

        :return: The term_start_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: date
        """
        return self._term_start_date

    @term_start_date.setter
    def term_start_date(self, term_start_date):
        """Sets the term_start_date of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when **Status** is `Draft`. The date when the subscription term begins. If this is a renewal subscription, then this date is different from the subscription start date. If you don't specify a value, then Zuora uses ContractEffectiveDate automatically.   **Character limit**: 29   # noqa: E501

        :param term_start_date: The term_start_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: date
        """

        self._term_start_date = term_start_date

    @property
    def term_type(self):
        """Gets the term_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         This field can be updated when **Status** is `Draft`. Indicates if a subscription is [termed or evergreen](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions#Termed_and_Evergreen_Subscriptions). A termed subscription has a specific end date and requires manual renewal. An evergreen subscription doesn't have an end date and doesn't need renewal. This field can be updated when the subscription status is Draft.   **Character limit**: 9   **Values**: `TERMED`, `EVERGREEN`   # noqa: E501

        :return: The term_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this SubscribeRequestSubscriptionDataSubscription.

         This field can be updated when **Status** is `Draft`. Indicates if a subscription is [termed or evergreen](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions#Termed_and_Evergreen_Subscriptions). A termed subscription has a specific end date and requires manual renewal. An evergreen subscription doesn't have an end date and doesn't need renewal. This field can be updated when the subscription status is Draft.   **Character limit**: 9   **Values**: `TERMED`, `EVERGREEN`   # noqa: E501

        :param term_type: The term_type of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """
        if term_type is None:
            raise ValueError("Invalid value for `term_type`, must not be `None`")  # noqa: E501

        self._term_type = term_type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The ID of the user who last updated the subscription. **Character limit:** 32 **Values: **automatically generated   # noqa: E501

        :return: The updated_by_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this SubscribeRequestSubscriptionDataSubscription.

         The ID of the user who last updated the subscription. **Character limit:** 32 **Values: **automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The date when the subscription was last updated. **Character limit:** 29   **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this SubscribeRequestSubscriptionDataSubscription.

         The date when the subscription was last updated. **Character limit:** 29   **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def version(self):
        """Gets the version of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501

         The version number of the subscription.    **Values**: automatically generated   # noqa: E501

        :return: The version of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SubscribeRequestSubscriptionDataSubscription.

         The version number of the subscription.    **Values**: automatically generated   # noqa: E501

        :param version: The version of this SubscribeRequestSubscriptionDataSubscription.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscribeRequestSubscriptionDataSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscribeRequestSubscriptionDataSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
