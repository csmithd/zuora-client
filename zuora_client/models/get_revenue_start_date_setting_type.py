# coding: utf-8




import pprint
import re  # noqa: F401

import six


class GETRevenueStartDateSettingType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'date',
        'success': 'bool',
        'updated_by': 'str',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'start_date': 'startDate',
        'success': 'success',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn'
    }

    def __init__(self, start_date=None, success=None, updated_by=None, updated_on=None):  # noqa: E501
        """GETRevenueStartDateSettingType - a model defined in Swagger"""  # noqa: E501

        self._start_date = None
        self._success = None
        self._updated_by = None
        self._updated_on = None
        self.discriminator = None

        if start_date is not None:
            self.start_date = start_date
        if success is not None:
            self.success = success
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def start_date(self):
        """Gets the start_date of this GETRevenueStartDateSettingType.  # noqa: E501

        The date on which revenue automation starts. This is the first day of an accounting period.   # noqa: E501

        :return: The start_date of this GETRevenueStartDateSettingType.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GETRevenueStartDateSettingType.

        The date on which revenue automation starts. This is the first day of an accounting period.   # noqa: E501

        :param start_date: The start_date of this GETRevenueStartDateSettingType.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def success(self):
        """Gets the success of this GETRevenueStartDateSettingType.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this GETRevenueStartDateSettingType.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GETRevenueStartDateSettingType.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this GETRevenueStartDateSettingType.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def updated_by(self):
        """Gets the updated_by of this GETRevenueStartDateSettingType.  # noqa: E501

        The user who made the change.   # noqa: E501

        :return: The updated_by of this GETRevenueStartDateSettingType.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this GETRevenueStartDateSettingType.

        The user who made the change.   # noqa: E501

        :param updated_by: The updated_by of this GETRevenueStartDateSettingType.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this GETRevenueStartDateSettingType.  # noqa: E501

        The date when the revenue automation start date was set.   # noqa: E501

        :return: The updated_on of this GETRevenueStartDateSettingType.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this GETRevenueStartDateSettingType.

        The date when the revenue automation start date was set.   # noqa: E501

        :param updated_on: The updated_on of this GETRevenueStartDateSettingType.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETRevenueStartDateSettingType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETRevenueStartDateSettingType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
