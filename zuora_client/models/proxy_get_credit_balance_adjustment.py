# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.credit_balance_adjustment_object_custom_fields import CreditBalanceAdjustmentObjectCustomFields  # noqa: F401,E501
from zuora_client.models.credit_balance_adjustment_object_ns_fields import CreditBalanceAdjustmentObjectNSFields  # noqa: F401,E501


class ProxyGetCreditBalanceAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str',
        'account_id': 'str',
        'accounting_code': 'str',
        'adjustment_date': 'date',
        'amount': 'float',
        'cancelled_on': 'datetime',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'id': 'str',
        'number': 'str',
        'reason_code': 'str',
        'reference_id': 'str',
        'source_transaction_id': 'str',
        'source_transaction_number': 'str',
        'source_transaction_type': 'str',
        'status': 'str',
        'transferred_to_accounting': 'str',
        'type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS',
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'adjustment_date': 'AdjustmentDate',
        'amount': 'Amount',
        'cancelled_on': 'CancelledOn',
        'comment': 'Comment',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'id': 'Id',
        'number': 'Number',
        'reason_code': 'ReasonCode',
        'reference_id': 'ReferenceId',
        'source_transaction_id': 'SourceTransactionId',
        'source_transaction_number': 'SourceTransactionNumber',
        'source_transaction_type': 'SourceTransactionType',
        'status': 'Status',
        'transferred_to_accounting': 'TransferredToAccounting',
        'type': 'Type',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None, account_id=None, accounting_code=None, adjustment_date=None, amount=None, cancelled_on=None, comment=None, created_by_id=None, created_date=None, id=None, number=None, reason_code=None, reference_id=None, source_transaction_id=None, source_transaction_number=None, source_transaction_type=None, status=None, transferred_to_accounting=None, type=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """ProxyGetCreditBalanceAdjustment - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self._account_id = None
        self._accounting_code = None
        self._adjustment_date = None
        self._amount = None
        self._cancelled_on = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._id = None
        self._number = None
        self._reason_code = None
        self._reference_id = None
        self._source_transaction_id = None
        self._source_transaction_number = None
        self._source_transaction_type = None
        self._status = None
        self._transferred_to_accounting = None
        self._type = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if account_id is not None:
            self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_date is not None:
            self.adjustment_date = adjustment_date
        if amount is not None:
            self.amount = amount
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if reason_code is not None:
            self.reason_code = reason_code
        if reference_id is not None:
            self.reference_id = reference_id
        if source_transaction_id is not None:
            self.source_transaction_id = source_transaction_id
        if source_transaction_number is not None:
            self.source_transaction_number = source_transaction_number
        if source_transaction_type is not None:
            self.source_transaction_type = source_transaction_type
        if status is not None:
            self.status = status
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if type is not None:
            self.type = type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyGetCreditBalanceAdjustment.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

        Status of the credit balance adjustment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyGetCreditBalanceAdjustment.

        Status of the credit balance adjustment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

        Date when the credit balance adjustment was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyGetCreditBalanceAdjustment.

        Date when the credit balance adjustment was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def account_id(self):
        """Gets the account_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The account ID of the credit balance's account. Zuora generates this value from the source transaction. **Character limit**: 32 **V****alues**: automatically generated from:  - CreditBalanceAdjustment.SourceTransactionId or - CreditBalanceAdjustment.SourceTransactionNumber   # noqa: E501

        :return: The account_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyGetCreditBalanceAdjustment.

         The account ID of the credit balance's account. Zuora generates this value from the source transaction. **Character limit**: 32 **V****alues**: automatically generated from:  - CreditBalanceAdjustment.SourceTransactionId or - CreditBalanceAdjustment.SourceTransactionNumber   # noqa: E501

        :param account_id: The account_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The Chart of Accounts   # noqa: E501

        :return: The accounting_code of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyGetCreditBalanceAdjustment.

         The Chart of Accounts   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_date(self):
        """Gets the adjustment_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The date when the credit balance adjustment is applied. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The adjustment_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._adjustment_date

    @adjustment_date.setter
    def adjustment_date(self, adjustment_date):
        """Sets the adjustment_date of this ProxyGetCreditBalanceAdjustment.

         The date when the credit balance adjustment is applied. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param adjustment_date: The adjustment_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: date
        """

        self._adjustment_date = adjustment_date

    @property
    def amount(self):
        """Gets the amount of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The amount of the adjustment. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :return: The amount of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyGetCreditBalanceAdjustment.

         The amount of the adjustment. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :param amount: The amount of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The date when the credit balance adjustment was canceled. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The cancelled_on of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this ProxyGetCreditBalanceAdjustment.

         The date when the credit balance adjustment was canceled. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param cancelled_on: The cancelled_on of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: datetime
        """

        self._cancelled_on = cancelled_on

    @property
    def comment(self):
        """Gets the comment of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         Use this field to record comments about the credit balance adjustment. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The comment of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProxyGetCreditBalanceAdjustment.

         Use this field to record comments about the credit balance adjustment. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param comment: The comment of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The user ID of the person who created the credit balance adjustment. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProxyGetCreditBalanceAdjustment.

         The user ID of the person who created the credit balance adjustment. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The date when the credit balance adjustmentwas generated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The created_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProxyGetCreditBalanceAdjustment.

         The date when the credit balance adjustmentwas generated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

        Object identifier.  # noqa: E501

        :return: The id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyGetCreditBalanceAdjustment.

        Object identifier.  # noqa: E501

        :param id: The id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         A unique identifier for the credit balance adjustment. Zuora generates this number in the format, <em>CBA-xxxxxxxx</em>, such as CBA-00375919. **Character limit**: 255 **Values**: automatically generated   # noqa: E501

        :return: The number of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProxyGetCreditBalanceAdjustment.

         A unique identifier for the credit balance adjustment. Zuora generates this number in the format, <em>CBA-xxxxxxxx</em>, such as CBA-00375919. **Character limit**: 255 **Values**: automatically generated   # noqa: E501

        :param number: The number of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def reason_code(self):
        """Gets the reason_code of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :return: The reason_code of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ProxyGetCreditBalanceAdjustment.

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :param reason_code: The reason_code of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The ID of the payment that the credit balance adjustment is for. **Character limit**: 32 **Values**: a string of 60 characters or fewer   # noqa: E501

        :return: The reference_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyGetCreditBalanceAdjustment.

         The ID of the payment that the credit balance adjustment is for. **Character limit**: 32 **Values**: a string of 60 characters or fewer   # noqa: E501

        :param reference_id: The reference_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def source_transaction_id(self):
        """Gets the source_transaction_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The ID of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field. **Character limit**: 32 **Values**: one of the following:  - InvoiceId - PaymentId - RefundId   # noqa: E501

        :return: The source_transaction_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._source_transaction_id

    @source_transaction_id.setter
    def source_transaction_id(self, source_transaction_id):
        """Sets the source_transaction_id of this ProxyGetCreditBalanceAdjustment.

         The ID of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field. **Character limit**: 32 **Values**: one of the following:  - InvoiceId - PaymentId - RefundId   # noqa: E501

        :param source_transaction_id: The source_transaction_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._source_transaction_id = source_transaction_id

    @property
    def source_transaction_number(self):
        """Gets the source_transaction_number of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The number of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field. **Character limit**: 50 **Values**: one of the following:  - InvoiceNumber - PaymentNumber - RefundNumber   # noqa: E501

        :return: The source_transaction_number of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._source_transaction_number

    @source_transaction_number.setter
    def source_transaction_number(self, source_transaction_number):
        """Sets the source_transaction_number of this ProxyGetCreditBalanceAdjustment.

         The number of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field. **Character limit**: 50 **Values**: one of the following:  - InvoiceNumber - PaymentNumber - RefundNumber   # noqa: E501

        :param source_transaction_number: The source_transaction_number of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._source_transaction_number = source_transaction_number

    @property
    def source_transaction_type(self):
        """Gets the source_transaction_type of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The source of the credit balance adjustment. **Character limit**: **Values**: automatically generated; one of the following:  - Invoice - Payment - Refund   # noqa: E501

        :return: The source_transaction_type of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._source_transaction_type

    @source_transaction_type.setter
    def source_transaction_type(self, source_transaction_type):
        """Sets the source_transaction_type of this ProxyGetCreditBalanceAdjustment.

         The source of the credit balance adjustment. **Character limit**: **Values**: automatically generated; one of the following:  - Invoice - Payment - Refund   # noqa: E501

        :param source_transaction_type: The source_transaction_type of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._source_transaction_type = source_transaction_type

    @property
    def status(self):
        """Gets the status of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The status of the credit balance adjustment. **Character limit**: 9 **Values**: automatically generated; one of the following:  - Processed - Canceled   # noqa: E501

        :return: The status of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyGetCreditBalanceAdjustment.

         The status of the credit balance adjustment. **Character limit**: 9 **Values**: automatically generated; one of the following:  - Processed - Canceled   # noqa: E501

        :param status: The status of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

        Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :return: The transferred_to_accounting of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyGetCreditBalanceAdjustment.

        Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "No", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def type(self):
        """Gets the type of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

        Create Query Filter  # noqa: E501

        :return: The type of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxyGetCreditBalanceAdjustment.

        Create Query Filter  # noqa: E501

        :param type: The type of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The ID of the user who last updated the credit balance adjustment. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The updated_by_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this ProxyGetCreditBalanceAdjustment.

         The ID of the user who last updated the credit balance adjustment. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501

         The date when the credit balance adjustment was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ProxyGetCreditBalanceAdjustment.

         The date when the credit balance adjustment was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this ProxyGetCreditBalanceAdjustment.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyGetCreditBalanceAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGetCreditBalanceAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
