# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.rate_plan_charge_data_rate_plan_charge import RatePlanChargeDataRatePlanCharge  # noqa: F401,E501
from zuora_client.models.rate_plan_charge_tier import RatePlanChargeTier  # noqa: F401,E501


class RatePlanChargeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rate_plan_charge': 'RatePlanChargeDataRatePlanCharge',
        'rate_plan_charge_tier': 'list[RatePlanChargeTier]'
    }

    attribute_map = {
        'rate_plan_charge': 'RatePlanCharge',
        'rate_plan_charge_tier': 'RatePlanChargeTier'
    }

    def __init__(self, rate_plan_charge=None, rate_plan_charge_tier=None):  # noqa: E501
        """RatePlanChargeData - a model defined in Swagger"""  # noqa: E501

        self._rate_plan_charge = None
        self._rate_plan_charge_tier = None
        self.discriminator = None

        self.rate_plan_charge = rate_plan_charge
        if rate_plan_charge_tier is not None:
            self.rate_plan_charge_tier = rate_plan_charge_tier

    @property
    def rate_plan_charge(self):
        """Gets the rate_plan_charge of this RatePlanChargeData.  # noqa: E501


        :return: The rate_plan_charge of this RatePlanChargeData.  # noqa: E501
        :rtype: RatePlanChargeDataRatePlanCharge
        """
        return self._rate_plan_charge

    @rate_plan_charge.setter
    def rate_plan_charge(self, rate_plan_charge):
        """Sets the rate_plan_charge of this RatePlanChargeData.


        :param rate_plan_charge: The rate_plan_charge of this RatePlanChargeData.  # noqa: E501
        :type: RatePlanChargeDataRatePlanCharge
        """
        if rate_plan_charge is None:
            raise ValueError("Invalid value for `rate_plan_charge`, must not be `None`")  # noqa: E501

        self._rate_plan_charge = rate_plan_charge

    @property
    def rate_plan_charge_tier(self):
        """Gets the rate_plan_charge_tier of this RatePlanChargeData.  # noqa: E501

          # noqa: E501

        :return: The rate_plan_charge_tier of this RatePlanChargeData.  # noqa: E501
        :rtype: list[RatePlanChargeTier]
        """
        return self._rate_plan_charge_tier

    @rate_plan_charge_tier.setter
    def rate_plan_charge_tier(self, rate_plan_charge_tier):
        """Sets the rate_plan_charge_tier of this RatePlanChargeData.

          # noqa: E501

        :param rate_plan_charge_tier: The rate_plan_charge_tier of this RatePlanChargeData.  # noqa: E501
        :type: list[RatePlanChargeTier]
        """

        self._rate_plan_charge_tier = rate_plan_charge_tier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatePlanChargeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatePlanChargeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
