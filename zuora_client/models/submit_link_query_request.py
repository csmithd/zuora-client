# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.submit_link_query_request_output import SubmitLinkQueryRequestOutput  # noqa: F401,E501


class SubmitLinkQueryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compression': 'str',
        'encryption_key': 'str',
        'output': 'SubmitLinkQueryRequestOutput',
        'output_format': 'str',
        'query': 'str',
        'query_type': 'str'
    }

    attribute_map = {
        'compression': 'compression',
        'encryption_key': 'encryptionKey',
        'output': 'output',
        'output_format': 'outputFormat',
        'query': 'query',
        'query_type': 'queryType'
    }

    def __init__(self, compression=None, encryption_key=None, output=None, output_format=None, query=None, query_type='SQL'):  # noqa: E501
        """SubmitLinkQueryRequest - a model defined in Swagger"""  # noqa: E501

        self._compression = None
        self._encryption_key = None
        self._output = None
        self._output_format = None
        self._query = None
        self._query_type = None
        self.discriminator = None

        self.compression = compression
        if encryption_key is not None:
            self.encryption_key = encryption_key
        self.output = output
        self.output_format = output_format
        self.query = query
        if query_type is not None:
            self.query_type = query_type

    @property
    def compression(self):
        """Gets the compression of this SubmitLinkQueryRequest.  # noqa: E501

        Specifies whether Zuora compresses the query results.   # noqa: E501

        :return: The compression of this SubmitLinkQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this SubmitLinkQueryRequest.

        Specifies whether Zuora compresses the query results.   # noqa: E501

        :param compression: The compression of this SubmitLinkQueryRequest.  # noqa: E501
        :type: str
        """
        if compression is None:
            raise ValueError("Invalid value for `compression`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "GZIP", "ZIP"]  # noqa: E501
        if compression not in allowed_values:
            raise ValueError(
                "Invalid value for `compression` ({0}), must be one of {1}"  # noqa: E501
                .format(compression, allowed_values)
            )

        self._compression = compression

    @property
    def encryption_key(self):
        """Gets the encryption_key of this SubmitLinkQueryRequest.  # noqa: E501

        Base-64 encoded public key of an RSA key-pair.  If you set this field, Zuora encrypts the query results using the provided public key. You must use the corresponding private key to decrypt the query results.   # noqa: E501

        :return: The encryption_key of this SubmitLinkQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this SubmitLinkQueryRequest.

        Base-64 encoded public key of an RSA key-pair.  If you set this field, Zuora encrypts the query results using the provided public key. You must use the corresponding private key to decrypt the query results.   # noqa: E501

        :param encryption_key: The encryption_key of this SubmitLinkQueryRequest.  # noqa: E501
        :type: str
        """
        if encryption_key is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', encryption_key):  # noqa: E501
            raise ValueError(r"Invalid value for `encryption_key`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._encryption_key = encryption_key

    @property
    def output(self):
        """Gets the output of this SubmitLinkQueryRequest.  # noqa: E501


        :return: The output of this SubmitLinkQueryRequest.  # noqa: E501
        :rtype: SubmitLinkQueryRequestOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this SubmitLinkQueryRequest.


        :param output: The output of this SubmitLinkQueryRequest.  # noqa: E501
        :type: SubmitLinkQueryRequestOutput
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")  # noqa: E501

        self._output = output

    @property
    def output_format(self):
        """Gets the output_format of this SubmitLinkQueryRequest.  # noqa: E501

        Specifies the format of the query results.  * `JSON` - Each row in the query results will be a JSON object. The query results will not be wrapped in a JSON array. * `CSV` - Each row in the query results will be a comma-separated list of values.   # noqa: E501

        :return: The output_format of this SubmitLinkQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this SubmitLinkQueryRequest.

        Specifies the format of the query results.  * `JSON` - Each row in the query results will be a JSON object. The query results will not be wrapped in a JSON array. * `CSV` - Each row in the query results will be a comma-separated list of values.   # noqa: E501

        :param output_format: The output_format of this SubmitLinkQueryRequest.  # noqa: E501
        :type: str
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")  # noqa: E501
        allowed_values = ["JSON", "CSV"]  # noqa: E501
        if output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_format` ({0}), must be one of {1}"  # noqa: E501
                .format(output_format, allowed_values)
            )

        self._output_format = output_format

    @property
    def query(self):
        """Gets the query of this SubmitLinkQueryRequest.  # noqa: E501

        The query to perform. See [SQL Queries in Zuora Link](https://knowledgecenter.zuora.com/DC_Developers/BA_Zuora_Link/BA_SQL_Queries_in_Zuora_Link) for more information.  In addition to SQL queries, Zuora Link supports [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/BB_Export_ZOQL) queries. To perform an Export ZOQL query, set the `queryType` field to `ZOQL`.   # noqa: E501

        :return: The query of this SubmitLinkQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SubmitLinkQueryRequest.

        The query to perform. See [SQL Queries in Zuora Link](https://knowledgecenter.zuora.com/DC_Developers/BA_Zuora_Link/BA_SQL_Queries_in_Zuora_Link) for more information.  In addition to SQL queries, Zuora Link supports [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/BB_Export_ZOQL) queries. To perform an Export ZOQL query, set the `queryType` field to `ZOQL`.   # noqa: E501

        :param query: The query of this SubmitLinkQueryRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def query_type(self):
        """Gets the query_type of this SubmitLinkQueryRequest.  # noqa: E501

        Specifies the format of the query.  * `SQL` - The query is a SQL query. See [SQL Queries in Zuora Link](https://knowledgecenter.zuora.com/DC_Developers/BA_Zuora_Link/BA_SQL_Queries_in_Zuora_Link) for more information. * `ZOQL` - The query is an Export ZOQL query. See [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/BB_Export_ZOQL) for more information.   # noqa: E501

        :return: The query_type of this SubmitLinkQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this SubmitLinkQueryRequest.

        Specifies the format of the query.  * `SQL` - The query is a SQL query. See [SQL Queries in Zuora Link](https://knowledgecenter.zuora.com/DC_Developers/BA_Zuora_Link/BA_SQL_Queries_in_Zuora_Link) for more information. * `ZOQL` - The query is an Export ZOQL query. See [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/BB_Export_ZOQL) for more information.   # noqa: E501

        :param query_type: The query_type of this SubmitLinkQueryRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SQL", "ZOQL"]  # noqa: E501
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"  # noqa: E501
                .format(query_type, allowed_values)
            )

        self._query_type = query_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmitLinkQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmitLinkQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
