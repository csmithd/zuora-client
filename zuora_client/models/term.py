# coding: utf-8




import pprint
import re  # noqa: F401

import six


class Term(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'date',
        'is_evergreen': 'bool',
        'start_date': 'date',
        'term_number': 'float'
    }

    attribute_map = {
        'end_date': 'endDate',
        'is_evergreen': 'isEvergreen',
        'start_date': 'startDate',
        'term_number': 'termNumber'
    }

    def __init__(self, end_date=None, is_evergreen=None, start_date=None, term_number=None):  # noqa: E501
        """Term - a model defined in Swagger"""  # noqa: E501

        self._end_date = None
        self._is_evergreen = None
        self._start_date = None
        self._term_number = None
        self.discriminator = None

        if end_date is not None:
            self.end_date = end_date
        if is_evergreen is not None:
            self.is_evergreen = is_evergreen
        if start_date is not None:
            self.start_date = start_date
        if term_number is not None:
            self.term_number = term_number

    @property
    def end_date(self):
        """Gets the end_date of this Term.  # noqa: E501

        The end date of the term.   # noqa: E501

        :return: The end_date of this Term.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Term.

        The end date of the term.   # noqa: E501

        :param end_date: The end_date of this Term.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def is_evergreen(self):
        """Gets the is_evergreen of this Term.  # noqa: E501

        Indicates whether the term is evergreen.   # noqa: E501

        :return: The is_evergreen of this Term.  # noqa: E501
        :rtype: bool
        """
        return self._is_evergreen

    @is_evergreen.setter
    def is_evergreen(self, is_evergreen):
        """Sets the is_evergreen of this Term.

        Indicates whether the term is evergreen.   # noqa: E501

        :param is_evergreen: The is_evergreen of this Term.  # noqa: E501
        :type: bool
        """

        self._is_evergreen = is_evergreen

    @property
    def start_date(self):
        """Gets the start_date of this Term.  # noqa: E501

        The start date of the term.   # noqa: E501

        :return: The start_date of this Term.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Term.

        The start date of the term.   # noqa: E501

        :param start_date: The start_date of this Term.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def term_number(self):
        """Gets the term_number of this Term.  # noqa: E501

        The term number.   # noqa: E501

        :return: The term_number of this Term.  # noqa: E501
        :rtype: float
        """
        return self._term_number

    @term_number.setter
    def term_number(self, term_number):
        """Sets the term_number of this Term.

        The term number.   # noqa: E501

        :param term_number: The term_number of this Term.  # noqa: E501
        :type: float
        """

        self._term_number = term_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Term, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Term):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
