# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.usage_object_custom_fields import UsageObjectCustomFields  # noqa: F401,E501


class GETUsageType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'account_number': 'str',
        'charge_number': 'str',
        'id': 'str',
        'quantity': 'str',
        'source_name': 'str',
        'start_date_time': 'datetime',
        'status': 'str',
        'submission_date_time': 'datetime',
        'subscription_number': 'str',
        'unit_of_measure': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_name': 'accountName',
        'account_number': 'accountNumber',
        'charge_number': 'chargeNumber',
        'id': 'id',
        'quantity': 'quantity',
        'source_name': 'sourceName',
        'start_date_time': 'startDateTime',
        'status': 'status',
        'submission_date_time': 'submissionDateTime',
        'subscription_number': 'subscriptionNumber',
        'unit_of_measure': 'unitOfMeasure'
    }

    def __init__(self, account_id=None, account_name=None, account_number=None, charge_number=None, id=None, quantity=None, source_name=None, start_date_time=None, status=None, submission_date_time=None, subscription_number=None, unit_of_measure=None):  # noqa: E501
        """GETUsageType - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._account_name = None
        self._account_number = None
        self._charge_number = None
        self._id = None
        self._quantity = None
        self._source_name = None
        self._start_date_time = None
        self._status = None
        self._submission_date_time = None
        self._subscription_number = None
        self._unit_of_measure = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if account_number is not None:
            self.account_number = account_number
        if charge_number is not None:
            self.charge_number = charge_number
        if id is not None:
            self.id = id
        if quantity is not None:
            self.quantity = quantity
        if source_name is not None:
            self.source_name = source_name
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if status is not None:
            self.status = status
        if submission_date_time is not None:
            self.submission_date_time = submission_date_time
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure

    @property
    def account_id(self):
        """Gets the account_id of this GETUsageType.  # noqa: E501

        Customer account ID.   # noqa: E501

        :return: The account_id of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GETUsageType.

        Customer account ID.   # noqa: E501

        :param account_id: The account_id of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this GETUsageType.  # noqa: E501

        Customer account name.   # noqa: E501

        :return: The account_name of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this GETUsageType.

        Customer account name.   # noqa: E501

        :param account_name: The account_name of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this GETUsageType.  # noqa: E501

        Customer account number.   # noqa: E501

        :return: The account_number of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GETUsageType.

        Customer account number.   # noqa: E501

        :param account_number: The account_number of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def charge_number(self):
        """Gets the charge_number of this GETUsageType.  # noqa: E501

        Number of the rate-plan charge that pays for this usage.   # noqa: E501

        :return: The charge_number of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this GETUsageType.

        Number of the rate-plan charge that pays for this usage.   # noqa: E501

        :param charge_number: The charge_number of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def id(self):
        """Gets the id of this GETUsageType.  # noqa: E501

        Unique ID for the usage item.   # noqa: E501

        :return: The id of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETUsageType.

        Unique ID for the usage item.   # noqa: E501

        :param id: The id of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this GETUsageType.  # noqa: E501

        Number of units used.   # noqa: E501

        :return: The quantity of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GETUsageType.

        Number of units used.   # noqa: E501

        :param quantity: The quantity of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def source_name(self):
        """Gets the source_name of this GETUsageType.  # noqa: E501

        Source of the usage data. Possible values are: `Import`, `API`.   # noqa: E501

        :return: The source_name of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this GETUsageType.

        Source of the usage data. Possible values are: `Import`, `API`.   # noqa: E501

        :param source_name: The source_name of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def start_date_time(self):
        """Gets the start_date_time of this GETUsageType.  # noqa: E501

        Start date of the time period in which usage is tracked. Zuora uses this field value to determine the usage date.   # noqa: E501

        :return: The start_date_time of this GETUsageType.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this GETUsageType.

        Start date of the time period in which usage is tracked. Zuora uses this field value to determine the usage date.   # noqa: E501

        :param start_date_time: The start_date_time of this GETUsageType.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def status(self):
        """Gets the status of this GETUsageType.  # noqa: E501

        Possible values are: `Importing`, `Pending`, `Processed`.   # noqa: E501

        :return: The status of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETUsageType.

        Possible values are: `Importing`, `Pending`, `Processed`.   # noqa: E501

        :param status: The status of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def submission_date_time(self):
        """Gets the submission_date_time of this GETUsageType.  # noqa: E501

        Date when usage was submitted.   # noqa: E501

        :return: The submission_date_time of this GETUsageType.  # noqa: E501
        :rtype: datetime
        """
        return self._submission_date_time

    @submission_date_time.setter
    def submission_date_time(self, submission_date_time):
        """Sets the submission_date_time of this GETUsageType.

        Date when usage was submitted.   # noqa: E501

        :param submission_date_time: The submission_date_time of this GETUsageType.  # noqa: E501
        :type: datetime
        """

        self._submission_date_time = submission_date_time

    @property
    def subscription_number(self):
        """Gets the subscription_number of this GETUsageType.  # noqa: E501

        Number of the subscription covering this usage.   # noqa: E501

        :return: The subscription_number of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this GETUsageType.

        Number of the subscription covering this usage.   # noqa: E501

        :param subscription_number: The subscription_number of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this GETUsageType.  # noqa: E501

        Unit used to measure consumption.   # noqa: E501

        :return: The unit_of_measure of this GETUsageType.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this GETUsageType.

        Unit used to measure consumption.   # noqa: E501

        :param unit_of_measure: The unit_of_measure of this GETUsageType.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETUsageType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETUsageType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
