# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.get_subscription_product_feature_type import GETSubscriptionProductFeatureType  # noqa: F401,E501
from zuora_client.models.get_subscription_rate_plan_charges_type import GETSubscriptionRatePlanChargesType  # noqa: F401,E501
from zuora_client.models.rate_plan_object_custom_fields import RatePlanObjectCustomFields  # noqa: F401,E501


class GETSubscriptionRatePlanType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'last_change_type': 'str',
        'product_id': 'str',
        'product_name': 'str',
        'product_rate_plan_id': 'str',
        'product_sku': 'str',
        'rate_plan_charges': 'list[GETSubscriptionRatePlanChargesType]',
        'rate_plan_name': 'str',
        'subscription_product_features': 'list[GETSubscriptionProductFeatureType]'
    }

    attribute_map = {
        'id': 'id',
        'last_change_type': 'lastChangeType',
        'product_id': 'productId',
        'product_name': 'productName',
        'product_rate_plan_id': 'productRatePlanId',
        'product_sku': 'productSku',
        'rate_plan_charges': 'ratePlanCharges',
        'rate_plan_name': 'ratePlanName',
        'subscription_product_features': 'subscriptionProductFeatures'
    }

    def __init__(self, id=None, last_change_type=None, product_id=None, product_name=None, product_rate_plan_id=None, product_sku=None, rate_plan_charges=None, rate_plan_name=None, subscription_product_features=None):  # noqa: E501
        """GETSubscriptionRatePlanType - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._last_change_type = None
        self._product_id = None
        self._product_name = None
        self._product_rate_plan_id = None
        self._product_sku = None
        self._rate_plan_charges = None
        self._rate_plan_name = None
        self._subscription_product_features = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if last_change_type is not None:
            self.last_change_type = last_change_type
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if product_sku is not None:
            self.product_sku = product_sku
        if rate_plan_charges is not None:
            self.rate_plan_charges = rate_plan_charges
        if rate_plan_name is not None:
            self.rate_plan_name = rate_plan_name
        if subscription_product_features is not None:
            self.subscription_product_features = subscription_product_features

    @property
    def id(self):
        """Gets the id of this GETSubscriptionRatePlanType.  # noqa: E501

        Rate plan ID.   # noqa: E501

        :return: The id of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETSubscriptionRatePlanType.

        Rate plan ID.   # noqa: E501

        :param id: The id of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_change_type(self):
        """Gets the last_change_type of this GETSubscriptionRatePlanType.  # noqa: E501

        The last amendment on the rate plan.  Possible Values:  * `Add` * `Update` * `Remove`   # noqa: E501

        :return: The last_change_type of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._last_change_type

    @last_change_type.setter
    def last_change_type(self, last_change_type):
        """Sets the last_change_type of this GETSubscriptionRatePlanType.

        The last amendment on the rate plan.  Possible Values:  * `Add` * `Update` * `Remove`   # noqa: E501

        :param last_change_type: The last_change_type of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._last_change_type = last_change_type

    @property
    def product_id(self):
        """Gets the product_id of this GETSubscriptionRatePlanType.  # noqa: E501

          # noqa: E501

        :return: The product_id of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GETSubscriptionRatePlanType.

          # noqa: E501

        :param product_id: The product_id of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this GETSubscriptionRatePlanType.  # noqa: E501

          # noqa: E501

        :return: The product_name of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GETSubscriptionRatePlanType.

          # noqa: E501

        :param product_name: The product_name of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this GETSubscriptionRatePlanType.  # noqa: E501

          # noqa: E501

        :return: The product_rate_plan_id of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this GETSubscriptionRatePlanType.

          # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_sku(self):
        """Gets the product_sku of this GETSubscriptionRatePlanType.  # noqa: E501

        The unique SKU for the product.   # noqa: E501

        :return: The product_sku of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this GETSubscriptionRatePlanType.

        The unique SKU for the product.   # noqa: E501

        :param product_sku: The product_sku of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._product_sku = product_sku

    @property
    def rate_plan_charges(self):
        """Gets the rate_plan_charges of this GETSubscriptionRatePlanType.  # noqa: E501

        Container for one or more charges.   # noqa: E501

        :return: The rate_plan_charges of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: list[GETSubscriptionRatePlanChargesType]
        """
        return self._rate_plan_charges

    @rate_plan_charges.setter
    def rate_plan_charges(self, rate_plan_charges):
        """Sets the rate_plan_charges of this GETSubscriptionRatePlanType.

        Container for one or more charges.   # noqa: E501

        :param rate_plan_charges: The rate_plan_charges of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: list[GETSubscriptionRatePlanChargesType]
        """

        self._rate_plan_charges = rate_plan_charges

    @property
    def rate_plan_name(self):
        """Gets the rate_plan_name of this GETSubscriptionRatePlanType.  # noqa: E501

        Name of the rate plan.   # noqa: E501

        :return: The rate_plan_name of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_name

    @rate_plan_name.setter
    def rate_plan_name(self, rate_plan_name):
        """Sets the rate_plan_name of this GETSubscriptionRatePlanType.

        Name of the rate plan.   # noqa: E501

        :param rate_plan_name: The rate_plan_name of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: str
        """

        self._rate_plan_name = rate_plan_name

    @property
    def subscription_product_features(self):
        """Gets the subscription_product_features of this GETSubscriptionRatePlanType.  # noqa: E501

        Container for one or more features.   Only available when the following settings are enabled:  * The Entitlements feature in your tenant.  * The Enable Feature Specification in Product and Subscriptions setting in Zuora Billing Settings  # noqa: E501

        :return: The subscription_product_features of this GETSubscriptionRatePlanType.  # noqa: E501
        :rtype: list[GETSubscriptionProductFeatureType]
        """
        return self._subscription_product_features

    @subscription_product_features.setter
    def subscription_product_features(self, subscription_product_features):
        """Sets the subscription_product_features of this GETSubscriptionRatePlanType.

        Container for one or more features.   Only available when the following settings are enabled:  * The Entitlements feature in your tenant.  * The Enable Feature Specification in Product and Subscriptions setting in Zuora Billing Settings  # noqa: E501

        :param subscription_product_features: The subscription_product_features of this GETSubscriptionRatePlanType.  # noqa: E501
        :type: list[GETSubscriptionProductFeatureType]
        """

        self._subscription_product_features = subscription_product_features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETSubscriptionRatePlanType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETSubscriptionRatePlanType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
