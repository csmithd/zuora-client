# coding: utf-8




import pprint
import re  # noqa: F401

import six


class ProxyCreateBillRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'auto_email': 'bool',
        'auto_post': 'bool',
        'auto_renewal': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'str',
        'charge_type_to_exclude': 'str',
        'invoice_date': 'date',
        'no_email_for_zero_amount_invoice': 'bool',
        'target_date': 'date'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'auto_email': 'AutoEmail',
        'auto_post': 'AutoPost',
        'auto_renewal': 'AutoRenewal',
        'batch': 'Batch',
        'bill_cycle_day': 'BillCycleDay',
        'charge_type_to_exclude': 'ChargeTypeToExclude',
        'invoice_date': 'InvoiceDate',
        'no_email_for_zero_amount_invoice': 'NoEmailForZeroAmountInvoice',
        'target_date': 'TargetDate'
    }

    def __init__(self, account_id=None, auto_email=False, auto_post=False, auto_renewal=False, batch=None, bill_cycle_day=None, charge_type_to_exclude=None, invoice_date=None, no_email_for_zero_amount_invoice=False, target_date=None):  # noqa: E501
        """ProxyCreateBillRun - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._auto_email = None
        self._auto_post = None
        self._auto_renewal = None
        self._batch = None
        self._bill_cycle_day = None
        self._charge_type_to_exclude = None
        self._invoice_date = None
        self._no_email_for_zero_amount_invoice = None
        self._target_date = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if auto_email is not None:
            self.auto_email = auto_email
        if auto_post is not None:
            self.auto_post = auto_post
        if auto_renewal is not None:
            self.auto_renewal = auto_renewal
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if charge_type_to_exclude is not None:
            self.charge_type_to_exclude = charge_type_to_exclude
        self.invoice_date = invoice_date
        if no_email_for_zero_amount_invoice is not None:
            self.no_email_for_zero_amount_invoice = no_email_for_zero_amount_invoice
        self.target_date = target_date

    @property
    def account_id(self):
        """Gets the account_id of this ProxyCreateBillRun.  # noqa: E501

        ID of the account used for single account bill run.  This field is only required if you create ad hoc bill run for a single customer account.  **Character limit:** 32   # noqa: E501

        :return: The account_id of this ProxyCreateBillRun.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyCreateBillRun.

        ID of the account used for single account bill run.  This field is only required if you create ad hoc bill run for a single customer account.  **Character limit:** 32   # noqa: E501

        :param account_id: The account_id of this ProxyCreateBillRun.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def auto_email(self):
        """Gets the auto_email of this ProxyCreateBillRun.  # noqa: E501

        Determines whether to auto send email or not by this bill run once the bill run completes.  **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.   # noqa: E501

        :return: The auto_email of this ProxyCreateBillRun.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email

    @auto_email.setter
    def auto_email(self, auto_email):
        """Sets the auto_email of this ProxyCreateBillRun.

        Determines whether to auto send email or not by this bill run once the bill run completes.  **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.   # noqa: E501

        :param auto_email: The auto_email of this ProxyCreateBillRun.  # noqa: E501
        :type: bool
        """

        self._auto_email = auto_email

    @property
    def auto_post(self):
        """Gets the auto_post of this ProxyCreateBillRun.  # noqa: E501

        Determines whether to auto post bill run or not once the bill run completes.  **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.   # noqa: E501

        :return: The auto_post of this ProxyCreateBillRun.  # noqa: E501
        :rtype: bool
        """
        return self._auto_post

    @auto_post.setter
    def auto_post(self, auto_post):
        """Sets the auto_post of this ProxyCreateBillRun.

        Determines whether to auto post bill run or not once the bill run completes.  **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.   # noqa: E501

        :param auto_post: The auto_post of this ProxyCreateBillRun.  # noqa: E501
        :type: bool
        """

        self._auto_post = auto_post

    @property
    def auto_renewal(self):
        """Gets the auto_renewal of this ProxyCreateBillRun.  # noqa: E501

        Determines whether to auto renew subscription or not by this bill run once the bill run completes.   # noqa: E501

        :return: The auto_renewal of this ProxyCreateBillRun.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renewal

    @auto_renewal.setter
    def auto_renewal(self, auto_renewal):
        """Sets the auto_renewal of this ProxyCreateBillRun.

        Determines whether to auto renew subscription or not by this bill run once the bill run completes.   # noqa: E501

        :param auto_renewal: The auto_renewal of this ProxyCreateBillRun.  # noqa: E501
        :type: bool
        """

        self._auto_renewal = auto_renewal

    @property
    def batch(self):
        """Gets the batch of this ProxyCreateBillRun.  # noqa: E501

        Batch of accounts for this bill run.   When creating ad hoc bill run for multiple customer accounts, this field is only required if the `BillCycleDay`  field is not specified.  **Character limit:** 20  **Values:** AllBatches or Batchn where n is a number between 1 and 50.   # noqa: E501

        :return: The batch of this ProxyCreateBillRun.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this ProxyCreateBillRun.

        Batch of accounts for this bill run.   When creating ad hoc bill run for multiple customer accounts, this field is only required if the `BillCycleDay`  field is not specified.  **Character limit:** 20  **Values:** AllBatches or Batchn where n is a number between 1 and 50.   # noqa: E501

        :param batch: The batch of this ProxyCreateBillRun.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this ProxyCreateBillRun.  # noqa: E501

        The day of the bill cycle.  When creating ad hoc bill run for multiple customer accounts, this field is only required if the `Batch` field is not specified.  **Character limit:** 32  **Values:** `AllBillCycleDays` or 01 - 31.   # noqa: E501

        :return: The bill_cycle_day of this ProxyCreateBillRun.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this ProxyCreateBillRun.

        The day of the bill cycle.  When creating ad hoc bill run for multiple customer accounts, this field is only required if the `Batch` field is not specified.  **Character limit:** 32  **Values:** `AllBillCycleDays` or 01 - 31.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this ProxyCreateBillRun.  # noqa: E501
        :type: str
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def charge_type_to_exclude(self):
        """Gets the charge_type_to_exclude of this ProxyCreateBillRun.  # noqa: E501

        Charge type or types to be excluded, separated with comma.  **Possible Values:** `OneTime`, `Recurring`, `Usage`, or a combination of these values.   **Character limit:** 50   # noqa: E501

        :return: The charge_type_to_exclude of this ProxyCreateBillRun.  # noqa: E501
        :rtype: str
        """
        return self._charge_type_to_exclude

    @charge_type_to_exclude.setter
    def charge_type_to_exclude(self, charge_type_to_exclude):
        """Sets the charge_type_to_exclude of this ProxyCreateBillRun.

        Charge type or types to be excluded, separated with comma.  **Possible Values:** `OneTime`, `Recurring`, `Usage`, or a combination of these values.   **Character limit:** 50   # noqa: E501

        :param charge_type_to_exclude: The charge_type_to_exclude of this ProxyCreateBillRun.  # noqa: E501
        :type: str
        """

        self._charge_type_to_exclude = charge_type_to_exclude

    @property
    def invoice_date(self):
        """Gets the invoice_date of this ProxyCreateBillRun.  # noqa: E501

        Invoice date for this bill run.  **Character limit:** 29   # noqa: E501

        :return: The invoice_date of this ProxyCreateBillRun.  # noqa: E501
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this ProxyCreateBillRun.

        Invoice date for this bill run.  **Character limit:** 29   # noqa: E501

        :param invoice_date: The invoice_date of this ProxyCreateBillRun.  # noqa: E501
        :type: date
        """
        if invoice_date is None:
            raise ValueError("Invalid value for `invoice_date`, must not be `None`")  # noqa: E501

        self._invoice_date = invoice_date

    @property
    def no_email_for_zero_amount_invoice(self):
        """Gets the no_email_for_zero_amount_invoice of this ProxyCreateBillRun.  # noqa: E501

        Determines whether to suppress email for invoices with zero total or not for this bill run once the bill run completes. (Do not email invoices with 0 Invoice Total).   # noqa: E501

        :return: The no_email_for_zero_amount_invoice of this ProxyCreateBillRun.  # noqa: E501
        :rtype: bool
        """
        return self._no_email_for_zero_amount_invoice

    @no_email_for_zero_amount_invoice.setter
    def no_email_for_zero_amount_invoice(self, no_email_for_zero_amount_invoice):
        """Sets the no_email_for_zero_amount_invoice of this ProxyCreateBillRun.

        Determines whether to suppress email for invoices with zero total or not for this bill run once the bill run completes. (Do not email invoices with 0 Invoice Total).   # noqa: E501

        :param no_email_for_zero_amount_invoice: The no_email_for_zero_amount_invoice of this ProxyCreateBillRun.  # noqa: E501
        :type: bool
        """

        self._no_email_for_zero_amount_invoice = no_email_for_zero_amount_invoice

    @property
    def target_date(self):
        """Gets the target_date of this ProxyCreateBillRun.  # noqa: E501

        Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.  **Character limit:** 29   # noqa: E501

        :return: The target_date of this ProxyCreateBillRun.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this ProxyCreateBillRun.

        Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.  **Character limit:** 29   # noqa: E501

        :param target_date: The target_date of this ProxyCreateBillRun.  # noqa: E501
        :type: date
        """
        if target_date is None:
            raise ValueError("Invalid value for `target_date`, must not be `None`")  # noqa: E501

        self._target_date = target_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCreateBillRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCreateBillRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
