# coding: utf-8




import pprint
import re  # noqa: F401

import six


class GETAccountTypeMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'str',
        'contracted_mrr': 'str',
        'credit_balance': 'str',
        'total_invoice_balance': 'str'
    }

    attribute_map = {
        'balance': 'balance',
        'contracted_mrr': 'contractedMrr',
        'credit_balance': 'creditBalance',
        'total_invoice_balance': 'totalInvoiceBalance'
    }

    def __init__(self, balance=None, contracted_mrr=None, credit_balance=None, total_invoice_balance=None):  # noqa: E501
        """GETAccountTypeMetrics - a model defined in Swagger"""  # noqa: E501

        self._balance = None
        self._contracted_mrr = None
        self._credit_balance = None
        self._total_invoice_balance = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if contracted_mrr is not None:
            self.contracted_mrr = contracted_mrr
        if credit_balance is not None:
            self.credit_balance = credit_balance
        if total_invoice_balance is not None:
            self.total_invoice_balance = total_invoice_balance

    @property
    def balance(self):
        """Gets the balance of this GETAccountTypeMetrics.  # noqa: E501

        The customer's total invoice balance minus credit balance.   # noqa: E501

        :return: The balance of this GETAccountTypeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GETAccountTypeMetrics.

        The customer's total invoice balance minus credit balance.   # noqa: E501

        :param balance: The balance of this GETAccountTypeMetrics.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def contracted_mrr(self):
        """Gets the contracted_mrr of this GETAccountTypeMetrics.  # noqa: E501

        Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations.   # noqa: E501

        :return: The contracted_mrr of this GETAccountTypeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._contracted_mrr

    @contracted_mrr.setter
    def contracted_mrr(self, contracted_mrr):
        """Sets the contracted_mrr of this GETAccountTypeMetrics.

        Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations.   # noqa: E501

        :param contracted_mrr: The contracted_mrr of this GETAccountTypeMetrics.  # noqa: E501
        :type: str
        """

        self._contracted_mrr = contracted_mrr

    @property
    def credit_balance(self):
        """Gets the credit_balance of this GETAccountTypeMetrics.  # noqa: E501

        Current credit balance.   # noqa: E501

        :return: The credit_balance of this GETAccountTypeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._credit_balance

    @credit_balance.setter
    def credit_balance(self, credit_balance):
        """Sets the credit_balance of this GETAccountTypeMetrics.

        Current credit balance.   # noqa: E501

        :param credit_balance: The credit_balance of this GETAccountTypeMetrics.  # noqa: E501
        :type: str
        """

        self._credit_balance = credit_balance

    @property
    def total_invoice_balance(self):
        """Gets the total_invoice_balance of this GETAccountTypeMetrics.  # noqa: E501

        Total of all open invoices.   # noqa: E501

        :return: The total_invoice_balance of this GETAccountTypeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._total_invoice_balance

    @total_invoice_balance.setter
    def total_invoice_balance(self, total_invoice_balance):
        """Sets the total_invoice_balance of this GETAccountTypeMetrics.

        Total of all open invoices.   # noqa: E501

        :param total_invoice_balance: The total_invoice_balance of this GETAccountTypeMetrics.  # noqa: E501
        :type: str
        """

        self._total_invoice_balance = total_invoice_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETAccountTypeMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETAccountTypeMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
