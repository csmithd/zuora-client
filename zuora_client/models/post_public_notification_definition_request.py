# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.filter_rule_parameter_values import FilterRuleParameterValues  # noqa: F401,E501
from zuora_client.models.post_public_notification_definition_request_callout import POSTPublicNotificationDefinitionRequestCallout  # noqa: F401,E501
from zuora_client.models.post_public_notification_definition_request_filter_rule import POSTPublicNotificationDefinitionRequestFilterRule  # noqa: F401,E501


class POSTPublicNotificationDefinitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'callout': 'POSTPublicNotificationDefinitionRequestCallout',
        'callout_active': 'bool',
        'communication_profile_id': 'str',
        'description': 'str',
        'email_active': 'bool',
        'email_template_id': 'str',
        'event_type_name': 'str',
        'event_type_namespace': 'str',
        'filter_rule': 'POSTPublicNotificationDefinitionRequestFilterRule',
        'filter_rule_params': 'FilterRuleParameterValues',
        'name': 'str'
    }

    attribute_map = {
        'active': 'active',
        'callout': 'callout',
        'callout_active': 'calloutActive',
        'communication_profile_id': 'communicationProfileId',
        'description': 'description',
        'email_active': 'emailActive',
        'email_template_id': 'emailTemplateId',
        'event_type_name': 'eventTypeName',
        'event_type_namespace': 'eventTypeNamespace',
        'filter_rule': 'filterRule',
        'filter_rule_params': 'filterRuleParams',
        'name': 'name'
    }

    def __init__(self, active=True, callout=None, callout_active=False, communication_profile_id=None, description=None, email_active=False, email_template_id=None, event_type_name=None, event_type_namespace=None, filter_rule=None, filter_rule_params=None, name=None):  # noqa: E501
        """POSTPublicNotificationDefinitionRequest - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._callout = None
        self._callout_active = None
        self._communication_profile_id = None
        self._description = None
        self._email_active = None
        self._email_template_id = None
        self._event_type_name = None
        self._event_type_namespace = None
        self._filter_rule = None
        self._filter_rule_params = None
        self._name = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if callout is not None:
            self.callout = callout
        if callout_active is not None:
            self.callout_active = callout_active
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if description is not None:
            self.description = description
        if email_active is not None:
            self.email_active = email_active
        if email_template_id is not None:
            self.email_template_id = email_template_id
        self.event_type_name = event_type_name
        if event_type_namespace is not None:
            self.event_type_namespace = event_type_namespace
        if filter_rule is not None:
            self.filter_rule = filter_rule
        if filter_rule_params is not None:
            self.filter_rule_params = filter_rule_params
        self.name = name

    @property
    def active(self):
        """Gets the active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The status of the notification definition. The default value is true.  # noqa: E501

        :return: The active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this POSTPublicNotificationDefinitionRequest.

        The status of the notification definition. The default value is true.  # noqa: E501

        :param active: The active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def callout(self):
        """Gets the callout of this POSTPublicNotificationDefinitionRequest.  # noqa: E501


        :return: The callout of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: POSTPublicNotificationDefinitionRequestCallout
        """
        return self._callout

    @callout.setter
    def callout(self, callout):
        """Sets the callout of this POSTPublicNotificationDefinitionRequest.


        :param callout: The callout of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: POSTPublicNotificationDefinitionRequestCallout
        """

        self._callout = callout

    @property
    def callout_active(self):
        """Gets the callout_active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The status of the callout action. Default value is false.  # noqa: E501

        :return: The callout_active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._callout_active

    @callout_active.setter
    def callout_active(self, callout_active):
        """Sets the callout_active of this POSTPublicNotificationDefinitionRequest.

        The status of the callout action. Default value is false.  # noqa: E501

        :param callout_active: The callout_active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._callout_active = callout_active

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The profile that notification definition belongs to. If you do not pass the communicationProfileId, notification service will be automatically added to the 'Default Profile'.  # noqa: E501

        :return: The communication_profile_id of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this POSTPublicNotificationDefinitionRequest.

        The profile that notification definition belongs to. If you do not pass the communicationProfileId, notification service will be automatically added to the 'Default Profile'.  # noqa: E501

        :param communication_profile_id: The communication_profile_id of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def description(self):
        """Gets the description of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The description of the notification definition.  # noqa: E501

        :return: The description of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this POSTPublicNotificationDefinitionRequest.

        The description of the notification definition.  # noqa: E501

        :param description: The description of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def email_active(self):
        """Gets the email_active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The status of the email action. The default value is false.  # noqa: E501

        :return: The email_active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_active

    @email_active.setter
    def email_active(self, email_active):
        """Sets the email_active of this POSTPublicNotificationDefinitionRequest.

        The status of the email action. The default value is false.  # noqa: E501

        :param email_active: The email_active of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._email_active = email_active

    @property
    def email_template_id(self):
        """Gets the email_template_id of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The ID of the email template. If emailActive is true, an email template is required. And EventType of the email template MUST be the same as the eventType.  # noqa: E501

        :return: The email_template_id of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_template_id

    @email_template_id.setter
    def email_template_id(self, email_template_id):
        """Sets the email_template_id of this POSTPublicNotificationDefinitionRequest.

        The ID of the email template. If emailActive is true, an email template is required. And EventType of the email template MUST be the same as the eventType.  # noqa: E501

        :param email_template_id: The email_template_id of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._email_template_id = email_template_id

    @property
    def event_type_name(self):
        """Gets the event_type_name of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The name of the event type.    # noqa: E501

        :return: The event_type_name of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this POSTPublicNotificationDefinitionRequest.

        The name of the event type.    # noqa: E501

        :param event_type_name: The event_type_name of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")  # noqa: E501
        if event_type_name is not None and len(event_type_name) < 1:
            raise ValueError("Invalid value for `event_type_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._event_type_name = event_type_name

    @property
    def event_type_namespace(self):
        """Gets the event_type_namespace of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.   Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.  For example, if you want to create a notification definition on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.   # noqa: E501

        :return: The event_type_namespace of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_type_namespace

    @event_type_namespace.setter
    def event_type_namespace(self, event_type_namespace):
        """Sets the event_type_namespace of this POSTPublicNotificationDefinitionRequest.

        The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.   Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.  For example, if you want to create a notification definition on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.   # noqa: E501

        :param event_type_namespace: The event_type_namespace of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._event_type_namespace = event_type_namespace

    @property
    def filter_rule(self):
        """Gets the filter_rule of this POSTPublicNotificationDefinitionRequest.  # noqa: E501


        :return: The filter_rule of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: POSTPublicNotificationDefinitionRequestFilterRule
        """
        return self._filter_rule

    @filter_rule.setter
    def filter_rule(self, filter_rule):
        """Sets the filter_rule of this POSTPublicNotificationDefinitionRequest.


        :param filter_rule: The filter_rule of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: POSTPublicNotificationDefinitionRequestFilterRule
        """

        self._filter_rule = filter_rule

    @property
    def filter_rule_params(self):
        """Gets the filter_rule_params of this POSTPublicNotificationDefinitionRequest.  # noqa: E501


        :return: The filter_rule_params of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: FilterRuleParameterValues
        """
        return self._filter_rule_params

    @filter_rule_params.setter
    def filter_rule_params(self, filter_rule_params):
        """Sets the filter_rule_params of this POSTPublicNotificationDefinitionRequest.


        :param filter_rule_params: The filter_rule_params of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: FilterRuleParameterValues
        """

        self._filter_rule_params = filter_rule_params

    @property
    def name(self):
        """Gets the name of this POSTPublicNotificationDefinitionRequest.  # noqa: E501

        The name of the notification definition, unique per communication profile.  # noqa: E501

        :return: The name of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this POSTPublicNotificationDefinitionRequest.

        The name of the notification definition, unique per communication profile.  # noqa: E501

        :param name: The name of this POSTPublicNotificationDefinitionRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTPublicNotificationDefinitionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTPublicNotificationDefinitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
