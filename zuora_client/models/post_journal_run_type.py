# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.post_journal_run_transaction_type import POSTJournalRunTransactionType  # noqa: F401,E501


class POSTJournalRunType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_period_name': 'str',
        'journal_entry_date': 'date',
        'target_end_date': 'date',
        'target_start_date': 'date',
        'transaction_types': 'list[POSTJournalRunTransactionType]'
    }

    attribute_map = {
        'accounting_period_name': 'accountingPeriodName',
        'journal_entry_date': 'journalEntryDate',
        'target_end_date': 'targetEndDate',
        'target_start_date': 'targetStartDate',
        'transaction_types': 'transactionTypes'
    }

    def __init__(self, accounting_period_name=None, journal_entry_date=None, target_end_date=None, target_start_date=None, transaction_types=None):  # noqa: E501
        """POSTJournalRunType - a model defined in Swagger"""  # noqa: E501

        self._accounting_period_name = None
        self._journal_entry_date = None
        self._target_end_date = None
        self._target_start_date = None
        self._transaction_types = None
        self.discriminator = None

        if accounting_period_name is not None:
            self.accounting_period_name = accounting_period_name
        self.journal_entry_date = journal_entry_date
        if target_end_date is not None:
            self.target_end_date = target_end_date
        if target_start_date is not None:
            self.target_start_date = target_start_date
        self.transaction_types = transaction_types

    @property
    def accounting_period_name(self):
        """Gets the accounting_period_name of this POSTJournalRunType.  # noqa: E501

        Name of the accounting period.  This field determines the target start and end dates of the journal run.  Required if you do not include `targetStartDate` and `targetEndDate`.   # noqa: E501

        :return: The accounting_period_name of this POSTJournalRunType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period_name

    @accounting_period_name.setter
    def accounting_period_name(self, accounting_period_name):
        """Sets the accounting_period_name of this POSTJournalRunType.

        Name of the accounting period.  This field determines the target start and end dates of the journal run.  Required if you do not include `targetStartDate` and `targetEndDate`.   # noqa: E501

        :param accounting_period_name: The accounting_period_name of this POSTJournalRunType.  # noqa: E501
        :type: str
        """

        self._accounting_period_name = accounting_period_name

    @property
    def journal_entry_date(self):
        """Gets the journal_entry_date of this POSTJournalRunType.  # noqa: E501

        Date of the journal entry.   # noqa: E501

        :return: The journal_entry_date of this POSTJournalRunType.  # noqa: E501
        :rtype: date
        """
        return self._journal_entry_date

    @journal_entry_date.setter
    def journal_entry_date(self, journal_entry_date):
        """Sets the journal_entry_date of this POSTJournalRunType.

        Date of the journal entry.   # noqa: E501

        :param journal_entry_date: The journal_entry_date of this POSTJournalRunType.  # noqa: E501
        :type: date
        """
        if journal_entry_date is None:
            raise ValueError("Invalid value for `journal_entry_date`, must not be `None`")  # noqa: E501

        self._journal_entry_date = journal_entry_date

    @property
    def target_end_date(self):
        """Gets the target_end_date of this POSTJournalRunType.  # noqa: E501

        The target end date of the journal run.  If you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`.   # noqa: E501

        :return: The target_end_date of this POSTJournalRunType.  # noqa: E501
        :rtype: date
        """
        return self._target_end_date

    @target_end_date.setter
    def target_end_date(self, target_end_date):
        """Sets the target_end_date of this POSTJournalRunType.

        The target end date of the journal run.  If you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`.   # noqa: E501

        :param target_end_date: The target_end_date of this POSTJournalRunType.  # noqa: E501
        :type: date
        """

        self._target_end_date = target_end_date

    @property
    def target_start_date(self):
        """Gets the target_start_date of this POSTJournalRunType.  # noqa: E501

        The target start date of the journal run.  Required if you include targetEndDate.  If you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`.   # noqa: E501

        :return: The target_start_date of this POSTJournalRunType.  # noqa: E501
        :rtype: date
        """
        return self._target_start_date

    @target_start_date.setter
    def target_start_date(self, target_start_date):
        """Sets the target_start_date of this POSTJournalRunType.

        The target start date of the journal run.  Required if you include targetEndDate.  If you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`.   # noqa: E501

        :param target_start_date: The target_start_date of this POSTJournalRunType.  # noqa: E501
        :type: date
        """

        self._target_start_date = target_start_date

    @property
    def transaction_types(self):
        """Gets the transaction_types of this POSTJournalRunType.  # noqa: E501

        Transaction types included in the journal run.  You can include one or more transaction types.   # noqa: E501

        :return: The transaction_types of this POSTJournalRunType.  # noqa: E501
        :rtype: list[POSTJournalRunTransactionType]
        """
        return self._transaction_types

    @transaction_types.setter
    def transaction_types(self, transaction_types):
        """Sets the transaction_types of this POSTJournalRunType.

        Transaction types included in the journal run.  You can include one or more transaction types.   # noqa: E501

        :param transaction_types: The transaction_types of this POSTJournalRunType.  # noqa: E501
        :type: list[POSTJournalRunTransactionType]
        """
        if transaction_types is None:
            raise ValueError("Invalid value for `transaction_types`, must not be `None`")  # noqa: E501

        self._transaction_types = transaction_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTJournalRunType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTJournalRunType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
