# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.rate_plan_charge_object_custom_fields import RatePlanChargeObjectCustomFields  # noqa: F401,E501


class RatePlanChargeDataRatePlanCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'apply_discount_to': 'str',
        'bill_cycle_day': 'int',
        'bill_cycle_type': 'str',
        'billing_period': 'str',
        'billing_period_alignment': 'str',
        'billing_timing': 'str',
        'charge_model': 'str',
        'charge_number': 'str',
        'charge_type': 'str',
        'charged_through_date': 'date',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'dmrc': 'float',
        'dtcv': 'float',
        'description': 'str',
        'discount_amount': 'float',
        'discount_level': 'str',
        'discount_percentage': 'float',
        'effective_end_date': 'date',
        'effective_start_date': 'date',
        'end_date_condition': 'str',
        'included_units': 'float',
        'is_last_segment': 'bool',
        'list_price_base': 'str',
        'mrr': 'float',
        'name': 'str',
        'number_of_periods': 'int',
        'original_id': 'str',
        'overage_calculation_option': 'str',
        'overage_price': 'float',
        'overage_unused_units_credit_option': 'str',
        'price': 'float',
        'price_change_option': 'str',
        'price_increase_percentage': 'float',
        'processed_through_date': 'date',
        'product_rate_plan_charge_id': 'str',
        'quantity': 'float',
        'rate_plan_id': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'str',
        'revenue_recognition_rule_name': 'str',
        'rollover_balance': 'float',
        'segment': 'int',
        'specific_billing_period': 'int',
        'specific_end_date': 'date',
        'tcv': 'float',
        'trigger_date': 'date',
        'trigger_event': 'str',
        'uom': 'str',
        'unused_units_credit_rates': 'float',
        'up_to_periods': 'int',
        'up_to_periods_type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime',
        'usage_record_rating_option': 'str',
        'use_discount_specific_accounting_code': 'bool',
        'version': 'int',
        'weekly_bill_cycle_day': 'str'
    }

    attribute_map = {
        'accounting_code': 'AccountingCode',
        'apply_discount_to': 'ApplyDiscountTo',
        'bill_cycle_day': 'BillCycleDay',
        'bill_cycle_type': 'BillCycleType',
        'billing_period': 'BillingPeriod',
        'billing_period_alignment': 'BillingPeriodAlignment',
        'billing_timing': 'BillingTiming',
        'charge_model': 'ChargeModel',
        'charge_number': 'ChargeNumber',
        'charge_type': 'ChargeType',
        'charged_through_date': 'ChargedThroughDate',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'dmrc': 'DMRC',
        'dtcv': 'DTCV',
        'description': 'Description',
        'discount_amount': 'DiscountAmount',
        'discount_level': 'DiscountLevel',
        'discount_percentage': 'DiscountPercentage',
        'effective_end_date': 'EffectiveEndDate',
        'effective_start_date': 'EffectiveStartDate',
        'end_date_condition': 'EndDateCondition',
        'included_units': 'IncludedUnits',
        'is_last_segment': 'IsLastSegment',
        'list_price_base': 'ListPriceBase',
        'mrr': 'MRR',
        'name': 'Name',
        'number_of_periods': 'NumberOfPeriods',
        'original_id': 'OriginalId',
        'overage_calculation_option': 'OverageCalculationOption',
        'overage_price': 'OveragePrice',
        'overage_unused_units_credit_option': 'OverageUnusedUnitsCreditOption',
        'price': 'Price',
        'price_change_option': 'PriceChangeOption',
        'price_increase_percentage': 'PriceIncreasePercentage',
        'processed_through_date': 'ProcessedThroughDate',
        'product_rate_plan_charge_id': 'ProductRatePlanChargeId',
        'quantity': 'Quantity',
        'rate_plan_id': 'RatePlanId',
        'rev_rec_code': 'RevRecCode',
        'rev_rec_trigger_condition': 'RevRecTriggerCondition',
        'revenue_recognition_rule_name': 'RevenueRecognitionRuleName',
        'rollover_balance': 'RolloverBalance',
        'segment': 'Segment',
        'specific_billing_period': 'SpecificBillingPeriod',
        'specific_end_date': 'SpecificEndDate',
        'tcv': 'TCV',
        'trigger_date': 'TriggerDate',
        'trigger_event': 'TriggerEvent',
        'uom': 'UOM',
        'unused_units_credit_rates': 'UnusedUnitsCreditRates',
        'up_to_periods': 'UpToPeriods',
        'up_to_periods_type': 'UpToPeriodsType',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate',
        'usage_record_rating_option': 'UsageRecordRatingOption',
        'use_discount_specific_accounting_code': 'UseDiscountSpecificAccountingCode',
        'version': 'Version',
        'weekly_bill_cycle_day': 'WeeklyBillCycleDay'
    }

    def __init__(self, accounting_code=None, apply_discount_to=None, bill_cycle_day=None, bill_cycle_type=None, billing_period=None, billing_period_alignment=None, billing_timing=None, charge_model=None, charge_number=None, charge_type=None, charged_through_date=None, created_by_id=None, created_date=None, dmrc=None, dtcv=None, description=None, discount_amount=None, discount_level=None, discount_percentage=None, effective_end_date=None, effective_start_date=None, end_date_condition=None, included_units=None, is_last_segment=None, list_price_base=None, mrr=None, name=None, number_of_periods=None, original_id=None, overage_calculation_option=None, overage_price=None, overage_unused_units_credit_option=None, price=None, price_change_option=None, price_increase_percentage=None, processed_through_date=None, product_rate_plan_charge_id=None, quantity=None, rate_plan_id=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, rollover_balance=None, segment=None, specific_billing_period=None, specific_end_date=None, tcv=None, trigger_date=None, trigger_event=None, uom=None, unused_units_credit_rates=None, up_to_periods=None, up_to_periods_type=None, updated_by_id=None, updated_date=None, usage_record_rating_option=None, use_discount_specific_accounting_code=None, version=None, weekly_bill_cycle_day=None):  # noqa: E501
        """RatePlanChargeDataRatePlanCharge - a model defined in Swagger"""  # noqa: E501

        self._accounting_code = None
        self._apply_discount_to = None
        self._bill_cycle_day = None
        self._bill_cycle_type = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._charge_model = None
        self._charge_number = None
        self._charge_type = None
        self._charged_through_date = None
        self._created_by_id = None
        self._created_date = None
        self._dmrc = None
        self._dtcv = None
        self._description = None
        self._discount_amount = None
        self._discount_level = None
        self._discount_percentage = None
        self._effective_end_date = None
        self._effective_start_date = None
        self._end_date_condition = None
        self._included_units = None
        self._is_last_segment = None
        self._list_price_base = None
        self._mrr = None
        self._name = None
        self._number_of_periods = None
        self._original_id = None
        self._overage_calculation_option = None
        self._overage_price = None
        self._overage_unused_units_credit_option = None
        self._price = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._processed_through_date = None
        self._product_rate_plan_charge_id = None
        self._quantity = None
        self._rate_plan_id = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._rollover_balance = None
        self._segment = None
        self._specific_billing_period = None
        self._specific_end_date = None
        self._tcv = None
        self._trigger_date = None
        self._trigger_event = None
        self._uom = None
        self._unused_units_credit_rates = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._updated_by_id = None
        self._updated_date = None
        self._usage_record_rating_option = None
        self._use_discount_specific_accounting_code = None
        self._version = None
        self._weekly_bill_cycle_day = None
        self.discriminator = None

        if accounting_code is not None:
            self.accounting_code = accounting_code
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_cycle_type is not None:
            self.bill_cycle_type = bill_cycle_type
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charge_model is not None:
            self.charge_model = charge_model
        if charge_number is not None:
            self.charge_number = charge_number
        if charge_type is not None:
            self.charge_type = charge_type
        if charged_through_date is not None:
            self.charged_through_date = charged_through_date
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if dmrc is not None:
            self.dmrc = dmrc
        if dtcv is not None:
            self.dtcv = dtcv
        if description is not None:
            self.description = description
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_level is not None:
            self.discount_level = discount_level
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if included_units is not None:
            self.included_units = included_units
        if is_last_segment is not None:
            self.is_last_segment = is_last_segment
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if mrr is not None:
            self.mrr = mrr
        if name is not None:
            self.name = name
        if number_of_periods is not None:
            self.number_of_periods = number_of_periods
        if original_id is not None:
            self.original_id = original_id
        if overage_calculation_option is not None:
            self.overage_calculation_option = overage_calculation_option
        if overage_price is not None:
            self.overage_price = overage_price
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if price is not None:
            self.price = price
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if processed_through_date is not None:
            self.processed_through_date = processed_through_date
        self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if quantity is not None:
            self.quantity = quantity
        if rate_plan_id is not None:
            self.rate_plan_id = rate_plan_id
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if rollover_balance is not None:
            self.rollover_balance = rollover_balance
        if segment is not None:
            self.segment = segment
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if tcv is not None:
            self.tcv = tcv
        if trigger_date is not None:
            self.trigger_date = trigger_date
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if uom is not None:
            self.uom = uom
        if unused_units_credit_rates is not None:
            self.unused_units_credit_rates = unused_units_credit_rates
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date
        if usage_record_rating_option is not None:
            self.usage_record_rating_option = usage_record_rating_option
        if use_discount_specific_accounting_code is not None:
            self.use_discount_specific_accounting_code = use_discount_specific_accounting_code
        if version is not None:
            self.version = version
        if weekly_bill_cycle_day is not None:
            self.weekly_bill_cycle_day = weekly_bill_cycle_day

    @property
    def accounting_code(self):
        """Gets the accounting_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.  **Character limit**: 100   **Values**: inherited from `ProductRatePlanCharge.AccountingCode`   # noqa: E501

        :return: The accounting_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this RatePlanChargeDataRatePlanCharge.

        The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.  **Character limit**: 100   **Values**: inherited from `ProductRatePlanCharge.AccountingCode`   # noqa: E501

        :param accounting_code: The accounting_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the type of charges a specific discount applies to.  **Character limit**: 21   **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo`   # noqa: E501

        :return: The apply_discount_to of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this RatePlanChargeDataRatePlanCharge.

         Specifies the type of charges a specific discount applies to.  **Character limit**: 21   **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo`   # noqa: E501

        :param apply_discount_to: The apply_discount_to of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._apply_discount_to = apply_discount_to

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.   **Character limit**: 2   **Values**: inherited from `ProductRatePlanCharge.BillCycleDay`   # noqa: E501

        :return: The bill_cycle_day of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this RatePlanChargeDataRatePlanCharge.

         Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.   **Character limit**: 2   **Values**: inherited from `ProductRatePlanCharge.BillCycleDay`   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_cycle_type(self):
        """Gets the bill_cycle_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies how to determine the billing day for the charge.   **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :return: The bill_cycle_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_type

    @bill_cycle_type.setter
    def bill_cycle_type(self, bill_cycle_type):
        """Sets the bill_cycle_type of this RatePlanChargeDataRatePlanCharge.

         Specifies how to determine the billing day for the charge.   **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :param bill_cycle_type: The bill_cycle_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._bill_cycle_type = bill_cycle_type

    @property
    def billing_period(self):
        """Gets the billing_period of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Allows billing period to be overridden on rate plan charge.    **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :return: The billing_period of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this RatePlanChargeDataRatePlanCharge.

         Allows billing period to be overridden on rate plan charge.    **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :param billing_period: The billing_period of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Aligns charges within the same subscription if multiple charges begin on different dates.   **Character limit**: 24   **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment`   # noqa: E501

        :return: The billing_period_alignment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this RatePlanChargeDataRatePlanCharge.

         Aligns charges within the same subscription if multiple charges begin on different dates.   **Character limit**: 24   **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment`   # noqa: E501

        :param billing_period_alignment: The billing_period_alignment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.   **Character limit**:   **Values**: one of the following:  - I`n Advance` - `In Arrears` **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The billing_timing of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this RatePlanChargeDataRatePlanCharge.

         The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.   **Character limit**:   **Values**: one of the following:  - I`n Advance` - `In Arrears` **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param billing_timing: The billing_timing of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_timing = billing_timing

    @property
    def charge_model(self):
        """Gets the charge_model of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.   **Character limit**: 29   **Values**: inherited from `ProductRatePlanCharge.ChargeModel`   # noqa: E501

        :return: The charge_model of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """Sets the charge_model of this RatePlanChargeDataRatePlanCharge.

         Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.   **Character limit**: 29   **Values**: inherited from `ProductRatePlanCharge.ChargeModel`   # noqa: E501

        :param charge_model: The charge_model of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._charge_model = charge_model

    @property
    def charge_number(self):
        """Gets the charge_number of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         A unique number that identifies the charge. This number is returned as a string.   **Character limit**: 50   **Values**: one of the following:  - automatically generated if left null - a unique number of 50 characters or fewer   # noqa: E501

        :return: The charge_number of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this RatePlanChargeDataRatePlanCharge.

         A unique number that identifies the charge. This number is returned as a string.   **Character limit**: 50   **Values**: one of the following:  - automatically generated if left null - a unique number of 50 characters or fewer   # noqa: E501

        :param charge_number: The charge_number of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def charge_type(self):
        """Gets the charge_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the type of charge.   **Character limit**: 9   **Values**: inherited from `ProductRatePlanCharge.ChargeType`   # noqa: E501

        :return: The charge_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this RatePlanChargeDataRatePlanCharge.

         Specifies the type of charge.   **Character limit**: 9   **Values**: inherited from `ProductRatePlanCharge.ChargeType`   # noqa: E501

        :param charge_type: The charge_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def charged_through_date(self):
        """Gets the charged_through_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date through which a customer has been billed for the charge.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The charged_through_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._charged_through_date

    @charged_through_date.setter
    def charged_through_date(self, charged_through_date):
        """Sets the charged_through_date of this RatePlanChargeDataRatePlanCharge.

         The date through which a customer has been billed for the charge.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param charged_through_date: The charged_through_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._charged_through_date = charged_through_date

    @property
    def created_by_id(self):
        """Gets the created_by_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        The ID of the Zuora user who created the `RatePlanCharge` object.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this RatePlanChargeDataRatePlanCharge.

        The ID of the Zuora user who created the `RatePlanCharge` object.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date when the `RatePlanCharge` object was created.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The created_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this RatePlanChargeDataRatePlanCharge.

         The date when the `RatePlanCharge` object was created.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def dmrc(self):
        """Gets the dmrc of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription.  **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :return: The dmrc of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._dmrc

    @dmrc.setter
    def dmrc(self, dmrc):
        """Sets the dmrc of this RatePlanChargeDataRatePlanCharge.

        A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription.  **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :param dmrc: The dmrc of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._dmrc = dmrc

    @property
    def dtcv(self):
        """Gets the dtcv of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :return: The dtcv of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._dtcv

    @dtcv.setter
    def dtcv(self, dtcv):
        """Sets the dtcv of this RatePlanChargeDataRatePlanCharge.

         After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :param dtcv: The dtcv of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._dtcv = dtcv

    @property
    def description(self):
        """Gets the description of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         A description of the charge.   **Character limit**: 500   **Values**: inherited from `ProductRatePlanCharge.Description`   # noqa: E501

        :return: The description of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RatePlanChargeDataRatePlanCharge.

         A description of the charge.   **Character limit**: 500   **Values**: inherited from `ProductRatePlanCharge.Description`   # noqa: E501

        :param description: The description of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:  - Price - IncludedUnits - DiscountPercentage - OveragePrice   **Character limit**: 16   **Values**: a valid currency amount   # noqa: E501

        :return: The discount_amount of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this RatePlanChargeDataRatePlanCharge.

         Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:  - Price - IncludedUnits - DiscountPercentage - OveragePrice   **Character limit**: 16   **Values**: a valid currency amount   # noqa: E501

        :param discount_amount: The discount_amount of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_level(self):
        """Gets the discount_level of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. This field is only required if the `ChargeModel` field is set to `DiscountFixedAmount` or `DiscountPercentage`.  **Character limit**: 12   **Values**: inherited from `ProductRatePlanCharge.DiscountLevel`   # noqa: E501

        :return: The discount_level of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this RatePlanChargeDataRatePlanCharge.

        Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. This field is only required if the `ChargeModel` field is set to `DiscountFixedAmount` or `DiscountPercentage`.  **Character limit**: 12   **Values**: inherited from `ProductRatePlanCharge.DiscountLevel`   # noqa: E501

        :param discount_level: The discount_level of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._discount_level = discount_level

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Query Filter   # noqa: E501

        :return: The discount_percentage of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this RatePlanChargeDataRatePlanCharge.

         Query Filter   # noqa: E501

        :param discount_percentage: The discount_percentage of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date when the segmented charge ends or ended.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :return: The effective_end_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this RatePlanChargeDataRatePlanCharge.

         The date when the segmented charge ends or ended.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :param effective_end_date: The effective_end_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date when the segmented charge starts or started.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :return: The effective_start_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this RatePlanChargeDataRatePlanCharge.

         The date when the segmented charge starts or started.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :param effective_start_date: The effective_start_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.    **Values**: one of the following:  - `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value. - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. - `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.    **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.   # noqa: E501

        :return: The end_date_condition of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this RatePlanChargeDataRatePlanCharge.

         Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.    **Values**: one of the following:  - `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value. - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. - `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.    **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.   # noqa: E501

        :param end_date_condition: The end_date_condition of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._end_date_condition = end_date_condition

    @property
    def included_units(self):
        """Gets the included_units of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Query Filter   # noqa: E501

        :return: The included_units of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this RatePlanChargeDataRatePlanCharge.

         Query Filter   # noqa: E501

        :param included_units: The included_units of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._included_units = included_units

    @property
    def is_last_segment(self):
        """Gets the is_last_segment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        Indicates if the segment of the rate plan charge is the most recent segment.  **Character limit**: 5   **Values**: automatically generated: `true`, `false`   # noqa: E501

        :return: The is_last_segment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: bool
        """
        return self._is_last_segment

    @is_last_segment.setter
    def is_last_segment(self, is_last_segment):
        """Sets the is_last_segment of this RatePlanChargeDataRatePlanCharge.

        Indicates if the segment of the rate plan charge is the most recent segment.  **Character limit**: 5   **Values**: automatically generated: `true`, `false`   # noqa: E501

        :param is_last_segment: The is_last_segment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: bool
        """

        self._is_last_segment = is_last_segment

    @property
    def list_price_base(self):
        """Gets the list_price_base of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        The list price base for the product rate plan charge.   **Values**: one of the following:  - `Per Month` - `Per Billing Period` - `Per Week`   # noqa: E501

        :return: The list_price_base of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this RatePlanChargeDataRatePlanCharge.

        The list price base for the product rate plan charge.   **Values**: one of the following:  - `Per Month` - `Per Billing Period` - `Per Week`   # noqa: E501

        :param list_price_base: The list_price_base of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._list_price_base = list_price_base

    @property
    def mrr(self):
        """Gets the mrr of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.  **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :return: The mrr of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._mrr

    @mrr.setter
    def mrr(self, mrr):
        """Sets the mrr of this RatePlanChargeDataRatePlanCharge.

        Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.  **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :param mrr: The mrr of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._mrr = mrr

    @property
    def name(self):
        """Gets the name of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        The name of the rate plan charge.  **Character limit**: 100   **Values**: automatically generated   # noqa: E501

        :return: The name of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RatePlanChargeDataRatePlanCharge.

        The name of the rate plan charge.  **Character limit**: 100   **Values**: automatically generated   # noqa: E501

        :param name: The name of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_periods(self):
        """Gets the number_of_periods of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model.  **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod`   # noqa: E501

        :return: The number_of_periods of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._number_of_periods

    @number_of_periods.setter
    def number_of_periods(self, number_of_periods):
        """Sets the number_of_periods of this RatePlanChargeDataRatePlanCharge.

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model.  **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod`   # noqa: E501

        :param number_of_periods: The number_of_periods of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._number_of_periods = number_of_periods

    @property
    def original_id(self):
        """Gets the original_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        The original ID of the rate plan charge.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The original_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this RatePlanChargeDataRatePlanCharge.

        The original ID of the rate plan charge.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param original_id: The original_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._original_id = original_id

    @property
    def overage_calculation_option(self):
        """Gets the overage_calculation_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored.  **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption`   # noqa: E501

        :return: The overage_calculation_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._overage_calculation_option

    @overage_calculation_option.setter
    def overage_calculation_option(self, overage_calculation_option):
        """Sets the overage_calculation_option of this RatePlanChargeDataRatePlanCharge.

        Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored.  **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption`   # noqa: E501

        :param overage_calculation_option: The overage_calculation_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._overage_calculation_option = overage_calculation_option

    @property
    def overage_price(self):
        """Gets the overage_price of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Query Filter   # noqa: E501

        :return: The overage_price of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._overage_price

    @overage_price.setter
    def overage_price(self, overage_price):
        """Sets the overage_price of this RatePlanChargeDataRatePlanCharge.

         Query Filter   # noqa: E501

        :param overage_price: The overage_price of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._overage_price = overage_price

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Determines whether to credit the customer with unused units of usage.   **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption`   # noqa: E501

        :return: The overage_unused_units_credit_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this RatePlanChargeDataRatePlanCharge.

         Determines whether to credit the customer with unused units of usage.   **Character limit**: 20   **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption`   # noqa: E501

        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def price(self):
        """Gets the price of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Query Filter   # noqa: E501

        :return: The price of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RatePlanChargeDataRatePlanCharge.

         Query Filter   # noqa: E501

        :param price: The price of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_change_option(self):
        """Gets the price_change_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Applies an automatic price change when a termed subscription is renewed.   **Character limit**:   **Values**: one of the following:  - `NoChange` (default) - `SpecificPercentageValue` - `UseLatestProductCatalogPricing`   # noqa: E501

        :return: The price_change_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this RatePlanChargeDataRatePlanCharge.

         Applies an automatic price change when a termed subscription is renewed.   **Character limit**:   **Values**: one of the following:  - `NoChange` (default) - `SpecificPercentageValue` - `UseLatestProductCatalogPricing`   # noqa: E501

        :param price_change_option: The price_change_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.   **Character limit**: 16   **Values**: a decimal value between -100 and 100   # noqa: E501

        :return: The price_increase_percentage of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this RatePlanChargeDataRatePlanCharge.

         Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.   **Character limit**: 16   **Values**: a decimal value between -100 and 100   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def processed_through_date(self):
        """Gets the processed_through_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The processed_through_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._processed_through_date

    @processed_through_date.setter
    def processed_through_date(self, processed_through_date):
        """Sets the processed_through_date of this RatePlanChargeDataRatePlanCharge.

         The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param processed_through_date: The processed_through_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._processed_through_date = processed_through_date

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The ID of the product rate plan charge associated with the subscription rate plan charge,  **Character limit**: 32   **Values**: inherited from `ProductRatePlanCharge.Id`   # noqa: E501

        :return: The product_rate_plan_charge_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this RatePlanChargeDataRatePlanCharge.

         The ID of the product rate plan charge associated with the subscription rate plan charge,  **Character limit**: 32   **Values**: inherited from `ProductRatePlanCharge.Id`   # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """
        if product_rate_plan_charge_id is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def quantity(self):
        """Gets the quantity of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.   **Character limit**: 16   **Values**: a valid quantity value   # noqa: E501

        :return: The quantity of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RatePlanChargeDataRatePlanCharge.

         The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.   **Character limit**: 16   **Values**: a valid quantity value   # noqa: E501

        :param quantity: The quantity of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def rate_plan_id(self):
        """Gets the rate_plan_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The ID of the rate plan associated with the rate plan charge.   **Character limit**: 32   **Values**: inherited from `RatePlan.Id`   # noqa: E501

        :return: The rate_plan_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_id

    @rate_plan_id.setter
    def rate_plan_id(self, rate_plan_id):
        """Sets the rate_plan_id of this RatePlanChargeDataRatePlanCharge.

         The ID of the rate plan associated with the rate plan charge.   **Character limit**: 32   **Values**: inherited from `RatePlan.Id`   # noqa: E501

        :param rate_plan_id: The rate_plan_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rate_plan_id = rate_plan_id

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Associates this product rate plan charge with a specific revenue recognition code.   **Character limit**: 70   **Values**: a valid revenue recognition code   # noqa: E501

        :return: The rev_rec_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this RatePlanChargeDataRatePlanCharge.

         Associates this product rate plan charge with a specific revenue recognition code.   **Character limit**: 70   **Values**: a valid revenue recognition code   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies when revenue recognition begins.   **Character limit**: 22   **Values**: one of the following:  -  `ContractEffectiveDate`  -  `ServiceActivationDate`  -  `CustomerAcceptanceDate`    # noqa: E501

        :return: The rev_rec_trigger_condition of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this RatePlanChargeDataRatePlanCharge.

         Specifies when revenue recognition begins.   **Character limit**: 22   **Values**: one of the following:  -  `ContractEffectiveDate`  -  `ServiceActivationDate`  -  `CustomerAcceptanceDate`    # noqa: E501

        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.    **Character limit**: n/a   **Values**: name of an active Revenue Recognition Rule   # noqa: E501

        :return: The revenue_recognition_rule_name of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this RatePlanChargeDataRatePlanCharge.

         Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.    **Character limit**: n/a   **Values**: name of an active Revenue Recognition Rule   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def rollover_balance(self):
        """Gets the rollover_balance of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.   **Character limit**: 16   **Values**: automatically generated  **Note**:  - You cannot query or filter this field with other fields in a single query. - To query or filter this field, you must specify and only specify the rate plan charge Id in the condition. - You cannot use this field in the query or filter condition.   # noqa: E501

        :return: The rollover_balance of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._rollover_balance

    @rollover_balance.setter
    def rollover_balance(self, rollover_balance):
        """Sets the rollover_balance of this RatePlanChargeDataRatePlanCharge.

         Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.   **Character limit**: 16   **Values**: automatically generated  **Note**:  - You cannot query or filter this field with other fields in a single query. - To query or filter this field, you must specify and only specify the rate plan charge Id in the condition. - You cannot use this field in the query or filter condition.   # noqa: E501

        :param rollover_balance: The rollover_balance of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._rollover_balance = rollover_balance

    @property
    def segment(self):
        """Gets the segment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.   **Character limit**: 2   **Values**: automatically generated   # noqa: E501

        :return: The segment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this RatePlanChargeDataRatePlanCharge.

         The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.   **Character limit**: 2   **Values**: automatically generated   # noqa: E501

        :param segment: The segment of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._segment = segment

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.  **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :return: The specific_billing_period of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this RatePlanChargeDataRatePlanCharge.

         Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.  **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The specific date on which the charge ends, in `yyyy-mm-dd` format.   **Character limit**: 29    **Note**:  - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`. - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :return: The specific_end_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this RatePlanChargeDataRatePlanCharge.

         The specific date on which the charge ends, in `yyyy-mm-dd` format.   **Character limit**: 29    **Note**:  - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`. - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :param specific_end_date: The specific_end_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def tcv(self):
        """Gets the tcv of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :return: The tcv of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._tcv

    @tcv.setter
    def tcv(self, tcv):
        """Sets the tcv of this RatePlanChargeDataRatePlanCharge.

         The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.   **Character limit**: 16   **Values**: automatically generated   # noqa: E501

        :param tcv: The tcv of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._tcv = tcv

    @property
    def trigger_date(self):
        """Gets the trigger_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.   **Character limit**: 29    # noqa: E501

        :return: The trigger_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: date
        """
        return self._trigger_date

    @trigger_date.setter
    def trigger_date(self, trigger_date):
        """Sets the trigger_date of this RatePlanChargeDataRatePlanCharge.

         The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.   **Character limit**: 29    # noqa: E501

        :param trigger_date: The trigger_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: date
        """

        self._trigger_date = trigger_date

    @property
    def trigger_event(self):
        """Gets the trigger_event of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies when to start billing the customer for the charge. **Note: **This field can be passed through the subscribe and amend calls and will override the default value set on the Product Rate Plan Charge.   **Character limit**: 18   **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:  - `ContractEffective`is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivationDate`is when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance`is when the customer accepts the services or products for a subscription. - `SpecificDate` is valid only on the RatePlanCharge.   # noqa: E501

        :return: The trigger_event of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this RatePlanChargeDataRatePlanCharge.

         Specifies when to start billing the customer for the charge. **Note: **This field can be passed through the subscribe and amend calls and will override the default value set on the Product Rate Plan Charge.   **Character limit**: 18   **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:  - `ContractEffective`is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivationDate`is when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance`is when the customer accepts the services or products for a subscription. - `SpecificDate` is valid only on the RatePlanCharge.   # noqa: E501

        :param trigger_event: The trigger_event of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._trigger_event = trigger_event

    @property
    def uom(self):
        """Gets the uom of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**.   **Character limit**: 25   **Values**: inherited from `ProductRatePlanCharge.UOM`   # noqa: E501

        :return: The uom of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this RatePlanChargeDataRatePlanCharge.

         Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**.   **Character limit**: 25   **Values**: inherited from `ProductRatePlanCharge.UOM`   # noqa: E501

        :param uom: The uom of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def unused_units_credit_rates(self):
        """Gets the unused_units_credit_rates of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.   **Character limit**: 16   **Values**: a valid decimal value   # noqa: E501

        :return: The unused_units_credit_rates of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._unused_units_credit_rates

    @unused_units_credit_rates.setter
    def unused_units_credit_rates(self, unused_units_credit_rates):
        """Sets the unused_units_credit_rates of this RatePlanChargeDataRatePlanCharge.

         Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.   **Character limit**: 16   **Values**: a valid decimal value   # noqa: E501

        :param unused_units_credit_rates: The unused_units_credit_rates of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._unused_units_credit_rates = unused_units_credit_rates

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`  **Note**:  - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`. - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`. - If you override the value in this field, enter a whole number between 0 and 65535, exclusive. - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :return: The up_to_periods of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this RatePlanChargeDataRatePlanCharge.

         Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`  **Note**:  - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`. - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`. - If you override the value in this field, enter a whole number between 0 and 65535, exclusive. - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :param up_to_periods: The up_to_periods of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.   **Values**: one of the following:  - `Billing Periods` (default) - `Days` - `Weeks` - `Months` - `Years`   **Note**:  - You must use this field together with the `UpToPeriods` field to specify the time period. - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.   # noqa: E501

        :return: The up_to_periods_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this RatePlanChargeDataRatePlanCharge.

         The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.   **Values**: one of the following:  - `Billing Periods` (default) - `Days` - `Weeks` - `Months` - `Years`   **Note**:  - You must use this field together with the `UpToPeriods` field to specify the time period. - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.   # noqa: E501

        :param up_to_periods_type: The up_to_periods_type of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

        The ID of the last user to update the object.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :return: The updated_by_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this RatePlanChargeDataRatePlanCharge.

        The ID of the last user to update the object.  **Character limit**: 32   **Values**: automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The date when the object was last updated.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this RatePlanChargeDataRatePlanCharge.

         The date when the object was last updated.   **Character limit**: 29   **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def usage_record_rating_option(self):
        """Gets the usage_record_rating_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Determines how Zuora processes usage records for per-unit usage charges.  **Character limit**: 18   **Values**: automatically generated   # noqa: E501

        :return: The usage_record_rating_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._usage_record_rating_option

    @usage_record_rating_option.setter
    def usage_record_rating_option(self, usage_record_rating_option):
        """Sets the usage_record_rating_option of this RatePlanChargeDataRatePlanCharge.

         Determines how Zuora processes usage records for per-unit usage charges.  **Character limit**: 18   **Values**: automatically generated   # noqa: E501

        :param usage_record_rating_option: The usage_record_rating_option of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._usage_record_rating_option = usage_record_rating_option

    @property
    def use_discount_specific_accounting_code(self):
        """Gets the use_discount_specific_accounting_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Determines whether to define a new accounting code for the new discount charge.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode`   # noqa: E501

        :return: The use_discount_specific_accounting_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: bool
        """
        return self._use_discount_specific_accounting_code

    @use_discount_specific_accounting_code.setter
    def use_discount_specific_accounting_code(self, use_discount_specific_accounting_code):
        """Sets the use_discount_specific_accounting_code of this RatePlanChargeDataRatePlanCharge.

         Determines whether to define a new accounting code for the new discount charge.   **Character limit**: 5   **Values**: inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode`   # noqa: E501

        :param use_discount_specific_accounting_code: The use_discount_specific_accounting_code of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: bool
        """

        self._use_discount_specific_accounting_code = use_discount_specific_accounting_code

    @property
    def version(self):
        """Gets the version of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.  **Character limit**: 5   **Values**: automatically generated   # noqa: E501

        :return: The version of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RatePlanChargeDataRatePlanCharge.

         The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.  **Character limit**: 5   **Values**: automatically generated   # noqa: E501

        :param version: The version of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def weekly_bill_cycle_day(self):
        """Gets the weekly_bill_cycle_day of this RatePlanChargeDataRatePlanCharge.  # noqa: E501

         Specifies which day of the week as the bill cycle day (BCD) for the charge. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).     **Values**: one of the following:  - `Sunday` - `Monday` - `Tuesday` - `Wednesday` - `Thursday` - `Friday` - `Saturday`   # noqa: E501

        :return: The weekly_bill_cycle_day of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._weekly_bill_cycle_day

    @weekly_bill_cycle_day.setter
    def weekly_bill_cycle_day(self, weekly_bill_cycle_day):
        """Sets the weekly_bill_cycle_day of this RatePlanChargeDataRatePlanCharge.

         Specifies which day of the week as the bill cycle day (BCD) for the charge. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).     **Values**: one of the following:  - `Sunday` - `Monday` - `Tuesday` - `Wednesday` - `Thursday` - `Friday` - `Saturday`   # noqa: E501

        :param weekly_bill_cycle_day: The weekly_bill_cycle_day of this RatePlanChargeDataRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._weekly_bill_cycle_day = weekly_bill_cycle_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatePlanChargeDataRatePlanCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatePlanChargeDataRatePlanCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
