# coding: utf-8




import pprint
import re  # noqa: F401

import six


class GETBillingDocumentsResponseType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'amount': 'float',
        'balance': 'float',
        'document_date': 'date',
        'document_number': 'str',
        'document_type': 'str',
        'id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'balance': 'balance',
        'document_date': 'documentDate',
        'document_number': 'documentNumber',
        'document_type': 'documentType',
        'id': 'id',
        'status': 'status'
    }

    def __init__(self, account_id=None, amount=None, balance=None, document_date=None, document_number=None, document_type=None, id=None, status=None):  # noqa: E501
        """GETBillingDocumentsResponseType - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._amount = None
        self._balance = None
        self._document_date = None
        self._document_number = None
        self._document_type = None
        self._id = None
        self._status = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if balance is not None:
            self.balance = balance
        if document_date is not None:
            self.document_date = document_date
        if document_number is not None:
            self.document_number = document_number
        if document_type is not None:
            self.document_type = document_type
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this GETBillingDocumentsResponseType.  # noqa: E501

        The ID of the customer account associated with the billing document.  # noqa: E501

        :return: The account_id of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GETBillingDocumentsResponseType.

        The ID of the customer account associated with the billing document.  # noqa: E501

        :param account_id: The account_id of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this GETBillingDocumentsResponseType.  # noqa: E501

        The total amount of the billing document.   # noqa: E501

        :return: The amount of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GETBillingDocumentsResponseType.

        The total amount of the billing document.   # noqa: E501

        :param amount: The amount of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def balance(self):
        """Gets the balance of this GETBillingDocumentsResponseType.  # noqa: E501

        The balance of the billing document.   # noqa: E501

        :return: The balance of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GETBillingDocumentsResponseType.

        The balance of the billing document.   # noqa: E501

        :param balance: The balance of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def document_date(self):
        """Gets the document_date of this GETBillingDocumentsResponseType.  # noqa: E501

        The date of the billing document. The date can be the invoice date for invoices, credit memo date for credit memos, or debit memo date for debit memos.   # noqa: E501

        :return: The document_date of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this GETBillingDocumentsResponseType.

        The date of the billing document. The date can be the invoice date for invoices, credit memo date for credit memos, or debit memo date for debit memos.   # noqa: E501

        :param document_date: The document_date of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: date
        """

        self._document_date = document_date

    @property
    def document_number(self):
        """Gets the document_number of this GETBillingDocumentsResponseType.  # noqa: E501

        The number of the billing document.   # noqa: E501

        :return: The document_number of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this GETBillingDocumentsResponseType.

        The number of the billing document.   # noqa: E501

        :param document_number: The document_number of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def document_type(self):
        """Gets the document_type of this GETBillingDocumentsResponseType.  # noqa: E501

        The type of the billing document.   # noqa: E501

        :return: The document_type of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this GETBillingDocumentsResponseType.

        The type of the billing document.   # noqa: E501

        :param document_type: The document_type of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Invoice", "CreditMemo", "DebitMemo"]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"  # noqa: E501
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def id(self):
        """Gets the id of this GETBillingDocumentsResponseType.  # noqa: E501

        The ID of the billing document.   # noqa: E501

        :return: The id of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETBillingDocumentsResponseType.

        The ID of the billing document.   # noqa: E501

        :param id: The id of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this GETBillingDocumentsResponseType.  # noqa: E501

        The current status of the billing document.   # noqa: E501

        :return: The status of this GETBillingDocumentsResponseType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETBillingDocumentsResponseType.

        The current status of the billing document.   # noqa: E501

        :param status: The status of this GETBillingDocumentsResponseType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Draft", "Posted", "Canceled", "Error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETBillingDocumentsResponseType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETBillingDocumentsResponseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
