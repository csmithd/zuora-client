# coding: utf-8




import pprint
import re  # noqa: F401

import six


class RefundInvoicePayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_id': 'str',
        'refund_amount': 'str'
    }

    attribute_map = {
        'invoice_id': 'InvoiceId',
        'refund_amount': 'RefundAmount'
    }

    def __init__(self, invoice_id=None, refund_amount=None):  # noqa: E501
        """RefundInvoicePayment - a model defined in Swagger"""  # noqa: E501

        self._invoice_id = None
        self._refund_amount = None
        self.discriminator = None

        self.invoice_id = invoice_id
        self.refund_amount = refund_amount

    @property
    def invoice_id(self):
        """Gets the invoice_id of this RefundInvoicePayment.  # noqa: E501

        The ID of the invoice that the payment is applied to.   # noqa: E501

        :return: The invoice_id of this RefundInvoicePayment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this RefundInvoicePayment.

        The ID of the invoice that the payment is applied to.   # noqa: E501

        :param invoice_id: The invoice_id of this RefundInvoicePayment.  # noqa: E501
        :type: str
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def refund_amount(self):
        """Gets the refund_amount of this RefundInvoicePayment.  # noqa: E501

        The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.   # noqa: E501

        :return: The refund_amount of this RefundInvoicePayment.  # noqa: E501
        :rtype: str
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this RefundInvoicePayment.

        The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.   # noqa: E501

        :param refund_amount: The refund_amount of this RefundInvoicePayment.  # noqa: E501
        :type: str
        """
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefundInvoicePayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundInvoicePayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
