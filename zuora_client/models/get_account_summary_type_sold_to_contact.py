# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.contact_object_custom_fields import ContactObjectCustomFields  # noqa: F401,E501


class GETAccountSummaryTypeSoldToContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'country': 'str',
        'county': 'str',
        'fax': 'str',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'state': 'str',
        'tax_region': 'str',
        'work_email': 'str',
        'work_phone': 'str',
        'zip_code': 'str'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'country': 'country',
        'county': 'county',
        'fax': 'fax',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'state': 'state',
        'tax_region': 'taxRegion',
        'work_email': 'workEmail',
        'work_phone': 'workPhone',
        'zip_code': 'zipCode'
    }

    def __init__(self, address1=None, address2=None, city=None, country=None, county=None, fax=None, first_name=None, id=None, last_name=None, state=None, tax_region=None, work_email=None, work_phone=None, zip_code=None):  # noqa: E501
        """GETAccountSummaryTypeSoldToContact - a model defined in Swagger"""  # noqa: E501

        self._address1 = None
        self._address2 = None
        self._city = None
        self._country = None
        self._county = None
        self._fax = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._state = None
        self._tax_region = None
        self._work_email = None
        self._work_phone = None
        self._zip_code = None
        self.discriminator = None

        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if county is not None:
            self.county = county
        if fax is not None:
            self.fax = fax
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if state is not None:
            self.state = state
        if tax_region is not None:
            self.tax_region = tax_region
        if work_email is not None:
            self.work_email = work_email
        if work_phone is not None:
            self.work_phone = work_phone
        if zip_code is not None:
            self.zip_code = zip_code

    @property
    def address1(self):
        """Gets the address1 of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        First address line, 255 characters or less.   # noqa: E501

        :return: The address1 of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this GETAccountSummaryTypeSoldToContact.

        First address line, 255 characters or less.   # noqa: E501

        :param address1: The address1 of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Second address line, 255 characters or less.   # noqa: E501

        :return: The address2 of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this GETAccountSummaryTypeSoldToContact.

        Second address line, 255 characters or less.   # noqa: E501

        :param address2: The address2 of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        City, 40 characters or less.   # noqa: E501

        :return: The city of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GETAccountSummaryTypeSoldToContact.

        City, 40 characters or less.   # noqa: E501

        :param city: The city of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Full country name. This field does not contain the ISO-standard abbreviation of the country name.   # noqa: E501

        :return: The country of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GETAccountSummaryTypeSoldToContact.

        Full country name. This field does not contain the ISO-standard abbreviation of the country name.   # noqa: E501

        :param country: The country of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.            # noqa: E501

        :return: The county of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this GETAccountSummaryTypeSoldToContact.

        County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.            # noqa: E501

        :param county: The county of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def fax(self):
        """Gets the fax of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Fax phone number, 40 characters or less.   # noqa: E501

        :return: The fax of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this GETAccountSummaryTypeSoldToContact.

        Fax phone number, 40 characters or less.   # noqa: E501

        :param fax: The fax of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        First name, 100 characters or less.   # noqa: E501

        :return: The first_name of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GETAccountSummaryTypeSoldToContact.

        First name, 100 characters or less.   # noqa: E501

        :param first_name: The first_name of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Contact ID.   # noqa: E501

        :return: The id of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETAccountSummaryTypeSoldToContact.

        Contact ID.   # noqa: E501

        :param id: The id of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Last name, 100 characters or less.   # noqa: E501

        :return: The last_name of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GETAccountSummaryTypeSoldToContact.

        Last name, 100 characters or less.   # noqa: E501

        :param last_name: The last_name of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def state(self):
        """Gets the state of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Full state name. This field does not contain the ISO-standard abbreviation of the state name.   # noqa: E501

        :return: The state of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GETAccountSummaryTypeSoldToContact.

        Full state name. This field does not contain the ISO-standard abbreviation of the state name.   # noqa: E501

        :param state: The state of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tax_region(self):
        """Gets the tax_region of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        A region string, defined in your Zuora tax rules.   # noqa: E501

        :return: The tax_region of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._tax_region

    @tax_region.setter
    def tax_region(self, tax_region):
        """Sets the tax_region of this GETAccountSummaryTypeSoldToContact.

        A region string, defined in your Zuora tax rules.   # noqa: E501

        :param tax_region: The tax_region of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._tax_region = tax_region

    @property
    def work_email(self):
        """Gets the work_email of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Work email address, 80 characters or less.   # noqa: E501

        :return: The work_email of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._work_email

    @work_email.setter
    def work_email(self, work_email):
        """Sets the work_email of this GETAccountSummaryTypeSoldToContact.

        Work email address, 80 characters or less.   # noqa: E501

        :param work_email: The work_email of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._work_email = work_email

    @property
    def work_phone(self):
        """Gets the work_phone of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Work phone number, 40 characters or less.   # noqa: E501

        :return: The work_phone of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this GETAccountSummaryTypeSoldToContact.

        Work phone number, 40 characters or less.   # noqa: E501

        :param work_phone: The work_phone of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._work_phone = work_phone

    @property
    def zip_code(self):
        """Gets the zip_code of this GETAccountSummaryTypeSoldToContact.  # noqa: E501

        Zip code, 20 characters or less.   # noqa: E501

        :return: The zip_code of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this GETAccountSummaryTypeSoldToContact.

        Zip code, 20 characters or less.   # noqa: E501

        :param zip_code: The zip_code of this GETAccountSummaryTypeSoldToContact.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETAccountSummaryTypeSoldToContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETAccountSummaryTypeSoldToContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
