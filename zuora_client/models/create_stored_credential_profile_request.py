# coding: utf-8




import pprint
import re  # noqa: F401

import six


class CreateStoredCredentialProfileRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'auth_gateway': 'str',
        'consent_agreement_ref': 'str',
        'consent_agreement_src': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'action': 'action',
        'auth_gateway': 'authGateway',
        'consent_agreement_ref': 'consentAgreementRef',
        'consent_agreement_src': 'consentAgreementSrc',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, action=None, auth_gateway=None, consent_agreement_ref=None, consent_agreement_src=None, status=None, type=None):  # noqa: E501
        """CreateStoredCredentialProfileRequest - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._auth_gateway = None
        self._consent_agreement_ref = None
        self._consent_agreement_src = None
        self._status = None
        self._type = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if auth_gateway is not None:
            self.auth_gateway = auth_gateway
        if consent_agreement_ref is not None:
            self.consent_agreement_ref = consent_agreement_ref
        self.consent_agreement_src = consent_agreement_src
        self.status = status
        self.type = type

    @property
    def action(self):
        """Gets the action of this CreateStoredCredentialProfileRequest.  # noqa: E501

        Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.  * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.    Zuora will create the stored credential profile then send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.   * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.   # noqa: E501

        :return: The action of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateStoredCredentialProfileRequest.

        Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.  * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.    Zuora will create the stored credential profile then send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.   * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.   # noqa: E501

        :param action: The action of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Activate", "Persist"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def auth_gateway(self):
        """Gets the auth_gateway of this CreateStoredCredentialProfileRequest.  # noqa: E501

        Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile.   # noqa: E501

        :return: The auth_gateway of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._auth_gateway

    @auth_gateway.setter
    def auth_gateway(self, auth_gateway):
        """Sets the auth_gateway of this CreateStoredCredentialProfileRequest.

        Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile.   # noqa: E501

        :param auth_gateway: The auth_gateway of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """

        self._auth_gateway = auth_gateway

    @property
    def consent_agreement_ref(self):
        """Gets the consent_agreement_ref of this CreateStoredCredentialProfileRequest.  # noqa: E501

        Specifies your reference for the consent agreement that you have established with the customer.   # noqa: E501

        :return: The consent_agreement_ref of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_agreement_ref

    @consent_agreement_ref.setter
    def consent_agreement_ref(self, consent_agreement_ref):
        """Sets the consent_agreement_ref of this CreateStoredCredentialProfileRequest.

        Specifies your reference for the consent agreement that you have established with the customer.   # noqa: E501

        :param consent_agreement_ref: The consent_agreement_ref of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """
        if consent_agreement_ref is not None and len(consent_agreement_ref) > 128:
            raise ValueError("Invalid value for `consent_agreement_ref`, length must be less than or equal to `128`")  # noqa: E501

        self._consent_agreement_ref = consent_agreement_ref

    @property
    def consent_agreement_src(self):
        """Gets the consent_agreement_src of this CreateStoredCredentialProfileRequest.  # noqa: E501


        :return: The consent_agreement_src of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_agreement_src

    @consent_agreement_src.setter
    def consent_agreement_src(self, consent_agreement_src):
        """Sets the consent_agreement_src of this CreateStoredCredentialProfileRequest.


        :param consent_agreement_src: The consent_agreement_src of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """
        if consent_agreement_src is None:
            raise ValueError("Invalid value for `consent_agreement_src`, must not be `None`")  # noqa: E501
        allowed_values = ["External"]  # noqa: E501
        if consent_agreement_src not in allowed_values:
            raise ValueError(
                "Invalid value for `consent_agreement_src` ({0}), must be one of {1}"  # noqa: E501
                .format(consent_agreement_src, allowed_values)
            )

        self._consent_agreement_src = consent_agreement_src

    @property
    def status(self):
        """Gets the status of this CreateStoredCredentialProfileRequest.  # noqa: E501

        Specifies the status of the stored credential profile.  * `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.    You can use the `action` field to specify how Zuora activates the stored credential profile.   * `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.    In this case, Zuora will not send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile.   # noqa: E501

        :return: The status of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateStoredCredentialProfileRequest.

        Specifies the status of the stored credential profile.  * `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.    You can use the `action` field to specify how Zuora activates the stored credential profile.   * `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.    In this case, Zuora will not send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile.   # noqa: E501

        :param status: The status of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Agreed", "Active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this CreateStoredCredentialProfileRequest.  # noqa: E501


        :return: The type of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateStoredCredentialProfileRequest.


        :param type: The type of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Recurring"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateStoredCredentialProfileRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateStoredCredentialProfileRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
