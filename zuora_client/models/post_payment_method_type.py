# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.create_payment_method_cardholder_info import CreatePaymentMethodCardholderInfo  # noqa: F401,E501
from zuora_client.models.payment_method_object_custom_fields import PaymentMethodObjectCustomFields  # noqa: F401,E501


class POSTPaymentMethodType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_key': 'str',
        'card_holder_info': 'CreatePaymentMethodCardholderInfo',
        'credit_card_number': 'str',
        'credit_card_type': 'str',
        'default_payment_method': 'bool',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'mit_consent_agreement_ref': 'str',
        'mit_consent_agreement_src': 'str',
        'mit_network_transaction_id': 'str',
        'mit_profile_action': 'str',
        'mit_profile_type': 'str',
        'num_consecutive_failures': 'int',
        'security_code': 'str'
    }

    attribute_map = {
        'account_key': 'accountKey',
        'card_holder_info': 'cardHolderInfo',
        'credit_card_number': 'creditCardNumber',
        'credit_card_type': 'creditCardType',
        'default_payment_method': 'defaultPaymentMethod',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'mit_consent_agreement_ref': 'mitConsentAgreementRef',
        'mit_consent_agreement_src': 'mitConsentAgreementSrc',
        'mit_network_transaction_id': 'mitNetworkTransactionId',
        'mit_profile_action': 'mitProfileAction',
        'mit_profile_type': 'mitProfileType',
        'num_consecutive_failures': 'numConsecutiveFailures',
        'security_code': 'securityCode'
    }

    def __init__(self, account_key=None, card_holder_info=None, credit_card_number=None, credit_card_type=None, default_payment_method=None, expiration_month=None, expiration_year=None, mit_consent_agreement_ref=None, mit_consent_agreement_src=None, mit_network_transaction_id=None, mit_profile_action=None, mit_profile_type=None, num_consecutive_failures=None, security_code=None):  # noqa: E501
        """POSTPaymentMethodType - a model defined in Swagger"""  # noqa: E501

        self._account_key = None
        self._card_holder_info = None
        self._credit_card_number = None
        self._credit_card_type = None
        self._default_payment_method = None
        self._expiration_month = None
        self._expiration_year = None
        self._mit_consent_agreement_ref = None
        self._mit_consent_agreement_src = None
        self._mit_network_transaction_id = None
        self._mit_profile_action = None
        self._mit_profile_type = None
        self._num_consecutive_failures = None
        self._security_code = None
        self.discriminator = None

        self.account_key = account_key
        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        self.credit_card_number = credit_card_number
        self.credit_card_type = credit_card_type
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        self.expiration_month = expiration_month
        self.expiration_year = expiration_year
        if mit_consent_agreement_ref is not None:
            self.mit_consent_agreement_ref = mit_consent_agreement_ref
        if mit_consent_agreement_src is not None:
            self.mit_consent_agreement_src = mit_consent_agreement_src
        if mit_network_transaction_id is not None:
            self.mit_network_transaction_id = mit_network_transaction_id
        if mit_profile_action is not None:
            self.mit_profile_action = mit_profile_action
        if mit_profile_type is not None:
            self.mit_profile_type = mit_profile_type
        if num_consecutive_failures is not None:
            self.num_consecutive_failures = num_consecutive_failures
        if security_code is not None:
            self.security_code = security_code

    @property
    def account_key(self):
        """Gets the account_key of this POSTPaymentMethodType.  # noqa: E501

        ID of the customer account to update.  **Note:** You can create a credit card payment method without assocating it with a customer account if you want. To do it and change the `accountKey` field to optional in this operation, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Important:** When you skip the `accountKey` field in this operation, the `cardHolderName` field in the cardHolderInfo object is required.  # noqa: E501

        :return: The account_key of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this POSTPaymentMethodType.

        ID of the customer account to update.  **Note:** You can create a credit card payment method without assocating it with a customer account if you want. To do it and change the `accountKey` field to optional in this operation, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Important:** When you skip the `accountKey` field in this operation, the `cardHolderName` field in the cardHolderInfo object is required.  # noqa: E501

        :param account_key: The account_key of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if account_key is None:
            raise ValueError("Invalid value for `account_key`, must not be `None`")  # noqa: E501

        self._account_key = account_key

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this POSTPaymentMethodType.  # noqa: E501


        :return: The card_holder_info of this POSTPaymentMethodType.  # noqa: E501
        :rtype: CreatePaymentMethodCardholderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this POSTPaymentMethodType.


        :param card_holder_info: The card_holder_info of this POSTPaymentMethodType.  # noqa: E501
        :type: CreatePaymentMethodCardholderInfo
        """

        self._card_holder_info = card_holder_info

    @property
    def credit_card_number(self):
        """Gets the credit_card_number of this POSTPaymentMethodType.  # noqa: E501

        Credit card number, a string of up to 16 characters. This field can only be set when creating a new payment method; it cannot be queried or updated.   # noqa: E501

        :return: The credit_card_number of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_number

    @credit_card_number.setter
    def credit_card_number(self, credit_card_number):
        """Sets the credit_card_number of this POSTPaymentMethodType.

        Credit card number, a string of up to 16 characters. This field can only be set when creating a new payment method; it cannot be queried or updated.   # noqa: E501

        :param credit_card_number: The credit_card_number of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if credit_card_number is None:
            raise ValueError("Invalid value for `credit_card_number`, must not be `None`")  # noqa: E501

        self._credit_card_number = credit_card_number

    @property
    def credit_card_type(self):
        """Gets the credit_card_type of this POSTPaymentMethodType.  # noqa: E501

        The type of the credit card.  Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The credit_card_type of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_type

    @credit_card_type.setter
    def credit_card_type(self, credit_card_type):
        """Sets the credit_card_type of this POSTPaymentMethodType.

        The type of the credit card.  Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param credit_card_type: The credit_card_type of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if credit_card_type is None:
            raise ValueError("Invalid value for `credit_card_type`, must not be `None`")  # noqa: E501

        self._credit_card_type = credit_card_type

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this POSTPaymentMethodType.  # noqa: E501

        Specify true to make this card the default payment method; otherwise, omit this parameter to keep the current default payment method.   # noqa: E501

        :return: The default_payment_method of this POSTPaymentMethodType.  # noqa: E501
        :rtype: bool
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this POSTPaymentMethodType.

        Specify true to make this card the default payment method; otherwise, omit this parameter to keep the current default payment method.   # noqa: E501

        :param default_payment_method: The default_payment_method of this POSTPaymentMethodType.  # noqa: E501
        :type: bool
        """

        self._default_payment_method = default_payment_method

    @property
    def expiration_month(self):
        """Gets the expiration_month of this POSTPaymentMethodType.  # noqa: E501

        One or two digits expiration month (1-12).   # noqa: E501

        :return: The expiration_month of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this POSTPaymentMethodType.

        One or two digits expiration month (1-12).   # noqa: E501

        :param expiration_month: The expiration_month of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this POSTPaymentMethodType.  # noqa: E501

        Four-digit expiration year.   # noqa: E501

        :return: The expiration_year of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this POSTPaymentMethodType.

        Four-digit expiration year.   # noqa: E501

        :param expiration_year: The expiration_year of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")  # noqa: E501

        self._expiration_year = expiration_year

    @property
    def mit_consent_agreement_ref(self):
        """Gets the mit_consent_agreement_ref of this POSTPaymentMethodType.  # noqa: E501

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_consent_agreement_ref of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._mit_consent_agreement_ref

    @mit_consent_agreement_ref.setter
    def mit_consent_agreement_ref(self, mit_consent_agreement_ref):
        """Sets the mit_consent_agreement_ref of this POSTPaymentMethodType.

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_consent_agreement_ref: The mit_consent_agreement_ref of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if mit_consent_agreement_ref is not None and len(mit_consent_agreement_ref) > 128:
            raise ValueError("Invalid value for `mit_consent_agreement_ref`, length must be less than or equal to `128`")  # noqa: E501

        self._mit_consent_agreement_ref = mit_consent_agreement_ref

    @property
    def mit_consent_agreement_src(self):
        """Gets the mit_consent_agreement_src of this POSTPaymentMethodType.  # noqa: E501

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_consent_agreement_src of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._mit_consent_agreement_src

    @mit_consent_agreement_src.setter
    def mit_consent_agreement_src(self, mit_consent_agreement_src):
        """Sets the mit_consent_agreement_src of this POSTPaymentMethodType.

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_consent_agreement_src: The mit_consent_agreement_src of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        allowed_values = ["External"]  # noqa: E501
        if mit_consent_agreement_src not in allowed_values:
            raise ValueError(
                "Invalid value for `mit_consent_agreement_src` ({0}), must be one of {1}"  # noqa: E501
                .format(mit_consent_agreement_src, allowed_values)
            )

        self._mit_consent_agreement_src = mit_consent_agreement_src

    @property
    def mit_network_transaction_id(self):
        """Gets the mit_network_transaction_id of this POSTPaymentMethodType.  # noqa: E501

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :return: The mit_network_transaction_id of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._mit_network_transaction_id

    @mit_network_transaction_id.setter
    def mit_network_transaction_id(self, mit_network_transaction_id):
        """Sets the mit_network_transaction_id of this POSTPaymentMethodType.

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :param mit_network_transaction_id: The mit_network_transaction_id of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        if mit_network_transaction_id is not None and len(mit_network_transaction_id) > 128:
            raise ValueError("Invalid value for `mit_network_transaction_id`, length must be less than or equal to `128`")  # noqa: E501

        self._mit_network_transaction_id = mit_network_transaction_id

    @property
    def mit_profile_action(self):
        """Gets the mit_profile_action of this POSTPaymentMethodType.  # noqa: E501

        If you set this field, Zuora creates a stored credential profile within the payment method.  **Note:** This feature is in **Limited Availability**. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.  * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.    Zuora will create the stored credential profile then send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.   * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.   # noqa: E501

        :return: The mit_profile_action of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._mit_profile_action

    @mit_profile_action.setter
    def mit_profile_action(self, mit_profile_action):
        """Sets the mit_profile_action of this POSTPaymentMethodType.

        If you set this field, Zuora creates a stored credential profile within the payment method.  **Note:** This feature is in **Limited Availability**. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.  * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.    Zuora will create the stored credential profile then send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.   * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.   # noqa: E501

        :param mit_profile_action: The mit_profile_action of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Activate", "Persist"]  # noqa: E501
        if mit_profile_action not in allowed_values:
            raise ValueError(
                "Invalid value for `mit_profile_action` ({0}), must be one of {1}"  # noqa: E501
                .format(mit_profile_action, allowed_values)
            )

        self._mit_profile_action = mit_profile_action

    @property
    def mit_profile_type(self):
        """Gets the mit_profile_type of this POSTPaymentMethodType.  # noqa: E501

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_profile_type of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._mit_profile_type

    @mit_profile_type.setter
    def mit_profile_type(self, mit_profile_type):
        """Sets the mit_profile_type of this POSTPaymentMethodType.

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_profile_type: The mit_profile_type of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Recurring"]  # noqa: E501
        if mit_profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mit_profile_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mit_profile_type, allowed_values)
            )

        self._mit_profile_type = mit_profile_type

    @property
    def num_consecutive_failures(self):
        """Gets the num_consecutive_failures of this POSTPaymentMethodType.  # noqa: E501

        The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.    # noqa: E501

        :return: The num_consecutive_failures of this POSTPaymentMethodType.  # noqa: E501
        :rtype: int
        """
        return self._num_consecutive_failures

    @num_consecutive_failures.setter
    def num_consecutive_failures(self, num_consecutive_failures):
        """Sets the num_consecutive_failures of this POSTPaymentMethodType.

        The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.    # noqa: E501

        :param num_consecutive_failures: The num_consecutive_failures of this POSTPaymentMethodType.  # noqa: E501
        :type: int
        """
        if num_consecutive_failures is not None and num_consecutive_failures > 100:  # noqa: E501
            raise ValueError("Invalid value for `num_consecutive_failures`, must be a value less than or equal to `100`")  # noqa: E501
        if num_consecutive_failures is not None and num_consecutive_failures < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_consecutive_failures`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_consecutive_failures = num_consecutive_failures

    @property
    def security_code(self):
        """Gets the security_code of this POSTPaymentMethodType.  # noqa: E501

        The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.    # noqa: E501

        :return: The security_code of this POSTPaymentMethodType.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this POSTPaymentMethodType.

        The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.    # noqa: E501

        :param security_code: The security_code of this POSTPaymentMethodType.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTPaymentMethodType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTPaymentMethodType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
