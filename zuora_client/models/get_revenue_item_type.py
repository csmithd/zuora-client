# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.revenue_event_item_object_custom_fields import RevenueEventItemObjectCustomFields  # noqa: F401,E501


class GETRevenueItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_period_end_date': 'date',
        'accounting_period_name': 'str',
        'accounting_period_start_date': 'date',
        'amount': 'str',
        'currency': 'str',
        'is_accounting_period_closed': 'bool'
    }

    attribute_map = {
        'accounting_period_end_date': 'accountingPeriodEndDate',
        'accounting_period_name': 'accountingPeriodName',
        'accounting_period_start_date': 'accountingPeriodStartDate',
        'amount': 'amount',
        'currency': 'currency',
        'is_accounting_period_closed': 'isAccountingPeriodClosed'
    }

    def __init__(self, accounting_period_end_date=None, accounting_period_name=None, accounting_period_start_date=None, amount=None, currency=None, is_accounting_period_closed=None):  # noqa: E501
        """GETRevenueItemType - a model defined in Swagger"""  # noqa: E501

        self._accounting_period_end_date = None
        self._accounting_period_name = None
        self._accounting_period_start_date = None
        self._amount = None
        self._currency = None
        self._is_accounting_period_closed = None
        self.discriminator = None

        if accounting_period_end_date is not None:
            self.accounting_period_end_date = accounting_period_end_date
        if accounting_period_name is not None:
            self.accounting_period_name = accounting_period_name
        if accounting_period_start_date is not None:
            self.accounting_period_start_date = accounting_period_start_date
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if is_accounting_period_closed is not None:
            self.is_accounting_period_closed = is_accounting_period_closed

    @property
    def accounting_period_end_date(self):
        """Gets the accounting_period_end_date of this GETRevenueItemType.  # noqa: E501

        The accounting period end date. The accounting period end date of the open-ended accounting period is null.    # noqa: E501

        :return: The accounting_period_end_date of this GETRevenueItemType.  # noqa: E501
        :rtype: date
        """
        return self._accounting_period_end_date

    @accounting_period_end_date.setter
    def accounting_period_end_date(self, accounting_period_end_date):
        """Sets the accounting_period_end_date of this GETRevenueItemType.

        The accounting period end date. The accounting period end date of the open-ended accounting period is null.    # noqa: E501

        :param accounting_period_end_date: The accounting_period_end_date of this GETRevenueItemType.  # noqa: E501
        :type: date
        """

        self._accounting_period_end_date = accounting_period_end_date

    @property
    def accounting_period_name(self):
        """Gets the accounting_period_name of this GETRevenueItemType.  # noqa: E501

        Name of the accounting period. The open-ended accounting period is named `Open-Ended`.    # noqa: E501

        :return: The accounting_period_name of this GETRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period_name

    @accounting_period_name.setter
    def accounting_period_name(self, accounting_period_name):
        """Sets the accounting_period_name of this GETRevenueItemType.

        Name of the accounting period. The open-ended accounting period is named `Open-Ended`.    # noqa: E501

        :param accounting_period_name: The accounting_period_name of this GETRevenueItemType.  # noqa: E501
        :type: str
        """

        self._accounting_period_name = accounting_period_name

    @property
    def accounting_period_start_date(self):
        """Gets the accounting_period_start_date of this GETRevenueItemType.  # noqa: E501

        The accounting period start date.   # noqa: E501

        :return: The accounting_period_start_date of this GETRevenueItemType.  # noqa: E501
        :rtype: date
        """
        return self._accounting_period_start_date

    @accounting_period_start_date.setter
    def accounting_period_start_date(self, accounting_period_start_date):
        """Sets the accounting_period_start_date of this GETRevenueItemType.

        The accounting period start date.   # noqa: E501

        :param accounting_period_start_date: The accounting_period_start_date of this GETRevenueItemType.  # noqa: E501
        :type: date
        """

        self._accounting_period_start_date = accounting_period_start_date

    @property
    def amount(self):
        """Gets the amount of this GETRevenueItemType.  # noqa: E501

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or *USD 30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  `Allocation amount with wrong decimal places.`   # noqa: E501

        :return: The amount of this GETRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GETRevenueItemType.

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or *USD 30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  `Allocation amount with wrong decimal places.`   # noqa: E501

        :param amount: The amount of this GETRevenueItemType.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this GETRevenueItemType.  # noqa: E501

        The type of currency used.    # noqa: E501

        :return: The currency of this GETRevenueItemType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETRevenueItemType.

        The type of currency used.    # noqa: E501

        :param currency: The currency of this GETRevenueItemType.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def is_accounting_period_closed(self):
        """Gets the is_accounting_period_closed of this GETRevenueItemType.  # noqa: E501

        Indicates if the accounting period is closed or open.    # noqa: E501

        :return: The is_accounting_period_closed of this GETRevenueItemType.  # noqa: E501
        :rtype: bool
        """
        return self._is_accounting_period_closed

    @is_accounting_period_closed.setter
    def is_accounting_period_closed(self, is_accounting_period_closed):
        """Sets the is_accounting_period_closed of this GETRevenueItemType.

        Indicates if the accounting period is closed or open.    # noqa: E501

        :param is_accounting_period_closed: The is_accounting_period_closed of this GETRevenueItemType.  # noqa: E501
        :type: bool
        """

        self._is_accounting_period_closed = is_accounting_period_closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETRevenueItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETRevenueItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
