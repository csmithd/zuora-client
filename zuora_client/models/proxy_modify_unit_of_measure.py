# coding: utf-8




import pprint
import re  # noqa: F401

import six


class ProxyModifyUnitOfMeasure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'decimal_places': 'int',
        'displayed_as': 'str',
        'rounding_mode': 'str',
        'uom_name': 'str'
    }

    attribute_map = {
        'active': 'Active',
        'decimal_places': 'DecimalPlaces',
        'displayed_as': 'DisplayedAs',
        'rounding_mode': 'RoundingMode',
        'uom_name': 'UomName'
    }

    def __init__(self, active=None, decimal_places=None, displayed_as=None, rounding_mode=None, uom_name=None):  # noqa: E501
        """ProxyModifyUnitOfMeasure - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._decimal_places = None
        self._displayed_as = None
        self._rounding_mode = None
        self._uom_name = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if rounding_mode is not None:
            self.rounding_mode = rounding_mode
        if uom_name is not None:
            self.uom_name = uom_name

    @property
    def active(self):
        """Gets the active of this ProxyModifyUnitOfMeasure.  # noqa: E501

         Indicates if the UOM is available for new product rate plans. The default value is `true`. **Character limit**: 5 **Values**: `true`, `false `   # noqa: E501

        :return: The active of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProxyModifyUnitOfMeasure.

         Indicates if the UOM is available for new product rate plans. The default value is `true`. **Character limit**: 5 **Values**: `true`, `false `   # noqa: E501

        :param active: The active of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def decimal_places(self):
        """Gets the decimal_places of this ProxyModifyUnitOfMeasure.  # noqa: E501

        The number of digits to the right of the decimal point that you want to measure for the unit. To use whole numbers only, set this value to 0. You can't change this value after this `UOM` is used in any product, subscription, or usage. **Character limit**: 1 **Values**: an integer between 0 and 9, exclusive   # noqa: E501

        :return: The decimal_places of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this ProxyModifyUnitOfMeasure.

        The number of digits to the right of the decimal point that you want to measure for the unit. To use whole numbers only, set this value to 0. You can't change this value after this `UOM` is used in any product, subscription, or usage. **Character limit**: 1 **Values**: an integer between 0 and 9, exclusive   # noqa: E501

        :param decimal_places: The decimal_places of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :type: int
        """

        self._decimal_places = decimal_places

    @property
    def displayed_as(self):
        """Gets the displayed_as of this ProxyModifyUnitOfMeasure.  # noqa: E501

        The name of the UOM that you want displayed on invoices. The default value is the `UomName` field value. **Character limit**: 50 **Values**: A string of 50 characters or fewer   # noqa: E501

        :return: The displayed_as of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this ProxyModifyUnitOfMeasure.

        The name of the UOM that you want displayed on invoices. The default value is the `UomName` field value. **Character limit**: 50 **Values**: A string of 50 characters or fewer   # noqa: E501

        :param displayed_as: The displayed_as of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def rounding_mode(self):
        """Gets the rounding_mode of this ProxyModifyUnitOfMeasure.  # noqa: E501

         Specifies whether to round the UOM value up or down when the value exceeds the `DecimalPlaces` field value. The default value is `Up`. **Character limit**: 4 **Values**: `Up`, `Down`   # noqa: E501

        :return: The rounding_mode of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :rtype: str
        """
        return self._rounding_mode

    @rounding_mode.setter
    def rounding_mode(self, rounding_mode):
        """Sets the rounding_mode of this ProxyModifyUnitOfMeasure.

         Specifies whether to round the UOM value up or down when the value exceeds the `DecimalPlaces` field value. The default value is `Up`. **Character limit**: 4 **Values**: `Up`, `Down`   # noqa: E501

        :param rounding_mode: The rounding_mode of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :type: str
        """

        self._rounding_mode = rounding_mode

    @property
    def uom_name(self):
        """Gets the uom_name of this ProxyModifyUnitOfMeasure.  # noqa: E501

         The name of the UOM, such as license or GB. This name is displayed in query results and in the web-based UI labels. If you want a different name to be displayed on invoices, then use the `DisplayedAs` field to provide the invoice label. **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :return: The uom_name of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :rtype: str
        """
        return self._uom_name

    @uom_name.setter
    def uom_name(self, uom_name):
        """Sets the uom_name of this ProxyModifyUnitOfMeasure.

         The name of the UOM, such as license or GB. This name is displayed in query results and in the web-based UI labels. If you want a different name to be displayed on invoices, then use the `DisplayedAs` field to provide the invoice label. **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :param uom_name: The uom_name of this ProxyModifyUnitOfMeasure.  # noqa: E501
        :type: str
        """

        self._uom_name = uom_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyModifyUnitOfMeasure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyModifyUnitOfMeasure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
