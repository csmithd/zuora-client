# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.create_payment_method_cardholder_info import CreatePaymentMethodCardholderInfo  # noqa: F401,E501
from zuora_client.models.create_payment_method_common import CreatePaymentMethodCommon  # noqa: F401,E501
from zuora_client.models.create_payment_method_credit_card import CreatePaymentMethodCreditCard  # noqa: F401,E501
from zuora_client.models.create_payment_method_pay_pal_adaptive import CreatePaymentMethodPayPalAdaptive  # noqa: F401,E501
from zuora_client.models.create_pm_pay_pal_ec_pay_pal_native_ec import CreatePMPayPalECPayPalNativeEC  # noqa: F401,E501
from zuora_client.models.payment_method_object_custom_fields import PaymentMethodObjectCustomFields  # noqa: F401,E501


class POSTPaymentMethodRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baid': 'str',
        'email': 'str',
        'preapproval_key': 'str',
        'card_holder_info': 'CreatePaymentMethodCardholderInfo',
        'card_number': 'str',
        'card_type': 'str',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'mit_consent_agreement_ref': 'str',
        'mit_consent_agreement_src': 'str',
        'mit_network_transaction_id': 'str',
        'mit_profile_action': 'str',
        'mit_profile_type': 'str',
        'security_code': 'str',
        'account_key': 'str',
        'auth_gateway': 'str',
        'make_default': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'baid': 'BAID',
        'email': 'email',
        'preapproval_key': 'preapprovalKey',
        'card_holder_info': 'cardHolderInfo',
        'card_number': 'cardNumber',
        'card_type': 'cardType',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'mit_consent_agreement_ref': 'mitConsentAgreementRef',
        'mit_consent_agreement_src': 'mitConsentAgreementSrc',
        'mit_network_transaction_id': 'mitNetworkTransactionId',
        'mit_profile_action': 'mitProfileAction',
        'mit_profile_type': 'mitProfileType',
        'security_code': 'securityCode',
        'account_key': 'accountKey',
        'auth_gateway': 'authGateway',
        'make_default': 'makeDefault',
        'type': 'type'
    }

    def __init__(self, baid=None, email=None, preapproval_key=None, card_holder_info=None, card_number=None, card_type=None, expiration_month=None, expiration_year=None, mit_consent_agreement_ref=None, mit_consent_agreement_src=None, mit_network_transaction_id=None, mit_profile_action=None, mit_profile_type=None, security_code=None, account_key=None, auth_gateway=None, make_default=False, type=None):  # noqa: E501
        """POSTPaymentMethodRequest - a model defined in Swagger"""  # noqa: E501

        self._baid = None
        self._email = None
        self._preapproval_key = None
        self._card_holder_info = None
        self._card_number = None
        self._card_type = None
        self._expiration_month = None
        self._expiration_year = None
        self._mit_consent_agreement_ref = None
        self._mit_consent_agreement_src = None
        self._mit_network_transaction_id = None
        self._mit_profile_action = None
        self._mit_profile_type = None
        self._security_code = None
        self._account_key = None
        self._auth_gateway = None
        self._make_default = None
        self._type = None
        self.discriminator = None

        if baid is not None:
            self.baid = baid
        if email is not None:
            self.email = email
        if preapproval_key is not None:
            self.preapproval_key = preapproval_key
        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        if card_number is not None:
            self.card_number = card_number
        if card_type is not None:
            self.card_type = card_type
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if mit_consent_agreement_ref is not None:
            self.mit_consent_agreement_ref = mit_consent_agreement_ref
        if mit_consent_agreement_src is not None:
            self.mit_consent_agreement_src = mit_consent_agreement_src
        if mit_network_transaction_id is not None:
            self.mit_network_transaction_id = mit_network_transaction_id
        if mit_profile_action is not None:
            self.mit_profile_action = mit_profile_action
        if mit_profile_type is not None:
            self.mit_profile_type = mit_profile_type
        if security_code is not None:
            self.security_code = security_code
        if account_key is not None:
            self.account_key = account_key
        if auth_gateway is not None:
            self.auth_gateway = auth_gateway
        if make_default is not None:
            self.make_default = make_default
        self.type = type

    @property
    def baid(self):
        """Gets the baid of this POSTPaymentMethodRequest.  # noqa: E501

        ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.   # noqa: E501

        :return: The baid of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._baid

    @baid.setter
    def baid(self, baid):
        """Sets the baid of this POSTPaymentMethodRequest.

        ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.   # noqa: E501

        :param baid: The baid of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._baid = baid

    @property
    def email(self):
        """Gets the email of this POSTPaymentMethodRequest.  # noqa: E501

        Email address associated with the payment method. This field is required if you want to create a PayPal Express Checkout payment method or a PayPal Adaptive payment method.   # noqa: E501

        :return: The email of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this POSTPaymentMethodRequest.

        Email address associated with the payment method. This field is required if you want to create a PayPal Express Checkout payment method or a PayPal Adaptive payment method.   # noqa: E501

        :param email: The email of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def preapproval_key(self):
        """Gets the preapproval_key of this POSTPaymentMethodRequest.  # noqa: E501

        The PayPal preapproval key.   # noqa: E501

        :return: The preapproval_key of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._preapproval_key

    @preapproval_key.setter
    def preapproval_key(self, preapproval_key):
        """Sets the preapproval_key of this POSTPaymentMethodRequest.

        The PayPal preapproval key.   # noqa: E501

        :param preapproval_key: The preapproval_key of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._preapproval_key = preapproval_key

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this POSTPaymentMethodRequest.  # noqa: E501


        :return: The card_holder_info of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: CreatePaymentMethodCardholderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this POSTPaymentMethodRequest.


        :param card_holder_info: The card_holder_info of this POSTPaymentMethodRequest.  # noqa: E501
        :type: CreatePaymentMethodCardholderInfo
        """

        self._card_holder_info = card_holder_info

    @property
    def card_number(self):
        """Gets the card_number of this POSTPaymentMethodRequest.  # noqa: E501

        Credit card number.   # noqa: E501

        :return: The card_number of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this POSTPaymentMethodRequest.

        Credit card number.   # noqa: E501

        :param card_number: The card_number of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this POSTPaymentMethodRequest.  # noqa: E501

        The type of the credit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The card_type of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this POSTPaymentMethodRequest.

        The type of the credit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param card_type: The card_type of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def expiration_month(self):
        """Gets the expiration_month of this POSTPaymentMethodRequest.  # noqa: E501

        One or two digit expiration month (1-12) of the credit card.   # noqa: E501

        :return: The expiration_month of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this POSTPaymentMethodRequest.

        One or two digit expiration month (1-12) of the credit card.   # noqa: E501

        :param expiration_month: The expiration_month of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this POSTPaymentMethodRequest.  # noqa: E501

        Four-digit expiration year of the credit card.   # noqa: E501

        :return: The expiration_year of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this POSTPaymentMethodRequest.

        Four-digit expiration year of the credit card.   # noqa: E501

        :param expiration_year: The expiration_year of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._expiration_year = expiration_year

    @property
    def mit_consent_agreement_ref(self):
        """Gets the mit_consent_agreement_ref of this POSTPaymentMethodRequest.  # noqa: E501

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_consent_agreement_ref of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._mit_consent_agreement_ref

    @mit_consent_agreement_ref.setter
    def mit_consent_agreement_ref(self, mit_consent_agreement_ref):
        """Sets the mit_consent_agreement_ref of this POSTPaymentMethodRequest.

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_consent_agreement_ref: The mit_consent_agreement_ref of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """
        if mit_consent_agreement_ref is not None and len(mit_consent_agreement_ref) > 128:
            raise ValueError("Invalid value for `mit_consent_agreement_ref`, length must be less than or equal to `128`")  # noqa: E501

        self._mit_consent_agreement_ref = mit_consent_agreement_ref

    @property
    def mit_consent_agreement_src(self):
        """Gets the mit_consent_agreement_src of this POSTPaymentMethodRequest.  # noqa: E501

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_consent_agreement_src of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._mit_consent_agreement_src

    @mit_consent_agreement_src.setter
    def mit_consent_agreement_src(self, mit_consent_agreement_src):
        """Sets the mit_consent_agreement_src of this POSTPaymentMethodRequest.

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_consent_agreement_src: The mit_consent_agreement_src of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["External"]  # noqa: E501
        if mit_consent_agreement_src not in allowed_values:
            raise ValueError(
                "Invalid value for `mit_consent_agreement_src` ({0}), must be one of {1}"  # noqa: E501
                .format(mit_consent_agreement_src, allowed_values)
            )

        self._mit_consent_agreement_src = mit_consent_agreement_src

    @property
    def mit_network_transaction_id(self):
        """Gets the mit_network_transaction_id of this POSTPaymentMethodRequest.  # noqa: E501

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :return: The mit_network_transaction_id of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._mit_network_transaction_id

    @mit_network_transaction_id.setter
    def mit_network_transaction_id(self, mit_network_transaction_id):
        """Sets the mit_network_transaction_id of this POSTPaymentMethodRequest.

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :param mit_network_transaction_id: The mit_network_transaction_id of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """
        if mit_network_transaction_id is not None and len(mit_network_transaction_id) > 128:
            raise ValueError("Invalid value for `mit_network_transaction_id`, length must be less than or equal to `128`")  # noqa: E501

        self._mit_network_transaction_id = mit_network_transaction_id

    @property
    def mit_profile_action(self):
        """Gets the mit_profile_action of this POSTPaymentMethodRequest.  # noqa: E501

        If you set this field, Zuora creates a stored credential profile within the payment method.  **Note:** This feature is in **Limited Availability**. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.  * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.    Zuora will create the stored credential profile then send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.   * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.   # noqa: E501

        :return: The mit_profile_action of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._mit_profile_action

    @mit_profile_action.setter
    def mit_profile_action(self, mit_profile_action):
        """Sets the mit_profile_action of this POSTPaymentMethodRequest.

        If you set this field, Zuora creates a stored credential profile within the payment method.  **Note:** This feature is in **Limited Availability**. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.  * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.    Zuora will create the stored credential profile then send a customer-initiated transaction (CIT) to the payment gateway to valdiate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.   * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.   # noqa: E501

        :param mit_profile_action: The mit_profile_action of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Activate", "Persist"]  # noqa: E501
        if mit_profile_action not in allowed_values:
            raise ValueError(
                "Invalid value for `mit_profile_action` ({0}), must be one of {1}"  # noqa: E501
                .format(mit_profile_action, allowed_values)
            )

        self._mit_profile_action = mit_profile_action

    @property
    def mit_profile_type(self):
        """Gets the mit_profile_type of this POSTPaymentMethodRequest.  # noqa: E501

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_profile_type of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._mit_profile_type

    @mit_profile_type.setter
    def mit_profile_type(self, mit_profile_type):
        """Sets the mit_profile_type of this POSTPaymentMethodRequest.

        Required if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_profile_type: The mit_profile_type of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Recurring"]  # noqa: E501
        if mit_profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mit_profile_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mit_profile_type, allowed_values)
            )

        self._mit_profile_type = mit_profile_type

    @property
    def security_code(self):
        """Gets the security_code of this POSTPaymentMethodRequest.  # noqa: E501

        CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried.   # noqa: E501

        :return: The security_code of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this POSTPaymentMethodRequest.

        CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried.   # noqa: E501

        :param security_code: The security_code of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def account_key(self):
        """Gets the account_key of this POSTPaymentMethodRequest.  # noqa: E501

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :return: The account_key of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this POSTPaymentMethodRequest.

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :param account_key: The account_key of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._account_key = account_key

    @property
    def auth_gateway(self):
        """Gets the auth_gateway of this POSTPaymentMethodRequest.  # noqa: E501

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :return: The auth_gateway of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._auth_gateway

    @auth_gateway.setter
    def auth_gateway(self, auth_gateway):
        """Sets the auth_gateway of this POSTPaymentMethodRequest.

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :param auth_gateway: The auth_gateway of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """

        self._auth_gateway = auth_gateway

    @property
    def make_default(self):
        """Gets the make_default of this POSTPaymentMethodRequest.  # noqa: E501

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :return: The make_default of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this POSTPaymentMethodRequest.

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :param make_default: The make_default of this POSTPaymentMethodRequest.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    @property
    def type(self):
        """Gets the type of this POSTPaymentMethodRequest.  # noqa: E501

        Type of payment method. The following types of the payment method are supported:  * `PayPalEC` - PayPal Express Checkout payment method. Use this type if you are using a [PayPal Payflow Pro Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Payflow_Pro%2C_Website_Payments_Payflow_Edition%2C_Website_Pro_Payment_Gateway) instance. * `PayPalNativeEC` - PayPal Native Express Checkout payment method. Use this type if you are using a [PayPal Express Checkout Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Express_Checkout_Gateway) instance. * `PayPalAdaptive` - PayPal Adaptive payment method. Use this type if you are using a [PayPal Adaptive Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Adaptive_Payments_Gateway) instance. * `CreditCard` - Credit card payment method.   # noqa: E501

        :return: The type of this POSTPaymentMethodRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this POSTPaymentMethodRequest.

        Type of payment method. The following types of the payment method are supported:  * `PayPalEC` - PayPal Express Checkout payment method. Use this type if you are using a [PayPal Payflow Pro Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Payflow_Pro%2C_Website_Payments_Payflow_Edition%2C_Website_Pro_Payment_Gateway) instance. * `PayPalNativeEC` - PayPal Native Express Checkout payment method. Use this type if you are using a [PayPal Express Checkout Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Express_Checkout_Gateway) instance. * `PayPalAdaptive` - PayPal Adaptive payment method. Use this type if you are using a [PayPal Adaptive Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Adaptive_Payments_Gateway) instance. * `CreditCard` - Credit card payment method.   # noqa: E501

        :param type: The type of this POSTPaymentMethodRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["PayPalEC", "PayPalNativeEC", "PayPalAdaptive", "CreditCard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTPaymentMethodRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTPaymentMethodRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
