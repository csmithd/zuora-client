# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.subscribe_request_subscribe_options_electronic_payment_options import SubscribeRequestSubscribeOptionsElectronicPaymentOptions  # noqa: F401,E501
from zuora_client.models.subscribe_request_subscribe_options_external_payment_options import SubscribeRequestSubscribeOptionsExternalPaymentOptions  # noqa: F401,E501
from zuora_client.models.subscribe_request_subscribe_options_subscribe_invoice_processing_options import SubscribeRequestSubscribeOptionsSubscribeInvoiceProcessingOptions  # noqa: F401,E501


class SubscribeRequestSubscribeOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_credit_balance': 'bool',
        'electronic_payment_options': 'SubscribeRequestSubscribeOptionsElectronicPaymentOptions',
        'external_payment_options': 'SubscribeRequestSubscribeOptionsExternalPaymentOptions',
        'generate_invoice': 'bool',
        'process_payments': 'bool',
        'subscribe_invoice_processing_options': 'SubscribeRequestSubscribeOptionsSubscribeInvoiceProcessingOptions'
    }

    attribute_map = {
        'apply_credit_balance': 'ApplyCreditBalance',
        'electronic_payment_options': 'ElectronicPaymentOptions',
        'external_payment_options': 'ExternalPaymentOptions',
        'generate_invoice': 'GenerateInvoice',
        'process_payments': 'ProcessPayments',
        'subscribe_invoice_processing_options': 'SubscribeInvoiceProcessingOptions'
    }

    def __init__(self, apply_credit_balance=None, electronic_payment_options=None, external_payment_options=None, generate_invoice=None, process_payments=None, subscribe_invoice_processing_options=None):  # noqa: E501
        """SubscribeRequestSubscribeOptions - a model defined in Swagger"""  # noqa: E501

        self._apply_credit_balance = None
        self._electronic_payment_options = None
        self._external_payment_options = None
        self._generate_invoice = None
        self._process_payments = None
        self._subscribe_invoice_processing_options = None
        self.discriminator = None

        if apply_credit_balance is not None:
            self.apply_credit_balance = apply_credit_balance
        if electronic_payment_options is not None:
            self.electronic_payment_options = electronic_payment_options
        if external_payment_options is not None:
            self.external_payment_options = external_payment_options
        self.generate_invoice = generate_invoice
        self.process_payments = process_payments
        if subscribe_invoice_processing_options is not None:
            self.subscribe_invoice_processing_options = subscribe_invoice_processing_options

    @property
    def apply_credit_balance(self):
        """Gets the apply_credit_balance of this SubscribeRequestSubscribeOptions.  # noqa: E501

          # noqa: E501

        :return: The apply_credit_balance of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit_balance

    @apply_credit_balance.setter
    def apply_credit_balance(self, apply_credit_balance):
        """Sets the apply_credit_balance of this SubscribeRequestSubscribeOptions.

          # noqa: E501

        :param apply_credit_balance: The apply_credit_balance of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :type: bool
        """

        self._apply_credit_balance = apply_credit_balance

    @property
    def electronic_payment_options(self):
        """Gets the electronic_payment_options of this SubscribeRequestSubscribeOptions.  # noqa: E501


        :return: The electronic_payment_options of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :rtype: SubscribeRequestSubscribeOptionsElectronicPaymentOptions
        """
        return self._electronic_payment_options

    @electronic_payment_options.setter
    def electronic_payment_options(self, electronic_payment_options):
        """Sets the electronic_payment_options of this SubscribeRequestSubscribeOptions.


        :param electronic_payment_options: The electronic_payment_options of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :type: SubscribeRequestSubscribeOptionsElectronicPaymentOptions
        """

        self._electronic_payment_options = electronic_payment_options

    @property
    def external_payment_options(self):
        """Gets the external_payment_options of this SubscribeRequestSubscribeOptions.  # noqa: E501


        :return: The external_payment_options of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :rtype: SubscribeRequestSubscribeOptionsExternalPaymentOptions
        """
        return self._external_payment_options

    @external_payment_options.setter
    def external_payment_options(self, external_payment_options):
        """Sets the external_payment_options of this SubscribeRequestSubscribeOptions.


        :param external_payment_options: The external_payment_options of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :type: SubscribeRequestSubscribeOptionsExternalPaymentOptions
        """

        self._external_payment_options = external_payment_options

    @property
    def generate_invoice(self):
        """Gets the generate_invoice of this SubscribeRequestSubscribeOptions.  # noqa: E501

          # noqa: E501

        :return: The generate_invoice of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :rtype: bool
        """
        return self._generate_invoice

    @generate_invoice.setter
    def generate_invoice(self, generate_invoice):
        """Sets the generate_invoice of this SubscribeRequestSubscribeOptions.

          # noqa: E501

        :param generate_invoice: The generate_invoice of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :type: bool
        """
        if generate_invoice is None:
            raise ValueError("Invalid value for `generate_invoice`, must not be `None`")  # noqa: E501

        self._generate_invoice = generate_invoice

    @property
    def process_payments(self):
        """Gets the process_payments of this SubscribeRequestSubscribeOptions.  # noqa: E501

          # noqa: E501

        :return: The process_payments of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :rtype: bool
        """
        return self._process_payments

    @process_payments.setter
    def process_payments(self, process_payments):
        """Sets the process_payments of this SubscribeRequestSubscribeOptions.

          # noqa: E501

        :param process_payments: The process_payments of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :type: bool
        """
        if process_payments is None:
            raise ValueError("Invalid value for `process_payments`, must not be `None`")  # noqa: E501

        self._process_payments = process_payments

    @property
    def subscribe_invoice_processing_options(self):
        """Gets the subscribe_invoice_processing_options of this SubscribeRequestSubscribeOptions.  # noqa: E501


        :return: The subscribe_invoice_processing_options of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :rtype: SubscribeRequestSubscribeOptionsSubscribeInvoiceProcessingOptions
        """
        return self._subscribe_invoice_processing_options

    @subscribe_invoice_processing_options.setter
    def subscribe_invoice_processing_options(self, subscribe_invoice_processing_options):
        """Sets the subscribe_invoice_processing_options of this SubscribeRequestSubscribeOptions.


        :param subscribe_invoice_processing_options: The subscribe_invoice_processing_options of this SubscribeRequestSubscribeOptions.  # noqa: E501
        :type: SubscribeRequestSubscribeOptionsSubscribeInvoiceProcessingOptions
        """

        self._subscribe_invoice_processing_options = subscribe_invoice_processing_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscribeRequestSubscribeOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscribeRequestSubscribeOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
