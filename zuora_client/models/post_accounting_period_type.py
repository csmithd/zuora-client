# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.accounting_period_object_custom_fields import AccountingPeriodObjectCustomFields  # noqa: F401,E501


class POSTAccountingPeriodType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'date',
        'fiscal_year': 'str',
        'fiscal_quarter': 'int',
        'name': 'str',
        'notes': 'str',
        'start_date': 'date'
    }

    attribute_map = {
        'end_date': 'endDate',
        'fiscal_year': 'fiscalYear',
        'fiscal_quarter': 'fiscal_quarter',
        'name': 'name',
        'notes': 'notes',
        'start_date': 'startDate'
    }

    def __init__(self, end_date=None, fiscal_year=None, fiscal_quarter=None, name=None, notes=None, start_date=None):  # noqa: E501
        """POSTAccountingPeriodType - a model defined in Swagger"""  # noqa: E501

        self._end_date = None
        self._fiscal_year = None
        self._fiscal_quarter = None
        self._name = None
        self._notes = None
        self._start_date = None
        self.discriminator = None

        self.end_date = end_date
        self.fiscal_year = fiscal_year
        if fiscal_quarter is not None:
            self.fiscal_quarter = fiscal_quarter
        self.name = name
        if notes is not None:
            self.notes = notes
        self.start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this POSTAccountingPeriodType.  # noqa: E501

        The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".   # noqa: E501

        :return: The end_date of this POSTAccountingPeriodType.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this POSTAccountingPeriodType.

        The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".   # noqa: E501

        :param end_date: The end_date of this POSTAccountingPeriodType.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def fiscal_year(self):
        """Gets the fiscal_year of this POSTAccountingPeriodType.  # noqa: E501

        Fiscal year of the accounting period in yyyy format, for example, \"2016\".   # noqa: E501

        :return: The fiscal_year of this POSTAccountingPeriodType.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_year

    @fiscal_year.setter
    def fiscal_year(self, fiscal_year):
        """Sets the fiscal_year of this POSTAccountingPeriodType.

        Fiscal year of the accounting period in yyyy format, for example, \"2016\".   # noqa: E501

        :param fiscal_year: The fiscal_year of this POSTAccountingPeriodType.  # noqa: E501
        :type: str
        """
        if fiscal_year is None:
            raise ValueError("Invalid value for `fiscal_year`, must not be `None`")  # noqa: E501

        self._fiscal_year = fiscal_year

    @property
    def fiscal_quarter(self):
        """Gets the fiscal_quarter of this POSTAccountingPeriodType.  # noqa: E501

          # noqa: E501

        :return: The fiscal_quarter of this POSTAccountingPeriodType.  # noqa: E501
        :rtype: int
        """
        return self._fiscal_quarter

    @fiscal_quarter.setter
    def fiscal_quarter(self, fiscal_quarter):
        """Sets the fiscal_quarter of this POSTAccountingPeriodType.

          # noqa: E501

        :param fiscal_quarter: The fiscal_quarter of this POSTAccountingPeriodType.  # noqa: E501
        :type: int
        """

        self._fiscal_quarter = fiscal_quarter

    @property
    def name(self):
        """Gets the name of this POSTAccountingPeriodType.  # noqa: E501

        Name of the accounting period.  Accounting period name must be unique. Maximum of 100 characters.   # noqa: E501

        :return: The name of this POSTAccountingPeriodType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this POSTAccountingPeriodType.

        Name of the accounting period.  Accounting period name must be unique. Maximum of 100 characters.   # noqa: E501

        :param name: The name of this POSTAccountingPeriodType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this POSTAccountingPeriodType.  # noqa: E501

        Notes about the accounting period.  Maximum of 255 characters.   # noqa: E501

        :return: The notes of this POSTAccountingPeriodType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this POSTAccountingPeriodType.

        Notes about the accounting period.  Maximum of 255 characters.   # noqa: E501

        :param notes: The notes of this POSTAccountingPeriodType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def start_date(self):
        """Gets the start_date of this POSTAccountingPeriodType.  # noqa: E501

        The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".   # noqa: E501

        :return: The start_date of this POSTAccountingPeriodType.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this POSTAccountingPeriodType.

        The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\".   # noqa: E501

        :param start_date: The start_date of this POSTAccountingPeriodType.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTAccountingPeriodType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTAccountingPeriodType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
