# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.post_distribution_item_type import POSTDistributionItemType  # noqa: F401,E501
from zuora_client.models.post_revenue_schedule_by_charge_type_revenue_event import POSTRevenueScheduleByChargeTypeRevenueEvent  # noqa: F401,E501
from zuora_client.models.revenue_schedule_object_custom_fields import RevenueScheduleObjectCustomFields  # noqa: F401,E501


class POSTRevenueScheduleByChargeType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'deferred_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code_type': 'str',
        'notes': 'str',
        'override_charge_accounting_codes': 'bool',
        'recognized_revenue_accounting_code': 'str',
        'recognized_revenue_accounting_code_type': 'str',
        'reference_id': 'str',
        'revenue_distributions': 'list[POSTDistributionItemType]',
        'revenue_event': 'POSTRevenueScheduleByChargeTypeRevenueEvent',
        'revenue_schedule_date': 'date'
    }

    attribute_map = {
        'amount': 'amount',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'deferred_revenue_accounting_code_type': 'deferredRevenueAccountingCodeType',
        'notes': 'notes',
        'override_charge_accounting_codes': 'overrideChargeAccountingCodes',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'recognized_revenue_accounting_code_type': 'recognizedRevenueAccountingCodeType',
        'reference_id': 'referenceId',
        'revenue_distributions': 'revenueDistributions',
        'revenue_event': 'revenueEvent',
        'revenue_schedule_date': 'revenueScheduleDate'
    }

    def __init__(self, amount=None, deferred_revenue_accounting_code=None, deferred_revenue_accounting_code_type=None, notes=None, override_charge_accounting_codes=False, recognized_revenue_accounting_code=None, recognized_revenue_accounting_code_type=None, reference_id=None, revenue_distributions=None, revenue_event=None, revenue_schedule_date=None):  # noqa: E501
        """POSTRevenueScheduleByChargeType - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._deferred_revenue_accounting_code = None
        self._deferred_revenue_accounting_code_type = None
        self._notes = None
        self._override_charge_accounting_codes = None
        self._recognized_revenue_accounting_code = None
        self._recognized_revenue_accounting_code_type = None
        self._reference_id = None
        self._revenue_distributions = None
        self._revenue_event = None
        self._revenue_schedule_date = None
        self.discriminator = None

        self.amount = amount
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if deferred_revenue_accounting_code_type is not None:
            self.deferred_revenue_accounting_code_type = deferred_revenue_accounting_code_type
        if notes is not None:
            self.notes = notes
        if override_charge_accounting_codes is not None:
            self.override_charge_accounting_codes = override_charge_accounting_codes
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if recognized_revenue_accounting_code_type is not None:
            self.recognized_revenue_accounting_code_type = recognized_revenue_accounting_code_type
        if reference_id is not None:
            self.reference_id = reference_id
        if revenue_distributions is not None:
            self.revenue_distributions = revenue_distributions
        if revenue_event is not None:
            self.revenue_event = revenue_event
        self.revenue_schedule_date = revenue_schedule_date

    @property
    def amount(self):
        """Gets the amount of this POSTRevenueScheduleByChargeType.  # noqa: E501

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`   # noqa: E501

        :return: The amount of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this POSTRevenueScheduleByChargeType.

        The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`   # noqa: E501

        :param amount: The amount of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this POSTRevenueScheduleByChargeType.  # noqa: E501

        The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :return: The deferred_revenue_accounting_code of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this POSTRevenueScheduleByChargeType.

        The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code_type(self):
        """Gets the deferred_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.  # noqa: E501

        The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :return: The deferred_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code_type

    @deferred_revenue_accounting_code_type.setter
    def deferred_revenue_accounting_code_type(self, deferred_revenue_accounting_code_type):
        """Sets the deferred_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.

        The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :param deferred_revenue_accounting_code_type: The deferred_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code_type = deferred_revenue_accounting_code_type

    @property
    def notes(self):
        """Gets the notes of this POSTRevenueScheduleByChargeType.  # noqa: E501

        Additional information about this record.  Character Limit: 2,000   # noqa: E501

        :return: The notes of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this POSTRevenueScheduleByChargeType.

        Additional information about this record.  Character Limit: 2,000   # noqa: E501

        :param notes: The notes of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def override_charge_accounting_codes(self):
        """Gets the override_charge_accounting_codes of this POSTRevenueScheduleByChargeType.  # noqa: E501

        When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have the empty value.   # noqa: E501

        :return: The override_charge_accounting_codes of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: bool
        """
        return self._override_charge_accounting_codes

    @override_charge_accounting_codes.setter
    def override_charge_accounting_codes(self, override_charge_accounting_codes):
        """Sets the override_charge_accounting_codes of this POSTRevenueScheduleByChargeType.

        When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have the empty value.   # noqa: E501

        :param override_charge_accounting_codes: The override_charge_accounting_codes of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: bool
        """

        self._override_charge_accounting_codes = override_charge_accounting_codes

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this POSTRevenueScheduleByChargeType.  # noqa: E501

        The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.   # noqa: E501

        :return: The recognized_revenue_accounting_code of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this POSTRevenueScheduleByChargeType.

        The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def recognized_revenue_accounting_code_type(self):
        """Gets the recognized_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.  # noqa: E501

        The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :return: The recognized_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code_type

    @recognized_revenue_accounting_code_type.setter
    def recognized_revenue_accounting_code_type(self, recognized_revenue_accounting_code_type):
        """Sets the recognized_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.

        The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.   # noqa: E501

        :param recognized_revenue_accounting_code_type: The recognized_revenue_accounting_code_type of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code_type = recognized_revenue_accounting_code_type

    @property
    def reference_id(self):
        """Gets the reference_id of this POSTRevenueScheduleByChargeType.  # noqa: E501

        Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.  Character Limit: 60   # noqa: E501

        :return: The reference_id of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this POSTRevenueScheduleByChargeType.

        Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.  Character Limit: 60   # noqa: E501

        :param reference_id: The reference_id of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def revenue_distributions(self):
        """Gets the revenue_distributions of this POSTRevenueScheduleByChargeType.  # noqa: E501

        An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.  The sum of the newAmount fields must be equal to the amount field.   # noqa: E501

        :return: The revenue_distributions of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: list[POSTDistributionItemType]
        """
        return self._revenue_distributions

    @revenue_distributions.setter
    def revenue_distributions(self, revenue_distributions):
        """Sets the revenue_distributions of this POSTRevenueScheduleByChargeType.

        An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.  The sum of the newAmount fields must be equal to the amount field.   # noqa: E501

        :param revenue_distributions: The revenue_distributions of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: list[POSTDistributionItemType]
        """

        self._revenue_distributions = revenue_distributions

    @property
    def revenue_event(self):
        """Gets the revenue_event of this POSTRevenueScheduleByChargeType.  # noqa: E501


        :return: The revenue_event of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: POSTRevenueScheduleByChargeTypeRevenueEvent
        """
        return self._revenue_event

    @revenue_event.setter
    def revenue_event(self, revenue_event):
        """Sets the revenue_event of this POSTRevenueScheduleByChargeType.


        :param revenue_event: The revenue_event of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: POSTRevenueScheduleByChargeTypeRevenueEvent
        """

        self._revenue_event = revenue_event

    @property
    def revenue_schedule_date(self):
        """Gets the revenue_schedule_date of this POSTRevenueScheduleByChargeType.  # noqa: E501

        The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.  The date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.   # noqa: E501

        :return: The revenue_schedule_date of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :rtype: date
        """
        return self._revenue_schedule_date

    @revenue_schedule_date.setter
    def revenue_schedule_date(self, revenue_schedule_date):
        """Sets the revenue_schedule_date of this POSTRevenueScheduleByChargeType.

        The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.  The date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.   # noqa: E501

        :param revenue_schedule_date: The revenue_schedule_date of this POSTRevenueScheduleByChargeType.  # noqa: E501
        :type: date
        """
        if revenue_schedule_date is None:
            raise ValueError("Invalid value for `revenue_schedule_date`, must not be `None`")  # noqa: E501

        self._revenue_schedule_date = revenue_schedule_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTRevenueScheduleByChargeType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTRevenueScheduleByChargeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
