# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.account_object_custom_fields import AccountObjectCustomFields  # noqa: F401,E501
from zuora_client.models.account_object_ns_fields import AccountObjectNSFields  # noqa: F401,E501
from zuora_client.models.post_account_type_bill_to_contact import POSTAccountTypeBillToContact  # noqa: F401,E501
from zuora_client.models.post_account_type_credit_card import POSTAccountTypeCreditCard  # noqa: F401,E501
from zuora_client.models.post_account_type_sold_to_contact import POSTAccountTypeSoldToContact  # noqa: F401,E501
from zuora_client.models.post_account_type_subscription import POSTAccountTypeSubscription  # noqa: F401,E501
from zuora_client.models.post_account_type_tax_info import POSTAccountTypeTaxInfo  # noqa: F401,E501


class POSTAccountType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class__ns': 'str',
        'customer_type__ns': 'str',
        'ADDITIONAL_INFO_OPTIONAL__c': 'str',
        'PlatformID__c': 'str',
        'CustomerType__c': 'str',
        'department__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'location__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'str',
        'account_number': 'str',
        'additional_email_addresses': 'list[str]',
        'apply_credit_balance': 'bool',
        'auto_pay': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'bill_to_contact': 'POSTAccountTypeBillToContact',
        'collect': 'str',
        'communication_profile_id': 'str',
        'credit_card': 'POSTAccountTypeCreditCard',
        'credit_memo_template_id': 'str',
        'crm_id': 'str',
        'currency': 'str',
        'debit_memo_template_id': 'str',
        'document_date': 'date',
        'hpm_credit_card_payment_method_id': 'str',
        'invoice': 'bool',
        'invoice_collect': 'bool',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'invoice_target_date': 'date',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'parent_id': 'str',
        'payment_gateway': 'str',
        'payment_term': 'str',
        'run_billing': 'bool',
        'sales_rep': 'str',
        'sold_to_contact': 'POSTAccountTypeSoldToContact',
        'sold_to_same_as_bill_to': 'bool',
        'subscription': 'POSTAccountTypeSubscription',
        'tagging': 'str',
        'target_date': 'date',
        'tax_info': 'POSTAccountTypeTaxInfo'
    }

    attribute_map = {
        'class__ns': 'Class__NS',
        'customer_type__ns': 'CustomerType__NS',
        'ADDITIONAL_INFO_OPTIONAL__c': 'ADDITIONAL_INFO_OPTIONAL__c',
        'PlatformID__c': 'PlatformID__c',
        'CustomerType__c': 'CustomerType__c',
        'department__ns': 'Department__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'location__ns': 'Location__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS',
        'account_number': 'accountNumber',
        'additional_email_addresses': 'additionalEmailAddresses',
        'apply_credit_balance': 'applyCreditBalance',
        'auto_pay': 'autoPay',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'bill_to_contact': 'billToContact',
        'collect': 'collect',
        'communication_profile_id': 'communicationProfileId',
        'credit_card': 'creditCard',
        'credit_memo_template_id': 'creditMemoTemplateId',
        'crm_id': 'crmId',
        'currency': 'currency',
        'debit_memo_template_id': 'debitMemoTemplateId',
        'document_date': 'documentDate',
        'hpm_credit_card_payment_method_id': 'hpmCreditCardPaymentMethodId',
        'invoice': 'invoice',
        'invoice_collect': 'invoiceCollect',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'invoice_target_date': 'invoiceTargetDate',
        'invoice_template_id': 'invoiceTemplateId',
        'name': 'name',
        'notes': 'notes',
        'parent_id': 'parentId',
        'payment_gateway': 'paymentGateway',
        'payment_term': 'paymentTerm',
        'run_billing': 'runBilling',
        'sales_rep': 'salesRep',
        'sold_to_contact': 'soldToContact',
        'sold_to_same_as_bill_to': 'soldToSameAsBillTo',
        'subscription': 'subscription',
        'tagging': 'tagging',
        'target_date': 'targetDate',
        'tax_info': 'taxInfo'
    }

    def __init__(self, CustomerType__c=None, PlatformID__c=None, ADDITIONAL_INFO_OPTIONAL__c=None, class__ns=None, customer_type__ns=None, department__ns=None, integration_id__ns=None, integration_status__ns=None, location__ns=None, subsidiary__ns=None, sync_date__ns=None, syncto_net_suite__ns=None, account_number=None, additional_email_addresses=None, apply_credit_balance=None, auto_pay=None, batch=None, bill_cycle_day=None, bill_to_contact=None, collect=None, communication_profile_id=None, credit_card=None, credit_memo_template_id=None, crm_id=None, currency=None, debit_memo_template_id=None, document_date=None, hpm_credit_card_payment_method_id=None, invoice=None, invoice_collect=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, invoice_target_date=None, invoice_template_id=None, name=None, notes=None, parent_id=None, payment_gateway=None, payment_term=None, run_billing=True, sales_rep=None, sold_to_contact=None, sold_to_same_as_bill_to=None, subscription=None, tagging=None, target_date=None, tax_info=None):  # noqa: E501
        """POSTAccountType - a model defined in Swagger"""  # noqa: E501

        self._CustomerType__c = None
        self._PlatformID__c = None
        self._ADDITIONAL_INFO_OPTIONAL__c = None
        self._class__ns = None
        self._customer_type__ns = None
        self._department__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._location__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self._account_number = None
        self._additional_email_addresses = None
        self._apply_credit_balance = None
        self._auto_pay = None
        self._batch = None
        self._bill_cycle_day = None
        self._bill_to_contact = None
        self._collect = None
        self._communication_profile_id = None
        self._credit_card = None
        self._credit_memo_template_id = None
        self._crm_id = None
        self._currency = None
        self._debit_memo_template_id = None
        self._document_date = None
        self._hpm_credit_card_payment_method_id = None
        self._invoice = None
        self._invoice_collect = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._invoice_target_date = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._parent_id = None
        self._payment_gateway = None
        self._payment_term = None
        self._run_billing = None
        self._sales_rep = None
        self._sold_to_contact = None
        self._sold_to_same_as_bill_to = None
        self._subscription = None
        self._tagging = None
        self._target_date = None
        self._tax_info = None
        self.discriminator = None

        if CustomerType__c is not None:
            self.CustomerType__c = CustomerType__c
        if PlatformID__c is not None:
            self.PlatformID__c = PlatformID__c
        if ADDITIONAL_INFO_OPTIONAL__c is not None:
            self.ADDITIONAL_INFO_OPTIONAL__c = ADDITIONAL_INFO_OPTIONAL__c
        if class__ns is not None:
            self.class__ns = class__ns
        if customer_type__ns is not None:
            self.customer_type__ns = customer_type__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns
        if account_number is not None:
            self.account_number = account_number
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if apply_credit_balance is not None:
            self.apply_credit_balance = apply_credit_balance
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        self.bill_to_contact = bill_to_contact
        if collect is not None:
            self.collect = collect
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if credit_card is not None:
            self.credit_card = credit_card
        if credit_memo_template_id is not None:
            self.credit_memo_template_id = credit_memo_template_id
        if crm_id is not None:
            self.crm_id = crm_id
        self.currency = currency
        if debit_memo_template_id is not None:
            self.debit_memo_template_id = debit_memo_template_id
        if document_date is not None:
            self.document_date = document_date
        if hpm_credit_card_payment_method_id is not None:
            self.hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id
        if invoice is not None:
            self.invoice = invoice
        if invoice_collect is not None:
            self.invoice_collect = invoice_collect
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if invoice_target_date is not None:
            self.invoice_target_date = invoice_target_date
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        self.name = name
        if notes is not None:
            self.notes = notes
        if parent_id is not None:
            self.parent_id = parent_id
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_term is not None:
            self.payment_term = payment_term
        if run_billing is not None:
            self.run_billing = run_billing
        if sales_rep is not None:
            self.sales_rep = sales_rep
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if sold_to_same_as_bill_to is not None:
            self.sold_to_same_as_bill_to = sold_to_same_as_bill_to
        if subscription is not None:
            self.subscription = subscription
        if tagging is not None:
            self.tagging = tagging
        if target_date is not None:
            self.target_date = target_date
        if tax_info is not None:
            self.tax_info = tax_info

    @property
    def ADDITIONAL_INFO_OPTIONAL__c(self):
        return self._ADDITIONAL_INFO_OPTIONAL__c

    @ADDITIONAL_INFO_OPTIONAL__c.setter
    def ADDITIONAL_INFO_OPTIONAL__c(self, ADDITIONAL_INFO_OPTIONAL__c):
        self._ADDITIONAL_INFO_OPTIONAL__c = ADDITIONAL_INFO_OPTIONAL__c

    @property
    def PlatformID__c(self):
        return self._PlatformID__c

    @PlatformID__c.setter
    def PlatformID__c(self, PlatformID__c):
        self._PlatformID__c = PlatformID__c

    @property
    def CustomerType__c(self):
        return self._CustomerType__c

    @CustomerType__c.setter
    def CustomerType__c(self, CustomerType__c):
        self._CustomerType__c = CustomerType__c

    @property
    def class__ns(self):
        """Gets the class__ns of this POSTAccountType.  # noqa: E501

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this POSTAccountType.

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if class__ns is not None and len(class__ns) > 255:
            raise ValueError("Invalid value for `class__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._class__ns = class__ns

    @property
    def customer_type__ns(self):
        """Gets the customer_type__ns of this POSTAccountType.  # noqa: E501

        Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The customer_type__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._customer_type__ns

    @customer_type__ns.setter
    def customer_type__ns(self, customer_type__ns):
        """Sets the customer_type__ns of this POSTAccountType.

        Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param customer_type__ns: The customer_type__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Company", "Individual"]  # noqa: E501
        if customer_type__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type__ns, allowed_values)
            )

        self._customer_type__ns = customer_type__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this POSTAccountType.  # noqa: E501

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this POSTAccountType.

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if department__ns is not None and len(department__ns) > 255:
            raise ValueError("Invalid value for `department__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._department__ns = department__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this POSTAccountType.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this POSTAccountType.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this POSTAccountType.  # noqa: E501

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this POSTAccountType.

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this POSTAccountType.  # noqa: E501

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this POSTAccountType.

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if location__ns is not None and len(location__ns) > 255:
            raise ValueError("Invalid value for `location__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._location__ns = location__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this POSTAccountType.  # noqa: E501

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this POSTAccountType.

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if subsidiary__ns is not None and len(subsidiary__ns) > 255:
            raise ValueError("Invalid value for `subsidiary__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this POSTAccountType.  # noqa: E501

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this POSTAccountType.

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this POSTAccountType.  # noqa: E501

        Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The syncto_net_suite__ns of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this POSTAccountType.

        Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param syncto_net_suite__ns: The syncto_net_suite__ns of this POSTAccountType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if syncto_net_suite__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `syncto_net_suite__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(syncto_net_suite__ns, allowed_values)
            )

        self._syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_number(self):
        """Gets the account_number of this POSTAccountType.  # noqa: E501

        A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.   # noqa: E501

        :return: The account_number of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this POSTAccountType.

        A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.   # noqa: E501

        :param account_number: The account_number of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this POSTAccountType.  # noqa: E501

        A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.  **Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.   # noqa: E501

        :return: The additional_email_addresses of this POSTAccountType.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this POSTAccountType.

        A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.  **Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this POSTAccountType.  # noqa: E501
        :type: list[str]
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def apply_credit_balance(self):
        """Gets the apply_credit_balance of this POSTAccountType.  # noqa: E501

        Applies a credit balance to an invoice.  If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.  Prerequisite: `invoice` must be `true`.  To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.   **Note:**    - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.   - This field is deprecated if you have the Invoice Settlement feature enabled.    # noqa: E501

        :return: The apply_credit_balance of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit_balance

    @apply_credit_balance.setter
    def apply_credit_balance(self, apply_credit_balance):
        """Sets the apply_credit_balance of this POSTAccountType.

        Applies a credit balance to an invoice.  If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.  Prerequisite: `invoice` must be `true`.  To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.   **Note:**    - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.   - This field is deprecated if you have the Invoice Settlement feature enabled.    # noqa: E501

        :param apply_credit_balance: The apply_credit_balance of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._apply_credit_balance = apply_credit_balance

    @property
    def auto_pay(self):
        """Gets the auto_pay of this POSTAccountType.  # noqa: E501

        Whether future payments are to be automatically billed when they are due.   - If this field is set to `true`, you must specify either the `creditCard` field or the `hpmCreditCardPaymentMethodId` field, but not both. - If this field is set to `false`, you can specify neither the `creditCard` field nor the `hpmCreditCardPaymentMethodId` field.   # noqa: E501

        :return: The auto_pay of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this POSTAccountType.

        Whether future payments are to be automatically billed when they are due.   - If this field is set to `true`, you must specify either the `creditCard` field or the `hpmCreditCardPaymentMethodId` field, but not both. - If this field is set to `false`, you can specify neither the `creditCard` field nor the `hpmCreditCardPaymentMethodId` field.   # noqa: E501

        :param auto_pay: The auto_pay of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this POSTAccountType.  # noqa: E501

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :return: The batch of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this POSTAccountType.

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :param batch: The batch of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this POSTAccountType.  # noqa: E501

        The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set.  Required if no subscription will be created.   Optional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.   # noqa: E501

        :return: The bill_cycle_day of this POSTAccountType.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this POSTAccountType.

        The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set.  Required if no subscription will be created.   Optional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this POSTAccountType.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this POSTAccountType.  # noqa: E501


        :return: The bill_to_contact of this POSTAccountType.  # noqa: E501
        :rtype: POSTAccountTypeBillToContact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this POSTAccountType.


        :param bill_to_contact: The bill_to_contact of this POSTAccountType.  # noqa: E501
        :type: POSTAccountTypeBillToContact
        """
        if bill_to_contact is None:
            raise ValueError("Invalid value for `bill_to_contact`, must not be `None`")  # noqa: E501

        self._bill_to_contact = bill_to_contact

    @property
    def collect(self):
        """Gets the collect of this POSTAccountType.  # noqa: E501

        Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.  If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.  The default value is `true`.  Prerequisite: invoice must be `true`.   **Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The collect of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._collect

    @collect.setter
    def collect(self, collect):
        """Sets the collect of this POSTAccountType.

        Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.  If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.  The default value is `true`.  Prerequisite: invoice must be `true`.   **Note:** This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param collect: The collect of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._collect = collect

    @collect.deleter
    def collect(self):
        del self._collect

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this POSTAccountType.  # noqa: E501

        The ID of a communication profile.            # noqa: E501

        :return: The communication_profile_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this POSTAccountType.

        The ID of a communication profile.            # noqa: E501

        :param communication_profile_id: The communication_profile_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def credit_card(self):
        """Gets the credit_card of this POSTAccountType.  # noqa: E501


        :return: The credit_card of this POSTAccountType.  # noqa: E501
        :rtype: POSTAccountTypeCreditCard
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this POSTAccountType.


        :param credit_card: The credit_card of this POSTAccountType.  # noqa: E501
        :type: POSTAccountTypeCreditCard
        """

        self._credit_card = credit_card

    @property
    def credit_memo_template_id(self):
        """Gets the credit_memo_template_id of this POSTAccountType.  # noqa: E501

        **Note**: This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :return: The credit_memo_template_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_template_id

    @credit_memo_template_id.setter
    def credit_memo_template_id(self, credit_memo_template_id):
        """Sets the credit_memo_template_id of this POSTAccountType.

        **Note**: This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :param credit_memo_template_id: The credit_memo_template_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._credit_memo_template_id = credit_memo_template_id

    @property
    def crm_id(self):
        """Gets the crm_id of this POSTAccountType.  # noqa: E501

        CRM account ID for the account, up to 100 characters.   # noqa: E501

        :return: The crm_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this POSTAccountType.

        CRM account ID for the account, up to 100 characters.   # noqa: E501

        :param crm_id: The crm_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def currency(self):
        """Gets the currency of this POSTAccountType.  # noqa: E501

        A currency as defined in Billing Settings in the Zuora UI.   # noqa: E501

        :return: The currency of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this POSTAccountType.

        A currency as defined in Billing Settings in the Zuora UI.   # noqa: E501

        :param currency: The currency of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def debit_memo_template_id(self):
        """Gets the debit_memo_template_id of this POSTAccountType.  # noqa: E501

        **Note**: This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :return: The debit_memo_template_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._debit_memo_template_id

    @debit_memo_template_id.setter
    def debit_memo_template_id(self, debit_memo_template_id):
        """Sets the debit_memo_template_id of this POSTAccountType.

        **Note**: This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :param debit_memo_template_id: The debit_memo_template_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._debit_memo_template_id = debit_memo_template_id

    @property
    def document_date(self):
        """Gets the document_date of this POSTAccountType.  # noqa: E501

        The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.   # noqa: E501

        :return: The document_date of this POSTAccountType.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this POSTAccountType.

        The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.   # noqa: E501

        :param document_date: The document_date of this POSTAccountType.  # noqa: E501
        :type: date
        """

        self._document_date = document_date

    @property
    def hpm_credit_card_payment_method_id(self):
        """Gets the hpm_credit_card_payment_method_id of this POSTAccountType.  # noqa: E501

        The ID of the HPM credit card payment method associated with this account. If the `autoPay` field is set to `true`, you must provide either this field or the `creditCard` field, but not both.  **Note:** Non-credit card payment methods are not supported.   # noqa: E501

        :return: The hpm_credit_card_payment_method_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._hpm_credit_card_payment_method_id

    @hpm_credit_card_payment_method_id.setter
    def hpm_credit_card_payment_method_id(self, hpm_credit_card_payment_method_id):
        """Sets the hpm_credit_card_payment_method_id of this POSTAccountType.

        The ID of the HPM credit card payment method associated with this account. If the `autoPay` field is set to `true`, you must provide either this field or the `creditCard` field, but not both.  **Note:** Non-credit card payment methods are not supported.   # noqa: E501

        :param hpm_credit_card_payment_method_id: The hpm_credit_card_payment_method_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id

    @property
    def invoice(self):
        """Gets the invoice of this POSTAccountType.  # noqa: E501

        **Note:** This field has been replaced by the `runBilling` field. The `invoice` field is only available for backward compatibility.    Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.   If the value is `true`, an invoice is created. If the value is `false`, no action is taken.   The default value is `true`.    This field is in REST API minor version control. To use this field in the method, you can set the `zuora-version` parameter to the minor version number in the request header. Supported minor versions are `196.0` and `207.0`.   # noqa: E501

        :return: The invoice of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this POSTAccountType.

        **Note:** This field has been replaced by the `runBilling` field. The `invoice` field is only available for backward compatibility.    Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.   If the value is `true`, an invoice is created. If the value is `false`, no action is taken.   The default value is `true`.    This field is in REST API minor version control. To use this field in the method, you can set the `zuora-version` parameter to the minor version number in the request header. Supported minor versions are `196.0` and `207.0`.   # noqa: E501

        :param invoice: The invoice of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._invoice = invoice

    @invoice.deleter
    def invoice(self):
        del self._invoice

    @property
    def invoice_collect(self):
        """Gets the invoice_collect of this POSTAccountType.  # noqa: E501

        **Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.  If `true` (default), and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method.  This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.   # noqa: E501

        :return: The invoice_collect of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_collect

    @invoice_collect.setter
    def invoice_collect(self, invoice_collect):
        """Sets the invoice_collect of this POSTAccountType.

        **Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.  If `true` (default), and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method.  This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.   # noqa: E501

        :param invoice_collect: The invoice_collect of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._invoice_collect = invoice_collect

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this POSTAccountType.  # noqa: E501

        Whether the customer wants to receive invoices through email.   The default value is `false`.   # noqa: E501

        :return: The invoice_delivery_prefs_email of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this POSTAccountType.

        Whether the customer wants to receive invoices through email.   The default value is `false`.   # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this POSTAccountType.  # noqa: E501

        Whether the customer wants to receive printed invoices, such as through postal mail.  The default value is `false`.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this POSTAccountType.

        Whether the customer wants to receive printed invoices, such as through postal mail.  The default value is `false`.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def invoice_target_date(self):
        """Gets the invoice_target_date of this POSTAccountType.  # noqa: E501

        **Note:** This field has been replaced by the `targetDate` field. The `invoiceTargetDate` field is only available for backward compatibility.     Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   This field is in REST API minor version control. To use this field in the method, you can set the `zuora-version` parameter to the minor version number in the request header. Supported minor versions are `207.0` and earlier.    # noqa: E501

        :return: The invoice_target_date of this POSTAccountType.  # noqa: E501
        :rtype: date
        """
        return self._invoice_target_date

    @invoice_target_date.setter
    def invoice_target_date(self, invoice_target_date):
        """Sets the invoice_target_date of this POSTAccountType.

        **Note:** This field has been replaced by the `targetDate` field. The `invoiceTargetDate` field is only available for backward compatibility.     Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   This field is in REST API minor version control. To use this field in the method, you can set the `zuora-version` parameter to the minor version number in the request header. Supported minor versions are `207.0` and earlier.    # noqa: E501

        :param invoice_target_date: The invoice_target_date of this POSTAccountType.  # noqa: E501
        :type: date
        """

        self._invoice_target_date = invoice_target_date

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this POSTAccountType.  # noqa: E501

        Invoice template ID, configured in Billing Settings in the Zuora UI.   # noqa: E501

        :return: The invoice_template_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this POSTAccountType.

        Invoice template ID, configured in Billing Settings in the Zuora UI.   # noqa: E501

        :param invoice_template_id: The invoice_template_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this POSTAccountType.  # noqa: E501

        Account name, up to 255 characters.   # noqa: E501

        :return: The name of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this POSTAccountType.

        Account name, up to 255 characters.   # noqa: E501

        :param name: The name of this POSTAccountType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this POSTAccountType.  # noqa: E501

        A string of up to 65,535 characters.  # noqa: E501

        :return: The notes of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this POSTAccountType.

        A string of up to 65,535 characters.  # noqa: E501

        :param notes: The notes of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this POSTAccountType.  # noqa: E501

        Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have customer hierarchy enabled.  # noqa: E501

        :return: The parent_id of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this POSTAccountType.

        Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have customer hierarchy enabled.  # noqa: E501

        :param parent_id: The parent_id of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this POSTAccountType.  # noqa: E501

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :return: The payment_gateway of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this POSTAccountType.

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :param payment_gateway: The payment_gateway of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_term(self):
        """Gets the payment_term of this POSTAccountType.  # noqa: E501

        Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.   # noqa: E501

        :return: The payment_term of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this POSTAccountType.

        Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.   # noqa: E501

        :param payment_term: The payment_term of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def run_billing(self):
        """Gets the run_billing of this POSTAccountType.  # noqa: E501

        Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule.](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).    The billing documents generated in this operation is only for this subscription, not for the entire customer account.   Possible values:  - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.   - `false`: No invoice is created.   **Note:** This field is in Zuora REST API version control. Supported minor versions are `211.0` or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The run_billing of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._run_billing

    @run_billing.setter
    def run_billing(self, run_billing):
        """Sets the run_billing of this POSTAccountType.

        Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule.](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).    The billing documents generated in this operation is only for this subscription, not for the entire customer account.   Possible values:  - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.   - `false`: No invoice is created.   **Note:** This field is in Zuora REST API version control. Supported minor versions are `211.0` or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param run_billing: The run_billing of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._run_billing = run_billing

    @run_billing.deleter
    def run_billing(self):
        del self._run_billing

    @property
    def sales_rep(self):
        """Gets the sales_rep of this POSTAccountType.  # noqa: E501

        The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.  # noqa: E501

        :return: The sales_rep of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._sales_rep

    @sales_rep.setter
    def sales_rep(self, sales_rep):
        """Sets the sales_rep of this POSTAccountType.

        The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.  # noqa: E501

        :param sales_rep: The sales_rep of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._sales_rep = sales_rep

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this POSTAccountType.  # noqa: E501


        :return: The sold_to_contact of this POSTAccountType.  # noqa: E501
        :rtype: POSTAccountTypeSoldToContact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this POSTAccountType.


        :param sold_to_contact: The sold_to_contact of this POSTAccountType.  # noqa: E501
        :type: POSTAccountTypeSoldToContact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def sold_to_same_as_bill_to(self):
        """Gets the sold_to_same_as_bill_to of this POSTAccountType.  # noqa: E501

        Whether the sold-to contact and bill-to contact are the same entity.   The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.   # noqa: E501

        :return: The sold_to_same_as_bill_to of this POSTAccountType.  # noqa: E501
        :rtype: bool
        """
        return self._sold_to_same_as_bill_to

    @sold_to_same_as_bill_to.setter
    def sold_to_same_as_bill_to(self, sold_to_same_as_bill_to):
        """Sets the sold_to_same_as_bill_to of this POSTAccountType.

        Whether the sold-to contact and bill-to contact are the same entity.   The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.   # noqa: E501

        :param sold_to_same_as_bill_to: The sold_to_same_as_bill_to of this POSTAccountType.  # noqa: E501
        :type: bool
        """

        self._sold_to_same_as_bill_to = sold_to_same_as_bill_to

    @property
    def subscription(self):
        """Gets the subscription of this POSTAccountType.  # noqa: E501


        :return: The subscription of this POSTAccountType.  # noqa: E501
        :rtype: POSTAccountTypeSubscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this POSTAccountType.


        :param subscription: The subscription of this POSTAccountType.  # noqa: E501
        :type: POSTAccountTypeSubscription
        """

        self._subscription = subscription

    @property
    def tagging(self):
        """Gets the tagging of this POSTAccountType.  # noqa: E501

          # noqa: E501

        :return: The tagging of this POSTAccountType.  # noqa: E501
        :rtype: str
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging):
        """Sets the tagging of this POSTAccountType.

          # noqa: E501

        :param tagging: The tagging of this POSTAccountType.  # noqa: E501
        :type: str
        """

        self._tagging = tagging

    @property
    def target_date(self):
        """Gets the target_date of this POSTAccountType.  # noqa: E501

        Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.  **Note:** The credit memo is only available only if you have the Invoice Settlement feature enabled.  This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The target_date of this POSTAccountType.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this POSTAccountType.

        Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.  **Note:** The credit memo is only available only if you have the Invoice Settlement feature enabled.  This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param target_date: The target_date of this POSTAccountType.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_info(self):
        """Gets the tax_info of this POSTAccountType.  # noqa: E501


        :return: The tax_info of this POSTAccountType.  # noqa: E501
        :rtype: POSTAccountTypeTaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this POSTAccountType.


        :param tax_info: The tax_info of this POSTAccountType.  # noqa: E501
        :type: POSTAccountTypeTaxInfo
        """

        self._tax_info = tax_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            try:
                value = getattr(self, attr)
            except AttributeError:
                continue
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(POSTAccountType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, POSTAccountType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
