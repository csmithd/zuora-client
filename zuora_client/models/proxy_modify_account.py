# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.account_object_custom_fields import AccountObjectCustomFields  # noqa: F401,E501
from zuora_client.models.account_object_ns_fields import AccountObjectNSFields  # noqa: F401,E501


class ProxyModifyAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class__ns': 'str',
        'customer_type__ns': 'str',
        'department__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'location__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'str',
        'account_number': 'str',
        'additional_email_addresses': 'str',
        'allow_invoice_edit': 'bool',
        'auto_pay': 'bool',
        'batch': 'str',
        'bcd_setting_option': 'str',
        'bill_cycle_day': 'int',
        'bill_to_id': 'str',
        'communication_profile_id': 'str',
        'crm_id': 'str',
        'currency': 'str',
        'customer_service_rep_name': 'str',
        'default_payment_method_id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'parent_id': 'str',
        'payment_gateway': 'str',
        'payment_term': 'str',
        'purchase_order_number': 'str',
        'sales_rep_name': 'str',
        'sold_to_id': 'str',
        'status': 'str',
        'tax_company_code': 'str',
        'tax_exempt_certificate_id': 'str',
        'tax_exempt_certificate_type': 'str',
        'tax_exempt_description': 'str',
        'tax_exempt_effective_date': 'date',
        'tax_exempt_expiration_date': 'date',
        'tax_exempt_issuing_jurisdiction': 'str',
        'tax_exempt_status': 'str',
        'vat_id': 'str'
    }

    attribute_map = {
        'class__ns': 'Class__NS',
        'customer_type__ns': 'CustomerType__NS',
        'department__ns': 'Department__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'location__ns': 'Location__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS',
        'account_number': 'AccountNumber',
        'additional_email_addresses': 'AdditionalEmailAddresses',
        'allow_invoice_edit': 'AllowInvoiceEdit',
        'auto_pay': 'AutoPay',
        'batch': 'Batch',
        'bcd_setting_option': 'BcdSettingOption',
        'bill_cycle_day': 'BillCycleDay',
        'bill_to_id': 'BillToId',
        'communication_profile_id': 'CommunicationProfileId',
        'crm_id': 'CrmId',
        'currency': 'Currency',
        'customer_service_rep_name': 'CustomerServiceRepName',
        'default_payment_method_id': 'DefaultPaymentMethodId',
        'invoice_delivery_prefs_email': 'InvoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'InvoiceDeliveryPrefsPrint',
        'invoice_template_id': 'InvoiceTemplateId',
        'name': 'Name',
        'notes': 'Notes',
        'parent_id': 'ParentId',
        'payment_gateway': 'PaymentGateway',
        'payment_term': 'PaymentTerm',
        'purchase_order_number': 'PurchaseOrderNumber',
        'sales_rep_name': 'SalesRepName',
        'sold_to_id': 'SoldToId',
        'status': 'Status',
        'tax_company_code': 'TaxCompanyCode',
        'tax_exempt_certificate_id': 'TaxExemptCertificateID',
        'tax_exempt_certificate_type': 'TaxExemptCertificateType',
        'tax_exempt_description': 'TaxExemptDescription',
        'tax_exempt_effective_date': 'TaxExemptEffectiveDate',
        'tax_exempt_expiration_date': 'TaxExemptExpirationDate',
        'tax_exempt_issuing_jurisdiction': 'TaxExemptIssuingJurisdiction',
        'tax_exempt_status': 'TaxExemptStatus',
        'vat_id': 'VATId'
    }

    def __init__(self, class__ns=None, customer_type__ns=None, department__ns=None, integration_id__ns=None, integration_status__ns=None, location__ns=None, subsidiary__ns=None, sync_date__ns=None, syncto_net_suite__ns=None, account_number=None, additional_email_addresses=None, allow_invoice_edit=None, auto_pay=None, batch=None, bcd_setting_option=None, bill_cycle_day=None, bill_to_id=None, communication_profile_id=None, crm_id=None, currency=None, customer_service_rep_name=None, default_payment_method_id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, invoice_template_id=None, name=None, notes=None, parent_id=None, payment_gateway=None, payment_term=None, purchase_order_number=None, sales_rep_name=None, sold_to_id=None, status=None, tax_company_code=None, tax_exempt_certificate_id=None, tax_exempt_certificate_type=None, tax_exempt_description=None, tax_exempt_effective_date=None, tax_exempt_expiration_date=None, tax_exempt_issuing_jurisdiction=None, tax_exempt_status=None, vat_id=None):  # noqa: E501
        """ProxyModifyAccount - a model defined in Swagger"""  # noqa: E501

        self._class__ns = None
        self._customer_type__ns = None
        self._department__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._location__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self._account_number = None
        self._additional_email_addresses = None
        self._allow_invoice_edit = None
        self._auto_pay = None
        self._batch = None
        self._bcd_setting_option = None
        self._bill_cycle_day = None
        self._bill_to_id = None
        self._communication_profile_id = None
        self._crm_id = None
        self._currency = None
        self._customer_service_rep_name = None
        self._default_payment_method_id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._parent_id = None
        self._payment_gateway = None
        self._payment_term = None
        self._purchase_order_number = None
        self._sales_rep_name = None
        self._sold_to_id = None
        self._status = None
        self._tax_company_code = None
        self._tax_exempt_certificate_id = None
        self._tax_exempt_certificate_type = None
        self._tax_exempt_description = None
        self._tax_exempt_effective_date = None
        self._tax_exempt_expiration_date = None
        self._tax_exempt_issuing_jurisdiction = None
        self._tax_exempt_status = None
        self._vat_id = None
        self.discriminator = None

        if class__ns is not None:
            self.class__ns = class__ns
        if customer_type__ns is not None:
            self.customer_type__ns = customer_type__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns
        if account_number is not None:
            self.account_number = account_number
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if allow_invoice_edit is not None:
            self.allow_invoice_edit = allow_invoice_edit
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        if bcd_setting_option is not None:
            self.bcd_setting_option = bcd_setting_option
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_to_id is not None:
            self.bill_to_id = bill_to_id
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if crm_id is not None:
            self.crm_id = crm_id
        if currency is not None:
            self.currency = currency
        if customer_service_rep_name is not None:
            self.customer_service_rep_name = customer_service_rep_name
        if default_payment_method_id is not None:
            self.default_payment_method_id = default_payment_method_id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if parent_id is not None:
            self.parent_id = parent_id
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_term is not None:
            self.payment_term = payment_term
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if sales_rep_name is not None:
            self.sales_rep_name = sales_rep_name
        if sold_to_id is not None:
            self.sold_to_id = sold_to_id
        if status is not None:
            self.status = status
        if tax_company_code is not None:
            self.tax_company_code = tax_company_code
        if tax_exempt_certificate_id is not None:
            self.tax_exempt_certificate_id = tax_exempt_certificate_id
        if tax_exempt_certificate_type is not None:
            self.tax_exempt_certificate_type = tax_exempt_certificate_type
        if tax_exempt_description is not None:
            self.tax_exempt_description = tax_exempt_description
        if tax_exempt_effective_date is not None:
            self.tax_exempt_effective_date = tax_exempt_effective_date
        if tax_exempt_expiration_date is not None:
            self.tax_exempt_expiration_date = tax_exempt_expiration_date
        if tax_exempt_issuing_jurisdiction is not None:
            self.tax_exempt_issuing_jurisdiction = tax_exempt_issuing_jurisdiction
        if tax_exempt_status is not None:
            self.tax_exempt_status = tax_exempt_status
        if vat_id is not None:
            self.vat_id = vat_id

    @property
    def class__ns(self):
        """Gets the class__ns of this ProxyModifyAccount.  # noqa: E501

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this ProxyModifyAccount.

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if class__ns is not None and len(class__ns) > 255:
            raise ValueError("Invalid value for `class__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._class__ns = class__ns

    @property
    def customer_type__ns(self):
        """Gets the customer_type__ns of this ProxyModifyAccount.  # noqa: E501

        Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The customer_type__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._customer_type__ns

    @customer_type__ns.setter
    def customer_type__ns(self, customer_type__ns):
        """Sets the customer_type__ns of this ProxyModifyAccount.

        Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param customer_type__ns: The customer_type__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["Company", "Individual"]  # noqa: E501
        if customer_type__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type__ns, allowed_values)
            )

        self._customer_type__ns = customer_type__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this ProxyModifyAccount.  # noqa: E501

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this ProxyModifyAccount.

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if department__ns is not None and len(department__ns) > 255:
            raise ValueError("Invalid value for `department__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._department__ns = department__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyModifyAccount.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyModifyAccount.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyModifyAccount.  # noqa: E501

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyModifyAccount.

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this ProxyModifyAccount.  # noqa: E501

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this ProxyModifyAccount.

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if location__ns is not None and len(location__ns) > 255:
            raise ValueError("Invalid value for `location__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._location__ns = location__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this ProxyModifyAccount.  # noqa: E501

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this ProxyModifyAccount.

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if subsidiary__ns is not None and len(subsidiary__ns) > 255:
            raise ValueError("Invalid value for `subsidiary__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyModifyAccount.  # noqa: E501

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyModifyAccount.

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this ProxyModifyAccount.  # noqa: E501

        Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The syncto_net_suite__ns of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this ProxyModifyAccount.

        Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param syncto_net_suite__ns: The syncto_net_suite__ns of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if syncto_net_suite__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `syncto_net_suite__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(syncto_net_suite__ns, allowed_values)
            )

        self._syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_number(self):
        """Gets the account_number of this ProxyModifyAccount.  # noqa: E501

        Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:  - null to auto-generate - a string of 50 characters or fewer that doesn't begin with the default account number prefix   # noqa: E501

        :return: The account_number of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ProxyModifyAccount.

        Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:  - null to auto-generate - a string of 50 characters or fewer that doesn't begin with the default account number prefix   # noqa: E501

        :param account_number: The account_number of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this ProxyModifyAccount.  # noqa: E501

        List of additional email addresses to receive emailed invoices. **Character limit**: 120 **Values**: comma-separated list of email addresses   # noqa: E501

        :return: The additional_email_addresses of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this ProxyModifyAccount.

        List of additional email addresses to receive emailed invoices. **Character limit**: 120 **Values**: comma-separated list of email addresses   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def allow_invoice_edit(self):
        """Gets the allow_invoice_edit of this ProxyModifyAccount.  # noqa: E501

         Indicates if associated invoices can be edited. **Character limit**: 5 **Values**: `true`, `false` (default if left null)   # noqa: E501

        :return: The allow_invoice_edit of this ProxyModifyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._allow_invoice_edit

    @allow_invoice_edit.setter
    def allow_invoice_edit(self, allow_invoice_edit):
        """Sets the allow_invoice_edit of this ProxyModifyAccount.

         Indicates if associated invoices can be edited. **Character limit**: 5 **Values**: `true`, `false` (default if left null)   # noqa: E501

        :param allow_invoice_edit: The allow_invoice_edit of this ProxyModifyAccount.  # noqa: E501
        :type: bool
        """

        self._allow_invoice_edit = allow_invoice_edit

    @property
    def auto_pay(self):
        """Gets the auto_pay of this ProxyModifyAccount.  # noqa: E501

         Indicates if future payments are automatically collected when they're due during a Payment Run. **Character limit**: 5 **Values**: `true`, `false` (default)   # noqa: E501

        :return: The auto_pay of this ProxyModifyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this ProxyModifyAccount.

         Indicates if future payments are automatically collected when they're due during a Payment Run. **Character limit**: 5 **Values**: `true`, `false` (default)   # noqa: E501

        :param auto_pay: The auto_pay of this ProxyModifyAccount.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this ProxyModifyAccount.  # noqa: E501

         Organizes your customer accounts into groups to optimize your billing and payment operations. Required if you use the Subscribe call. **Character limit**: 20 **Values**:any system-defined batch (`Batch1` - `Batch50 `or by name).   # noqa: E501

        :return: The batch of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this ProxyModifyAccount.

         Organizes your customer accounts into groups to optimize your billing and payment operations. Required if you use the Subscribe call. **Character limit**: 20 **Values**:any system-defined batch (`Batch1` - `Batch50 `or by name).   # noqa: E501

        :param batch: The batch of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bcd_setting_option(self):
        """Gets the bcd_setting_option of this ProxyModifyAccount.  # noqa: E501

        Billing cycle day setting option. **Character limit**: 9 **Values**: `AutoSet`, `ManualSet`   # noqa: E501

        :return: The bcd_setting_option of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._bcd_setting_option

    @bcd_setting_option.setter
    def bcd_setting_option(self, bcd_setting_option):
        """Sets the bcd_setting_option of this ProxyModifyAccount.

        Billing cycle day setting option. **Character limit**: 9 **Values**: `AutoSet`, `ManualSet`   # noqa: E501

        :param bcd_setting_option: The bcd_setting_option of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._bcd_setting_option = bcd_setting_option

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this ProxyModifyAccount.  # noqa: E501

        Billing cycle day (BCD) on which bill runs generate invoices for the account. **Character limit**: 2 **Values**: any activated system-defined bill cycle day (`1` - `31`)   # noqa: E501

        :return: The bill_cycle_day of this ProxyModifyAccount.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this ProxyModifyAccount.

        Billing cycle day (BCD) on which bill runs generate invoices for the account. **Character limit**: 2 **Values**: any activated system-defined bill cycle day (`1` - `31`)   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this ProxyModifyAccount.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_id(self):
        """Gets the bill_to_id of this ProxyModifyAccount.  # noqa: E501

        ID of the person to bill for the account. **Character limit**: 32 **Values**: a valid contact ID for the account   # noqa: E501

        :return: The bill_to_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_id

    @bill_to_id.setter
    def bill_to_id(self, bill_to_id):
        """Sets the bill_to_id of this ProxyModifyAccount.

        ID of the person to bill for the account. **Character limit**: 32 **Values**: a valid contact ID for the account   # noqa: E501

        :param bill_to_id: The bill_to_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._bill_to_id = bill_to_id

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this ProxyModifyAccount.  # noqa: E501

        Associates the account with a specified communication profile. **Character limit**: 32 **Values**: a valid communication profile ID   # noqa: E501

        :return: The communication_profile_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this ProxyModifyAccount.

        Associates the account with a specified communication profile. **Character limit**: 32 **Values**: a valid communication profile ID   # noqa: E501

        :param communication_profile_id: The communication_profile_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def crm_id(self):
        """Gets the crm_id of this ProxyModifyAccount.  # noqa: E501

        CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :return: The crm_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this ProxyModifyAccount.

        CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :param crm_id: The crm_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def currency(self):
        """Gets the currency of this ProxyModifyAccount.  # noqa: E501

         Currency that the customer is billed in.   # noqa: E501

        :return: The currency of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProxyModifyAccount.

         Currency that the customer is billed in.   # noqa: E501

        :param currency: The currency of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer_service_rep_name(self):
        """Gets the customer_service_rep_name of this ProxyModifyAccount.  # noqa: E501

        Name of the account's customer service representative, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :return: The customer_service_rep_name of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_rep_name

    @customer_service_rep_name.setter
    def customer_service_rep_name(self, customer_service_rep_name):
        """Sets the customer_service_rep_name of this ProxyModifyAccount.

        Name of the account's customer service representative, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :param customer_service_rep_name: The customer_service_rep_name of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._customer_service_rep_name = customer_service_rep_name

    @property
    def default_payment_method_id(self):
        """Gets the default_payment_method_id of this ProxyModifyAccount.  # noqa: E501

        ID of the default payment method for the account. This field is required if the AutoPay field is set to `true`. **Character limit**: 32 **Values**: a valid ID for an existing payment method   # noqa: E501

        :return: The default_payment_method_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._default_payment_method_id

    @default_payment_method_id.setter
    def default_payment_method_id(self, default_payment_method_id):
        """Sets the default_payment_method_id of this ProxyModifyAccount.

        ID of the default payment method for the account. This field is required if the AutoPay field is set to `true`. **Character limit**: 32 **Values**: a valid ID for an existing payment method   # noqa: E501

        :param default_payment_method_id: The default_payment_method_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._default_payment_method_id = default_payment_method_id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this ProxyModifyAccount.  # noqa: E501

        Indicates if the customer wants to receive invoices through email.  **Character limit**: 5 **Values**: `true`, `false` (default if left null)   # noqa: E501

        :return: The invoice_delivery_prefs_email of this ProxyModifyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this ProxyModifyAccount.

        Indicates if the customer wants to receive invoices through email.  **Character limit**: 5 **Values**: `true`, `false` (default if left null)   # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this ProxyModifyAccount.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this ProxyModifyAccount.  # noqa: E501

        Indicates if the customer wants to receive printed invoices, such as through postal mail. **Character limit**: 5 **Values**: `true`, `false` (default if left null)   # noqa: E501

        :return: The invoice_delivery_prefs_print of this ProxyModifyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this ProxyModifyAccount.

        Indicates if the customer wants to receive printed invoices, such as through postal mail. **Character limit**: 5 **Values**: `true`, `false` (default if left null)   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this ProxyModifyAccount.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this ProxyModifyAccount.  # noqa: E501

        The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation. **Character limit**: 32 **Values**: a valid template ID configured in Zuora Billing Settings   # noqa: E501

        :return: The invoice_template_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this ProxyModifyAccount.

        The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation. **Character limit**: 32 **Values**: a valid template ID configured in Zuora Billing Settings   # noqa: E501

        :param invoice_template_id: The invoice_template_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this ProxyModifyAccount.  # noqa: E501

        Name of the account as displayed in the Zuora UI. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The name of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProxyModifyAccount.

        Name of the account as displayed in the Zuora UI. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param name: The name of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ProxyModifyAccount.  # noqa: E501

         Comments about the account. **Character limit**: 65,535 **Values**: a string of 65,535 characters   # noqa: E501

        :return: The notes of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ProxyModifyAccount.

         Comments about the account. **Character limit**: 65,535 **Values**: a string of 65,535 characters   # noqa: E501

        :param notes: The notes of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this ProxyModifyAccount.  # noqa: E501

        Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled. **Character limit**: 32 **Values**: a valid account ID   # noqa: E501

        :return: The parent_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ProxyModifyAccount.

        Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled. **Character limit**: 32 **Values**: a valid account ID   # noqa: E501

        :param parent_id: The parent_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this ProxyModifyAccount.  # noqa: E501

        Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:  - a valid configured gateway name - Null to inherit the default value set in Zuora Payment Settings   # noqa: E501

        :return: The payment_gateway of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this ProxyModifyAccount.

        Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:  - a valid configured gateway name - Null to inherit the default value set in Zuora Payment Settings   # noqa: E501

        :param payment_gateway: The payment_gateway of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_term(self):
        """Gets the payment_term of this ProxyModifyAccount.  # noqa: E501

        Indicates when the customer pays for subscriptions. **Character limit**: 100 **Values**: a valid, active payment term defined in the web-based UI administrative settings   # noqa: E501

        :return: The payment_term of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this ProxyModifyAccount.

        Indicates when the customer pays for subscriptions. **Character limit**: 100 **Values**: a valid, active payment term defined in the web-based UI administrative settings   # noqa: E501

        :param payment_term: The payment_term of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this ProxyModifyAccount.  # noqa: E501

        The number of the purchase order associated with this account. Purchase order information generally comes from customers. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :return: The purchase_order_number of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this ProxyModifyAccount.

        The number of the purchase order associated with this account. Purchase order information generally comes from customers. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :param purchase_order_number: The purchase_order_number of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def sales_rep_name(self):
        """Gets the sales_rep_name of this ProxyModifyAccount.  # noqa: E501

        The name of the sales representative associated with this account, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :return: The sales_rep_name of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._sales_rep_name

    @sales_rep_name.setter
    def sales_rep_name(self, sales_rep_name):
        """Sets the sales_rep_name of this ProxyModifyAccount.

        The name of the sales representative associated with this account, if applicable. **Character limit**: 50 **Values**: a string of 50 characters or fewer   # noqa: E501

        :param sales_rep_name: The sales_rep_name of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._sales_rep_name = sales_rep_name

    @property
    def sold_to_id(self):
        """Gets the sold_to_id of this ProxyModifyAccount.  # noqa: E501

        ID of the person who bought the subscription associated with the account. **Character limit**: 32 **Values**: a valid contact ID for the account   # noqa: E501

        :return: The sold_to_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._sold_to_id

    @sold_to_id.setter
    def sold_to_id(self, sold_to_id):
        """Sets the sold_to_id of this ProxyModifyAccount.

        ID of the person who bought the subscription associated with the account. **Character limit**: 32 **Values**: a valid contact ID for the account   # noqa: E501

        :param sold_to_id: The sold_to_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._sold_to_id = sold_to_id

    @property
    def status(self):
        """Gets the status of this ProxyModifyAccount.  # noqa: E501

        Status of the account in the system. **Character limit**: 8 **Values**: one of the following:  - leave null if you're using the Subscribe call - if you're using the Create call: - `Draft` - `Active` - `Canceled`   # noqa: E501

        :return: The status of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyModifyAccount.

        Status of the account in the system. **Character limit**: 8 **Values**: one of the following:  - leave null if you're using the Subscribe call - if you're using the Create call: - `Draft` - `Active` - `Canceled`   # noqa: E501

        :param status: The status of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tax_company_code(self):
        """Gets the tax_company_code of this ProxyModifyAccount.  # noqa: E501

         Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Character limit**: 50 **Values**: a valid company code   # noqa: E501

        :return: The tax_company_code of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._tax_company_code

    @tax_company_code.setter
    def tax_company_code(self, tax_company_code):
        """Sets the tax_company_code of this ProxyModifyAccount.

         Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Character limit**: 50 **Values**: a valid company code   # noqa: E501

        :param tax_company_code: The tax_company_code of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._tax_company_code = tax_company_code

    @property
    def tax_exempt_certificate_id(self):
        """Gets the tax_exempt_certificate_id of this ProxyModifyAccount.  # noqa: E501

        ID of your customer's tax exemption certificate. **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :return: The tax_exempt_certificate_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt_certificate_id

    @tax_exempt_certificate_id.setter
    def tax_exempt_certificate_id(self, tax_exempt_certificate_id):
        """Sets the tax_exempt_certificate_id of this ProxyModifyAccount.

        ID of your customer's tax exemption certificate. **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :param tax_exempt_certificate_id: The tax_exempt_certificate_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._tax_exempt_certificate_id = tax_exempt_certificate_id

    @property
    def tax_exempt_certificate_type(self):
        """Gets the tax_exempt_certificate_type of this ProxyModifyAccount.  # noqa: E501

        Type of the tax exemption certificate that your customer holds.  **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :return: The tax_exempt_certificate_type of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt_certificate_type

    @tax_exempt_certificate_type.setter
    def tax_exempt_certificate_type(self, tax_exempt_certificate_type):
        """Sets the tax_exempt_certificate_type of this ProxyModifyAccount.

        Type of the tax exemption certificate that your customer holds.  **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :param tax_exempt_certificate_type: The tax_exempt_certificate_type of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._tax_exempt_certificate_type = tax_exempt_certificate_type

    @property
    def tax_exempt_description(self):
        """Gets the tax_exempt_description of this ProxyModifyAccount.  # noqa: E501

        Description of the tax exemption certificate that your customer holds. **Character limit**: 500 **Values**: a string of 500 characters or fewer   # noqa: E501

        :return: The tax_exempt_description of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt_description

    @tax_exempt_description.setter
    def tax_exempt_description(self, tax_exempt_description):
        """Sets the tax_exempt_description of this ProxyModifyAccount.

        Description of the tax exemption certificate that your customer holds. **Character limit**: 500 **Values**: a string of 500 characters or fewer   # noqa: E501

        :param tax_exempt_description: The tax_exempt_description of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._tax_exempt_description = tax_exempt_description

    @property
    def tax_exempt_effective_date(self):
        """Gets the tax_exempt_effective_date of this ProxyModifyAccount.  # noqa: E501

        Date when the the customer's tax exemption starts. **Character limit**: 29 **Version notes**: requires Zuora Tax   # noqa: E501

        :return: The tax_exempt_effective_date of this ProxyModifyAccount.  # noqa: E501
        :rtype: date
        """
        return self._tax_exempt_effective_date

    @tax_exempt_effective_date.setter
    def tax_exempt_effective_date(self, tax_exempt_effective_date):
        """Sets the tax_exempt_effective_date of this ProxyModifyAccount.

        Date when the the customer's tax exemption starts. **Character limit**: 29 **Version notes**: requires Zuora Tax   # noqa: E501

        :param tax_exempt_effective_date: The tax_exempt_effective_date of this ProxyModifyAccount.  # noqa: E501
        :type: date
        """

        self._tax_exempt_effective_date = tax_exempt_effective_date

    @property
    def tax_exempt_expiration_date(self):
        """Gets the tax_exempt_expiration_date of this ProxyModifyAccount.  # noqa: E501

        Date when the customer's tax exemption certificate expires  **Character limit**: 29 **Version notes**: requires Zuora Tax   # noqa: E501

        :return: The tax_exempt_expiration_date of this ProxyModifyAccount.  # noqa: E501
        :rtype: date
        """
        return self._tax_exempt_expiration_date

    @tax_exempt_expiration_date.setter
    def tax_exempt_expiration_date(self, tax_exempt_expiration_date):
        """Sets the tax_exempt_expiration_date of this ProxyModifyAccount.

        Date when the customer's tax exemption certificate expires  **Character limit**: 29 **Version notes**: requires Zuora Tax   # noqa: E501

        :param tax_exempt_expiration_date: The tax_exempt_expiration_date of this ProxyModifyAccount.  # noqa: E501
        :type: date
        """

        self._tax_exempt_expiration_date = tax_exempt_expiration_date

    @property
    def tax_exempt_issuing_jurisdiction(self):
        """Gets the tax_exempt_issuing_jurisdiction of this ProxyModifyAccount.  # noqa: E501

        Indicates the jurisdiction in which the customer's tax exemption certificate was issued. **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :return: The tax_exempt_issuing_jurisdiction of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt_issuing_jurisdiction

    @tax_exempt_issuing_jurisdiction.setter
    def tax_exempt_issuing_jurisdiction(self, tax_exempt_issuing_jurisdiction):
        """Sets the tax_exempt_issuing_jurisdiction of this ProxyModifyAccount.

        Indicates the jurisdiction in which the customer's tax exemption certificate was issued. **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :param tax_exempt_issuing_jurisdiction: The tax_exempt_issuing_jurisdiction of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._tax_exempt_issuing_jurisdiction = tax_exempt_issuing_jurisdiction

    @property
    def tax_exempt_status(self):
        """Gets the tax_exempt_status of this ProxyModifyAccount.  # noqa: E501

         Status of the account's tax exemption. Required if you use Zuora Tax. **Character limit**: 19 **Values**: one of the following:  - `Yes` - `No` - `PendingVerification`   # noqa: E501

        :return: The tax_exempt_status of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt_status

    @tax_exempt_status.setter
    def tax_exempt_status(self, tax_exempt_status):
        """Sets the tax_exempt_status of this ProxyModifyAccount.

         Status of the account's tax exemption. Required if you use Zuora Tax. **Character limit**: 19 **Values**: one of the following:  - `Yes` - `No` - `PendingVerification`   # noqa: E501

        :param tax_exempt_status: The tax_exempt_status of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._tax_exempt_status = tax_exempt_status

    @property
    def vat_id(self):
        """Gets the vat_id of this ProxyModifyAccount.  # noqa: E501

         EU Value Added Tax ID. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Character limit**: 25 **Values**: a valid Value Added Tax ID   # noqa: E501

        :return: The vat_id of this ProxyModifyAccount.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this ProxyModifyAccount.

         EU Value Added Tax ID. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Character limit**: 25 **Values**: a valid Value Added Tax ID   # noqa: E501

        :param vat_id: The vat_id of this ProxyModifyAccount.  # noqa: E501
        :type: str
        """

        self._vat_id = vat_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyModifyAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyModifyAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
