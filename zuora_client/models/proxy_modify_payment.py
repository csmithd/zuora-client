# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.payment_object_custom_fields import PaymentObjectCustomFields  # noqa: F401,E501
from zuora_client.models.payment_object_ns_fields import PaymentObjectNSFields  # noqa: F401,E501


class ProxyModifyPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'transaction__ns': 'str',
        'account_id': 'str',
        'accounting_code': 'str',
        'amount': 'float',
        'comment': 'str',
        'effective_date': 'date',
        'payment_method_id': 'str',
        'reference_id': 'str',
        'status': 'str',
        'transferred_to_accounting': 'str',
        'type': 'str'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'transaction__ns': 'Transaction__NS',
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'amount': 'Amount',
        'comment': 'Comment',
        'effective_date': 'EffectiveDate',
        'payment_method_id': 'PaymentMethodId',
        'reference_id': 'ReferenceId',
        'status': 'Status',
        'transferred_to_accounting': 'TransferredToAccounting',
        'type': 'Type'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, transaction__ns=None, account_id=None, accounting_code=None, amount=None, comment=None, effective_date=None, payment_method_id=None, reference_id=None, status=None, transferred_to_accounting=None, type=None):  # noqa: E501
        """ProxyModifyPayment - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._transaction__ns = None
        self._account_id = None
        self._accounting_code = None
        self._amount = None
        self._comment = None
        self._effective_date = None
        self._payment_method_id = None
        self._reference_id = None
        self._status = None
        self._transferred_to_accounting = None
        self._type = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if transaction__ns is not None:
            self.transaction__ns = transaction__ns
        if account_id is not None:
            self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if amount is not None:
            self.amount = amount
        if comment is not None:
            self.comment = comment
        if effective_date is not None:
            self.effective_date = effective_date
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if reference_id is not None:
            self.reference_id = reference_id
        if status is not None:
            self.status = status
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if type is not None:
            self.type = type

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyModifyPayment.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyModifyPayment.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyModifyPayment.  # noqa: E501

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyModifyPayment.

        Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this ProxyModifyPayment.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this ProxyModifyPayment.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if origin__ns is not None and len(origin__ns) > 255:
            raise ValueError("Invalid value for `origin__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyModifyPayment.  # noqa: E501

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyModifyPayment.

        Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def transaction__ns(self):
        """Gets the transaction__ns of this ProxyModifyPayment.  # noqa: E501

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The transaction__ns of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._transaction__ns

    @transaction__ns.setter
    def transaction__ns(self, transaction__ns):
        """Sets the transaction__ns of this ProxyModifyPayment.

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param transaction__ns: The transaction__ns of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if transaction__ns is not None and len(transaction__ns) > 255:
            raise ValueError("Invalid value for `transaction__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._transaction__ns = transaction__ns

    @property
    def account_id(self):
        """Gets the account_id of this ProxyModifyPayment.  # noqa: E501

        The unique account ID for the customer that the payment is for.   # noqa: E501

        :return: The account_id of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyModifyPayment.

        The unique account ID for the customer that the payment is for.   # noqa: E501

        :param account_id: The account_id of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if account_id is not None and len(account_id) > 32:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `32`")  # noqa: E501
        if account_id is not None and len(account_id) < 0:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyModifyPayment.  # noqa: E501

        The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :return: The accounting_code of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyModifyPayment.

        The aacccounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if accounting_code is not None and len(accounting_code) > 100:
            raise ValueError("Invalid value for `accounting_code`, length must be less than or equal to `100`")  # noqa: E501
        if accounting_code is not None and len(accounting_code) < 0:
            raise ValueError("Invalid value for `accounting_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._accounting_code = accounting_code

    @property
    def amount(self):
        """Gets the amount of this ProxyModifyPayment.  # noqa: E501

        The amount of the payment.   # noqa: E501

        :return: The amount of this ProxyModifyPayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyModifyPayment.

        The amount of the payment.   # noqa: E501

        :param amount: The amount of this ProxyModifyPayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def comment(self):
        """Gets the comment of this ProxyModifyPayment.  # noqa: E501

        Additional information related to the payment.   # noqa: E501

        :return: The comment of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProxyModifyPayment.

        Additional information related to the payment.   # noqa: E501

        :param comment: The comment of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 255:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `255`")  # noqa: E501
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def effective_date(self):
        """Gets the effective_date of this ProxyModifyPayment.  # noqa: E501

        The date when the payment takes effect.   # noqa: E501

        :return: The effective_date of this ProxyModifyPayment.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this ProxyModifyPayment.

        The date when the payment takes effect.   # noqa: E501

        :param effective_date: The effective_date of this ProxyModifyPayment.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this ProxyModifyPayment.  # noqa: E501

        The ID of the payment method used for the payment.    # noqa: E501

        :return: The payment_method_id of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this ProxyModifyPayment.

        The ID of the payment method used for the payment.    # noqa: E501

        :param payment_method_id: The payment_method_id of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if payment_method_id is not None and len(payment_method_id) > 32:
            raise ValueError("Invalid value for `payment_method_id`, length must be less than or equal to `32`")  # noqa: E501
        if payment_method_id is not None and len(payment_method_id) < 0:
            raise ValueError("Invalid value for `payment_method_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._payment_method_id = payment_method_id

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyModifyPayment.  # noqa: E501

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :return: The reference_id of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyModifyPayment.

        The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.   # noqa: E501

        :param reference_id: The reference_id of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        if reference_id is not None and len(reference_id) > 60:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `60`")  # noqa: E501
        if reference_id is not None and len(reference_id) < 0:
            raise ValueError("Invalid value for `reference_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def status(self):
        """Gets the status of this ProxyModifyPayment.  # noqa: E501

        The status of the payment in Zuora. The value depends on the type of payment.  For electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.   # noqa: E501

        :return: The status of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyModifyPayment.

        The status of the payment in Zuora. The value depends on the type of payment.  For electronic payments, the status can be `Processed`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.   # noqa: E501

        :param status: The status of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processed", "Error", "Voided", "Canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyModifyPayment.  # noqa: E501

        Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.   # noqa: E501

        :return: The transferred_to_accounting of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyModifyPayment.

        Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def type(self):
        """Gets the type of this ProxyModifyPayment.  # noqa: E501

        The type of the payment, whether the payment is external or electronic.   # noqa: E501

        :return: The type of this ProxyModifyPayment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxyModifyPayment.

        The type of the payment, whether the payment is external or electronic.   # noqa: E501

        :param type: The type of this ProxyModifyPayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["External", "Electronic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyModifyPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyModifyPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
