# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.subscribe_request_account import SubscribeRequestAccount  # noqa: F401,E501
from zuora_client.models.subscribe_request_bill_to_contact import SubscribeRequestBillToContact  # noqa: F401,E501
from zuora_client.models.subscribe_request_payment_method import SubscribeRequestPaymentMethod  # noqa: F401,E501
from zuora_client.models.subscribe_request_preview_options import SubscribeRequestPreviewOptions  # noqa: F401,E501
from zuora_client.models.subscribe_request_sold_to_contact import SubscribeRequestSoldToContact  # noqa: F401,E501
from zuora_client.models.subscribe_request_subscribe_options import SubscribeRequestSubscribeOptions  # noqa: F401,E501
from zuora_client.models.subscribe_request_subscription_data import SubscribeRequestSubscriptionData  # noqa: F401,E501


class SubscribeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'SubscribeRequestAccount',
        'bill_to_contact': 'SubscribeRequestBillToContact',
        'payment_method': 'SubscribeRequestPaymentMethod',
        'preview_options': 'SubscribeRequestPreviewOptions',
        'sold_to_contact': 'SubscribeRequestSoldToContact',
        'subscribe_options': 'SubscribeRequestSubscribeOptions',
        'subscription_data': 'SubscribeRequestSubscriptionData'
    }

    attribute_map = {
        'account': 'Account',
        'bill_to_contact': 'BillToContact',
        'payment_method': 'PaymentMethod',
        'preview_options': 'PreviewOptions',
        'sold_to_contact': 'SoldToContact',
        'subscribe_options': 'SubscribeOptions',
        'subscription_data': 'SubscriptionData'
    }

    def __init__(self, account=None, bill_to_contact=None, payment_method=None, preview_options=None, sold_to_contact=None, subscribe_options=None, subscription_data=None):  # noqa: E501
        """SubscribeRequest - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._bill_to_contact = None
        self._payment_method = None
        self._preview_options = None
        self._sold_to_contact = None
        self._subscribe_options = None
        self._subscription_data = None
        self.discriminator = None

        self.account = account
        if bill_to_contact is not None:
            self.bill_to_contact = bill_to_contact
        if payment_method is not None:
            self.payment_method = payment_method
        if preview_options is not None:
            self.preview_options = preview_options
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if subscribe_options is not None:
            self.subscribe_options = subscribe_options
        self.subscription_data = subscription_data

    @property
    def account(self):
        """Gets the account of this SubscribeRequest.  # noqa: E501


        :return: The account of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SubscribeRequest.


        :param account: The account of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestAccount
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this SubscribeRequest.  # noqa: E501


        :return: The bill_to_contact of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestBillToContact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this SubscribeRequest.


        :param bill_to_contact: The bill_to_contact of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestBillToContact
        """

        self._bill_to_contact = bill_to_contact

    @property
    def payment_method(self):
        """Gets the payment_method of this SubscribeRequest.  # noqa: E501


        :return: The payment_method of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this SubscribeRequest.


        :param payment_method: The payment_method of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestPaymentMethod
        """

        self._payment_method = payment_method

    @property
    def preview_options(self):
        """Gets the preview_options of this SubscribeRequest.  # noqa: E501


        :return: The preview_options of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestPreviewOptions
        """
        return self._preview_options

    @preview_options.setter
    def preview_options(self, preview_options):
        """Sets the preview_options of this SubscribeRequest.


        :param preview_options: The preview_options of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestPreviewOptions
        """

        self._preview_options = preview_options

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this SubscribeRequest.  # noqa: E501


        :return: The sold_to_contact of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestSoldToContact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this SubscribeRequest.


        :param sold_to_contact: The sold_to_contact of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestSoldToContact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def subscribe_options(self):
        """Gets the subscribe_options of this SubscribeRequest.  # noqa: E501


        :return: The subscribe_options of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestSubscribeOptions
        """
        return self._subscribe_options

    @subscribe_options.setter
    def subscribe_options(self, subscribe_options):
        """Sets the subscribe_options of this SubscribeRequest.


        :param subscribe_options: The subscribe_options of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestSubscribeOptions
        """

        self._subscribe_options = subscribe_options

    @property
    def subscription_data(self):
        """Gets the subscription_data of this SubscribeRequest.  # noqa: E501


        :return: The subscription_data of this SubscribeRequest.  # noqa: E501
        :rtype: SubscribeRequestSubscriptionData
        """
        return self._subscription_data

    @subscription_data.setter
    def subscription_data(self, subscription_data):
        """Sets the subscription_data of this SubscribeRequest.


        :param subscription_data: The subscription_data of this SubscribeRequest.  # noqa: E501
        :type: SubscribeRequestSubscriptionData
        """
        if subscription_data is None:
            raise ValueError("Invalid value for `subscription_data`, must not be `None`")  # noqa: E501

        self._subscription_data = subscription_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscribeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscribeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
