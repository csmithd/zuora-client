# coding: utf-8




import pprint
import re  # noqa: F401

import six


class GETPaymentRunType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'apply_credit_balance': 'bool',
        'auto_apply_credit_memo': 'bool',
        'auto_apply_unapplied_payment': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'billing_run_id': 'str',
        'collect_payment': 'bool',
        'completed_on': 'datetime',
        'consolidated_payment': 'bool',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'currency': 'str',
        'executed_on': 'datetime',
        'id': 'str',
        'number': 'str',
        'payment_gateway_id': 'str',
        'process_payment_with_closed_pm': 'bool',
        'run_date': 'datetime',
        'status': 'str',
        'success': 'bool',
        'target_date': 'date',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'account_id': 'accountId',
        'apply_credit_balance': 'applyCreditBalance',
        'auto_apply_credit_memo': 'autoApplyCreditMemo',
        'auto_apply_unapplied_payment': 'autoApplyUnappliedPayment',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'billing_run_id': 'billingRunId',
        'collect_payment': 'collectPayment',
        'completed_on': 'completedOn',
        'consolidated_payment': 'consolidatedPayment',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'currency': 'currency',
        'executed_on': 'executedOn',
        'id': 'id',
        'number': 'number',
        'payment_gateway_id': 'paymentGatewayId',
        'process_payment_with_closed_pm': 'processPaymentWithClosedPM',
        'run_date': 'runDate',
        'status': 'status',
        'success': 'success',
        'target_date': 'targetDate',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate'
    }

    def __init__(self, account_id=None, apply_credit_balance=None, auto_apply_credit_memo=None, auto_apply_unapplied_payment=None, batch=None, bill_cycle_day=None, billing_run_id=None, collect_payment=None, completed_on=None, consolidated_payment=None, created_by_id=None, created_date=None, currency=None, executed_on=None, id=None, number=None, payment_gateway_id=None, process_payment_with_closed_pm=None, run_date=None, status=None, success=None, target_date=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """GETPaymentRunType - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._apply_credit_balance = None
        self._auto_apply_credit_memo = None
        self._auto_apply_unapplied_payment = None
        self._batch = None
        self._bill_cycle_day = None
        self._billing_run_id = None
        self._collect_payment = None
        self._completed_on = None
        self._consolidated_payment = None
        self._created_by_id = None
        self._created_date = None
        self._currency = None
        self._executed_on = None
        self._id = None
        self._number = None
        self._payment_gateway_id = None
        self._process_payment_with_closed_pm = None
        self._run_date = None
        self._status = None
        self._success = None
        self._target_date = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if apply_credit_balance is not None:
            self.apply_credit_balance = apply_credit_balance
        if auto_apply_credit_memo is not None:
            self.auto_apply_credit_memo = auto_apply_credit_memo
        if auto_apply_unapplied_payment is not None:
            self.auto_apply_unapplied_payment = auto_apply_unapplied_payment
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if billing_run_id is not None:
            self.billing_run_id = billing_run_id
        if collect_payment is not None:
            self.collect_payment = collect_payment
        if completed_on is not None:
            self.completed_on = completed_on
        if consolidated_payment is not None:
            self.consolidated_payment = consolidated_payment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if currency is not None:
            self.currency = currency
        if executed_on is not None:
            self.executed_on = executed_on
        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if payment_gateway_id is not None:
            self.payment_gateway_id = payment_gateway_id
        if process_payment_with_closed_pm is not None:
            self.process_payment_with_closed_pm = process_payment_with_closed_pm
        if run_date is not None:
            self.run_date = run_date
        if status is not None:
            self.status = status
        if success is not None:
            self.success = success
        if target_date is not None:
            self.target_date = target_date
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def account_id(self):
        """Gets the account_id of this GETPaymentRunType.  # noqa: E501

        The ID of the customer account associated with the payment run.   # noqa: E501

        :return: The account_id of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GETPaymentRunType.

        The ID of the customer account associated with the payment run.   # noqa: E501

        :param account_id: The account_id of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def apply_credit_balance(self):
        """Gets the apply_credit_balance of this GETPaymentRunType.  # noqa: E501

        **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.  Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.   # noqa: E501

        :return: The apply_credit_balance of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit_balance

    @apply_credit_balance.setter
    def apply_credit_balance(self, apply_credit_balance):
        """Sets the apply_credit_balance of this GETPaymentRunType.

        **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.  Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.   # noqa: E501

        :param apply_credit_balance: The apply_credit_balance of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._apply_credit_balance = apply_credit_balance

    @property
    def auto_apply_credit_memo(self):
        """Gets the auto_apply_credit_memo of this GETPaymentRunType.  # noqa: E501

        **Note:** The Invoice Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Whether to automatically apply a posted credit memo to one or more receivables in the payment run.   # noqa: E501

        :return: The auto_apply_credit_memo of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._auto_apply_credit_memo

    @auto_apply_credit_memo.setter
    def auto_apply_credit_memo(self, auto_apply_credit_memo):
        """Sets the auto_apply_credit_memo of this GETPaymentRunType.

        **Note:** The Invoice Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Whether to automatically apply a posted credit memo to one or more receivables in the payment run.   # noqa: E501

        :param auto_apply_credit_memo: The auto_apply_credit_memo of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._auto_apply_credit_memo = auto_apply_credit_memo

    @property
    def auto_apply_unapplied_payment(self):
        """Gets the auto_apply_unapplied_payment of this GETPaymentRunType.  # noqa: E501

        **Note:** The Invoice Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Whether to automatically apply unapplied payments to  one or more receivables in the payment run.   # noqa: E501

        :return: The auto_apply_unapplied_payment of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._auto_apply_unapplied_payment

    @auto_apply_unapplied_payment.setter
    def auto_apply_unapplied_payment(self, auto_apply_unapplied_payment):
        """Sets the auto_apply_unapplied_payment of this GETPaymentRunType.

        **Note:** The Invoice Settlement feature is in **Limited Availability**. This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Whether to automatically apply unapplied payments to  one or more receivables in the payment run.   # noqa: E501

        :param auto_apply_unapplied_payment: The auto_apply_unapplied_payment of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._auto_apply_unapplied_payment = auto_apply_unapplied_payment

    @property
    def batch(self):
        """Gets the batch of this GETPaymentRunType.  # noqa: E501

        The alias name given to a batch.   # noqa: E501

        :return: The batch of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this GETPaymentRunType.

        The alias name given to a batch.   # noqa: E501

        :param batch: The batch of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this GETPaymentRunType.  # noqa: E501

        The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.    # noqa: E501

        :return: The bill_cycle_day of this GETPaymentRunType.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this GETPaymentRunType.

        The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.    # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this GETPaymentRunType.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def billing_run_id(self):
        """Gets the billing_run_id of this GETPaymentRunType.  # noqa: E501

        The ID of the bill run.   # noqa: E501

        :return: The billing_run_id of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._billing_run_id

    @billing_run_id.setter
    def billing_run_id(self, billing_run_id):
        """Sets the billing_run_id of this GETPaymentRunType.

        The ID of the bill run.   # noqa: E501

        :param billing_run_id: The billing_run_id of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._billing_run_id = billing_run_id

    @property
    def collect_payment(self):
        """Gets the collect_payment of this GETPaymentRunType.  # noqa: E501

        Whether to process electronic payments during the execution of payment runs.    # noqa: E501

        :return: The collect_payment of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._collect_payment

    @collect_payment.setter
    def collect_payment(self, collect_payment):
        """Sets the collect_payment of this GETPaymentRunType.

        Whether to process electronic payments during the execution of payment runs.    # noqa: E501

        :param collect_payment: The collect_payment of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._collect_payment = collect_payment

    @property
    def completed_on(self):
        """Gets the completed_on of this GETPaymentRunType.  # noqa: E501

        The date and time when the payment run is completed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:39:58.   # noqa: E501

        :return: The completed_on of this GETPaymentRunType.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this GETPaymentRunType.

        The date and time when the payment run is completed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:39:58.   # noqa: E501

        :param completed_on: The completed_on of this GETPaymentRunType.  # noqa: E501
        :type: datetime
        """

        self._completed_on = completed_on

    @property
    def consolidated_payment(self):
        """Gets the consolidated_payment of this GETPaymentRunType.  # noqa: E501

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process a single payment for all receivables that are due on an account.   # noqa: E501

        :return: The consolidated_payment of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._consolidated_payment

    @consolidated_payment.setter
    def consolidated_payment(self, consolidated_payment):
        """Sets the consolidated_payment of this GETPaymentRunType.

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process a single payment for all receivables that are due on an account.   # noqa: E501

        :param consolidated_payment: The consolidated_payment of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._consolidated_payment = consolidated_payment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GETPaymentRunType.  # noqa: E501

        The ID of the Zuora user who created the payment run.   # noqa: E501

        :return: The created_by_id of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GETPaymentRunType.

        The ID of the Zuora user who created the payment run.   # noqa: E501

        :param created_by_id: The created_by_id of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this GETPaymentRunType.  # noqa: E501

        The date and time when the payment run was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.   # noqa: E501

        :return: The created_date of this GETPaymentRunType.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GETPaymentRunType.

        The date and time when the payment run was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.   # noqa: E501

        :param created_date: The created_date of this GETPaymentRunType.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def currency(self):
        """Gets the currency of this GETPaymentRunType.  # noqa: E501

        A currency defined in the web-based UI administrative settings.   # noqa: E501

        :return: The currency of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETPaymentRunType.

        A currency defined in the web-based UI administrative settings.   # noqa: E501

        :param currency: The currency of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def executed_on(self):
        """Gets the executed_on of this GETPaymentRunType.  # noqa: E501

        The date and time when the payment run is executed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:30:37.   # noqa: E501

        :return: The executed_on of this GETPaymentRunType.  # noqa: E501
        :rtype: datetime
        """
        return self._executed_on

    @executed_on.setter
    def executed_on(self, executed_on):
        """Sets the executed_on of this GETPaymentRunType.

        The date and time when the payment run is executed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:30:37.   # noqa: E501

        :param executed_on: The executed_on of this GETPaymentRunType.  # noqa: E501
        :type: datetime
        """

        self._executed_on = executed_on

    @property
    def id(self):
        """Gets the id of this GETPaymentRunType.  # noqa: E501

        The ID of the payment run.   # noqa: E501

        :return: The id of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETPaymentRunType.

        The ID of the payment run.   # noqa: E501

        :param id: The id of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this GETPaymentRunType.  # noqa: E501

        The identification number of the payment run.   # noqa: E501

        :return: The number of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GETPaymentRunType.

        The identification number of the payment run.   # noqa: E501

        :param number: The number of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment_gateway_id(self):
        """Gets the payment_gateway_id of this GETPaymentRunType.  # noqa: E501

        The ID of the gateway instance that processes the payment.   # noqa: E501

        :return: The payment_gateway_id of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_id

    @payment_gateway_id.setter
    def payment_gateway_id(self, payment_gateway_id):
        """Sets the payment_gateway_id of this GETPaymentRunType.

        The ID of the gateway instance that processes the payment.   # noqa: E501

        :param payment_gateway_id: The payment_gateway_id of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._payment_gateway_id = payment_gateway_id

    @property
    def process_payment_with_closed_pm(self):
        """Gets the process_payment_with_closed_pm of this GETPaymentRunType.  # noqa: E501

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process payments even if the default payment method is closed.   # noqa: E501

        :return: The process_payment_with_closed_pm of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._process_payment_with_closed_pm

    @process_payment_with_closed_pm.setter
    def process_payment_with_closed_pm(self, process_payment_with_closed_pm):
        """Sets the process_payment_with_closed_pm of this GETPaymentRunType.

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process payments even if the default payment method is closed.   # noqa: E501

        :param process_payment_with_closed_pm: The process_payment_with_closed_pm of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._process_payment_with_closed_pm = process_payment_with_closed_pm

    @property
    def run_date(self):
        """Gets the run_date of this GETPaymentRunType.  # noqa: E501

        The date and time when the scheduled payment run is to be executed for collecting payments.   # noqa: E501

        :return: The run_date of this GETPaymentRunType.  # noqa: E501
        :rtype: datetime
        """
        return self._run_date

    @run_date.setter
    def run_date(self, run_date):
        """Sets the run_date of this GETPaymentRunType.

        The date and time when the scheduled payment run is to be executed for collecting payments.   # noqa: E501

        :param run_date: The run_date of this GETPaymentRunType.  # noqa: E501
        :type: datetime
        """

        self._run_date = run_date

    @property
    def status(self):
        """Gets the status of this GETPaymentRunType.  # noqa: E501

        The status of the created payment run.   # noqa: E501

        :return: The status of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETPaymentRunType.

        The status of the created payment run.   # noqa: E501

        :param status: The status of this GETPaymentRunType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Processing", "Completed", "Error", "Canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def success(self):
        """Gets the success of this GETPaymentRunType.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this GETPaymentRunType.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GETPaymentRunType.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this GETPaymentRunType.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def target_date(self):
        """Gets the target_date of this GETPaymentRunType.  # noqa: E501

        The target date used to determine which receivables to be collected in the payment run.    # noqa: E501

        :return: The target_date of this GETPaymentRunType.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this GETPaymentRunType.

        The target date used to determine which receivables to be collected in the payment run.    # noqa: E501

        :param target_date: The target_date of this GETPaymentRunType.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this GETPaymentRunType.  # noqa: E501

        The ID of the Zuora user who last updated the payment run.   # noqa: E501

        :return: The updated_by_id of this GETPaymentRunType.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this GETPaymentRunType.

        The ID of the Zuora user who last updated the payment run.   # noqa: E501

        :param updated_by_id: The updated_by_id of this GETPaymentRunType.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this GETPaymentRunType.  # noqa: E501

        The date and time when the payment run was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.   # noqa: E501

        :return: The updated_date of this GETPaymentRunType.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GETPaymentRunType.

        The date and time when the payment run was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.   # noqa: E501

        :param updated_date: The updated_date of this GETPaymentRunType.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETPaymentRunType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETPaymentRunType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
