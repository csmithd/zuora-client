# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.invoice_adjustment_object_custom_fields import InvoiceAdjustmentObjectCustomFields  # noqa: F401,E501


class ProxyGetInvoiceAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'accounting_code': 'str',
        'adjustment_date': 'date',
        'adjustment_number': 'str',
        'amount': 'float',
        'cancelled_by_id': 'str',
        'cancelled_on': 'datetime',
        'comments': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'customer_name': 'str',
        'customer_number': 'str',
        'id': 'str',
        'impact_amount': 'float',
        'invoice_id': 'str',
        'invoice_number': 'str',
        'reason_code': 'str',
        'reference_id': 'str',
        'status': 'str',
        'transferred_to_accounting': 'str',
        'type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'adjustment_date': 'AdjustmentDate',
        'adjustment_number': 'AdjustmentNumber',
        'amount': 'Amount',
        'cancelled_by_id': 'CancelledById',
        'cancelled_on': 'CancelledOn',
        'comments': 'Comments',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'customer_name': 'CustomerName',
        'customer_number': 'CustomerNumber',
        'id': 'Id',
        'impact_amount': 'ImpactAmount',
        'invoice_id': 'InvoiceId',
        'invoice_number': 'InvoiceNumber',
        'reason_code': 'ReasonCode',
        'reference_id': 'ReferenceId',
        'status': 'Status',
        'transferred_to_accounting': 'TransferredToAccounting',
        'type': 'Type',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, account_id=None, accounting_code=None, adjustment_date=None, adjustment_number=None, amount=None, cancelled_by_id=None, cancelled_on=None, comments=None, created_by_id=None, created_date=None, customer_name=None, customer_number=None, id=None, impact_amount=None, invoice_id=None, invoice_number=None, reason_code=None, reference_id=None, status=None, transferred_to_accounting=None, type=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """ProxyGetInvoiceAdjustment - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._accounting_code = None
        self._adjustment_date = None
        self._adjustment_number = None
        self._amount = None
        self._cancelled_by_id = None
        self._cancelled_on = None
        self._comments = None
        self._created_by_id = None
        self._created_date = None
        self._customer_name = None
        self._customer_number = None
        self._id = None
        self._impact_amount = None
        self._invoice_id = None
        self._invoice_number = None
        self._reason_code = None
        self._reference_id = None
        self._status = None
        self._transferred_to_accounting = None
        self._type = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_date is not None:
            self.adjustment_date = adjustment_date
        if adjustment_number is not None:
            self.adjustment_number = adjustment_number
        if amount is not None:
            self.amount = amount
        if cancelled_by_id is not None:
            self.cancelled_by_id = cancelled_by_id
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comments is not None:
            self.comments = comments
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_number is not None:
            self.customer_number = customer_number
        if id is not None:
            self.id = id
        if impact_amount is not None:
            self.impact_amount = impact_amount
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if reason_code is not None:
            self.reason_code = reason_code
        if reference_id is not None:
            self.reference_id = reference_id
        if status is not None:
            self.status = status
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if type is not None:
            self.type = type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def account_id(self):
        """Gets the account_id of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The ID of the account that owns the invoice. **Character limit**: 32 **Values**: inherited from Account.ID for the invoice owner   # noqa: E501

        :return: The account_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyGetInvoiceAdjustment.

         The ID of the account that owns the invoice. **Character limit**: 32 **Values**: inherited from Account.ID for the invoice owner   # noqa: E501

        :param account_id: The account_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyGetInvoiceAdjustment.  # noqa: E501

        The accounting code for the invoice adjustment.   # noqa: E501

        :return: The accounting_code of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyGetInvoiceAdjustment.

        The accounting code for the invoice adjustment.   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_date(self):
        """Gets the adjustment_date of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The date when the invoice adjustment is applied. This date must be the same as the invoice's date or later. **Character limit**: 29 **Values**: Leave null to automatically generate the current date   # noqa: E501

        :return: The adjustment_date of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._adjustment_date

    @adjustment_date.setter
    def adjustment_date(self, adjustment_date):
        """Sets the adjustment_date of this ProxyGetInvoiceAdjustment.

         The date when the invoice adjustment is applied. This date must be the same as the invoice's date or later. **Character limit**: 29 **Values**: Leave null to automatically generate the current date   # noqa: E501

        :param adjustment_date: The adjustment_date of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: date
        """

        self._adjustment_date = adjustment_date

    @property
    def adjustment_number(self):
        """Gets the adjustment_number of this ProxyGetInvoiceAdjustment.  # noqa: E501

         A unique string to identify an individual invoice adjustment. **Character limit**: 255 **Values**: automatically generated   # noqa: E501

        :return: The adjustment_number of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_number

    @adjustment_number.setter
    def adjustment_number(self, adjustment_number):
        """Sets the adjustment_number of this ProxyGetInvoiceAdjustment.

         A unique string to identify an individual invoice adjustment. **Character limit**: 255 **Values**: automatically generated   # noqa: E501

        :param adjustment_number: The adjustment_number of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._adjustment_number = adjustment_number

    @property
    def amount(self):
        """Gets the amount of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The amount of the invoice adjustment. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :return: The amount of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyGetInvoiceAdjustment.

         The amount of the invoice adjustment. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :param amount: The amount of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cancelled_by_id(self):
        """Gets the cancelled_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The ID of the Zuora user who canceled the invoice adjustment. Zuora generates this read-only field only if the adjustment is canceled. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The cancelled_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_by_id

    @cancelled_by_id.setter
    def cancelled_by_id(self, cancelled_by_id):
        """Sets the cancelled_by_id of this ProxyGetInvoiceAdjustment.

         The ID of the Zuora user who canceled the invoice adjustment. Zuora generates this read-only field only if the adjustment is canceled. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param cancelled_by_id: The cancelled_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._cancelled_by_id = cancelled_by_id

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The date when the invoice adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The cancelled_on of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this ProxyGetInvoiceAdjustment.

         The date when the invoice adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param cancelled_on: The cancelled_on of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: datetime
        """

        self._cancelled_on = cancelled_on

    @property
    def comments(self):
        """Gets the comments of this ProxyGetInvoiceAdjustment.  # noqa: E501

         Use this field to record comments about the invoice adjustment. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The comments of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ProxyGetInvoiceAdjustment.

         Use this field to record comments about the invoice adjustment. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param comments: The comments of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The user ID of the person who created the invoice adjustment. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProxyGetInvoiceAdjustment.

         The user ID of the person who created the invoice adjustment. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The date the invoice adjustment was created. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The created_date of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProxyGetInvoiceAdjustment.

         The date the invoice adjustment was created. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def customer_name(self):
        """Gets the customer_name of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The name of the account that owns the associated invoice.  **Character limit**: 50  **Values**: inherited from `Account.Name`  **Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not change when `Account.Name` is updated.   # noqa: E501

        :return: The customer_name of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this ProxyGetInvoiceAdjustment.

         The name of the account that owns the associated invoice.  **Character limit**: 50  **Values**: inherited from `Account.Name`  **Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not change when `Account.Name` is updated.   # noqa: E501

        :param customer_name: The customer_name of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_number(self):
        """Gets the customer_number of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The unique account number of the customer's account.  **Character limit**: 70  **Values**: inherited from `Account.AccountNumber`  **Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not change when `Account.AccountNumber` is updated.   # noqa: E501

        :return: The customer_number of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this ProxyGetInvoiceAdjustment.

         The unique account number of the customer's account.  **Character limit**: 70  **Values**: inherited from `Account.AccountNumber`  **Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not change when `Account.AccountNumber` is updated.   # noqa: E501

        :param customer_number: The customer_number of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._customer_number = customer_number

    @property
    def id(self):
        """Gets the id of this ProxyGetInvoiceAdjustment.  # noqa: E501

        Object identifier.  # noqa: E501

        :return: The id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyGetInvoiceAdjustment.

        Object identifier.  # noqa: E501

        :param id: The id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def impact_amount(self):
        """Gets the impact_amount of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The amount that changes the balance of the associated invoice. **Character limit**: 16 **Values**: automatically calculated   # noqa: E501

        :return: The impact_amount of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._impact_amount

    @impact_amount.setter
    def impact_amount(self, impact_amount):
        """Sets the impact_amount of this ProxyGetInvoiceAdjustment.

         The amount that changes the balance of the associated invoice. **Character limit**: 16 **Values**: automatically calculated   # noqa: E501

        :param impact_amount: The impact_amount of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: float
        """

        self._impact_amount = impact_amount

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The ID of the invoice associated with the adjustment. This field is required if you don't specify a value for the `InvoiceNumber` field. **Character limit**: 32 **Values**: a valid invoice ID   # noqa: E501

        :return: The invoice_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ProxyGetInvoiceAdjustment.

         The ID of the invoice associated with the adjustment. This field is required if you don't specify a value for the `InvoiceNumber` field. **Character limit**: 32 **Values**: a valid invoice ID   # noqa: E501

        :param invoice_id: The invoice_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The unique identification number for the associated invoice. This field is required if you don't specify a value for the `InvoiceId` field. **Character limit**: 32 **Values**: a valid invoice number   # noqa: E501

        :return: The invoice_number of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this ProxyGetInvoiceAdjustment.

         The unique identification number for the associated invoice. This field is required if you don't specify a value for the `InvoiceId` field. **Character limit**: 32 **Values**: a valid invoice number   # noqa: E501

        :param invoice_number: The invoice_number of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def reason_code(self):
        """Gets the reason_code of this ProxyGetInvoiceAdjustment.  # noqa: E501

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :return: The reason_code of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ProxyGetInvoiceAdjustment.

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :param reason_code: The reason_code of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyGetInvoiceAdjustment.  # noqa: E501

         A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :return: The reference_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyGetInvoiceAdjustment.

         A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :param reference_id: The reference_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def status(self):
        """Gets the status of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls. **Character limit**: 9 **Values**: `Canceled`, `Processed`   # noqa: E501

        :return: The status of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyGetInvoiceAdjustment.

         The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls. **Character limit**: 9 **Values**: `Canceled`, `Processed`   # noqa: E501

        :param status: The status of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyGetInvoiceAdjustment.  # noqa: E501

        Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :return: The transferred_to_accounting of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyGetInvoiceAdjustment.

        Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processing", "Yes", "No", "Error", "Ignore"]  # noqa: E501
        if transferred_to_accounting not in allowed_values:
            raise ValueError(
                "Invalid value for `transferred_to_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(transferred_to_accounting, allowed_values)
            )

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def type(self):
        """Gets the type of this ProxyGetInvoiceAdjustment.  # noqa: E501

         Indicates whether the adjustment credits or debits the invoice amount. **Character limit**: 6 **Values**: `Credit`, `Charge`   # noqa: E501

        :return: The type of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxyGetInvoiceAdjustment.

         Indicates whether the adjustment credits or debits the invoice amount. **Character limit**: 6 **Values**: `Credit`, `Charge`   # noqa: E501

        :param type: The type of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The ID of the user who last updated the invoice. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The updated_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this ProxyGetInvoiceAdjustment.

         The ID of the user who last updated the invoice. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this ProxyGetInvoiceAdjustment.  # noqa: E501

         The date when the invoice was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ProxyGetInvoiceAdjustment.

         The date when the invoice was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this ProxyGetInvoiceAdjustment.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyGetInvoiceAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGetInvoiceAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
