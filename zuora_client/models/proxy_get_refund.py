# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.refund_object_custom_fields import RefundObjectCustomFields  # noqa: F401,E501
from zuora_client.models.refund_object_ns_fields import RefundObjectNSFields  # noqa: F401,E501


class ProxyGetRefund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'str',
        'account_id': 'str',
        'accounting_code': 'str',
        'amount': 'float',
        'cancelled_on': 'datetime',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'datetime',
        'gateway': 'str',
        'gateway_response': 'str',
        'gateway_response_code': 'str',
        'gateway_state': 'str',
        'id': 'str',
        'marked_for_submission_on': 'datetime',
        'method_type': 'str',
        'payment_method_id': 'str',
        'payment_method_snapshot_id': 'str',
        'reason_code': 'str',
        'reference_id': 'str',
        'refund_date': 'date',
        'refund_number': 'str',
        'refund_transaction_time': 'datetime',
        'second_refund_reference_id': 'str',
        'settled_on': 'datetime',
        'soft_descriptor': 'str',
        'soft_descriptor_phone': 'str',
        'source_type': 'str',
        'status': 'str',
        'submitted_on': 'datetime',
        'transferred_to_accounting': 'str',
        'type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'datetime'
    }

    attribute_map = {
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS',
        'account_id': 'AccountId',
        'accounting_code': 'AccountingCode',
        'amount': 'Amount',
        'cancelled_on': 'CancelledOn',
        'comment': 'Comment',
        'created_by_id': 'CreatedById',
        'created_date': 'CreatedDate',
        'gateway': 'Gateway',
        'gateway_response': 'GatewayResponse',
        'gateway_response_code': 'GatewayResponseCode',
        'gateway_state': 'GatewayState',
        'id': 'Id',
        'marked_for_submission_on': 'MarkedForSubmissionOn',
        'method_type': 'MethodType',
        'payment_method_id': 'PaymentMethodId',
        'payment_method_snapshot_id': 'PaymentMethodSnapshotId',
        'reason_code': 'ReasonCode',
        'reference_id': 'ReferenceID',
        'refund_date': 'RefundDate',
        'refund_number': 'RefundNumber',
        'refund_transaction_time': 'RefundTransactionTime',
        'second_refund_reference_id': 'SecondRefundReferenceId',
        'settled_on': 'SettledOn',
        'soft_descriptor': 'SoftDescriptor',
        'soft_descriptor_phone': 'SoftDescriptorPhone',
        'source_type': 'SourceType',
        'status': 'Status',
        'submitted_on': 'SubmittedOn',
        'transferred_to_accounting': 'TransferredToAccounting',
        'type': 'Type',
        'updated_by_id': 'UpdatedById',
        'updated_date': 'UpdatedDate'
    }

    def __init__(self, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, syncto_net_suite__ns=None, account_id=None, accounting_code=None, amount=None, cancelled_on=None, comment=None, created_by_id=None, created_date=None, gateway=None, gateway_response=None, gateway_response_code=None, gateway_state=None, id=None, marked_for_submission_on=None, method_type=None, payment_method_id=None, payment_method_snapshot_id=None, reason_code=None, reference_id=None, refund_date=None, refund_number=None, refund_transaction_time=None, second_refund_reference_id=None, settled_on=None, soft_descriptor=None, soft_descriptor_phone=None, source_type=None, status=None, submitted_on=None, transferred_to_accounting=None, type=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """ProxyGetRefund - a model defined in Swagger"""  # noqa: E501

        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self._account_id = None
        self._accounting_code = None
        self._amount = None
        self._cancelled_on = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._gateway = None
        self._gateway_response = None
        self._gateway_response_code = None
        self._gateway_state = None
        self._id = None
        self._marked_for_submission_on = None
        self._method_type = None
        self._payment_method_id = None
        self._payment_method_snapshot_id = None
        self._reason_code = None
        self._reference_id = None
        self._refund_date = None
        self._refund_number = None
        self._refund_transaction_time = None
        self._second_refund_reference_id = None
        self._settled_on = None
        self._soft_descriptor = None
        self._soft_descriptor_phone = None
        self._source_type = None
        self._status = None
        self._submitted_on = None
        self._transferred_to_accounting = None
        self._type = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None

        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns
        if account_id is not None:
            self.account_id = account_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if amount is not None:
            self.amount = amount
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if gateway is not None:
            self.gateway = gateway
        if gateway_response is not None:
            self.gateway_response = gateway_response
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if gateway_state is not None:
            self.gateway_state = gateway_state
        if id is not None:
            self.id = id
        if marked_for_submission_on is not None:
            self.marked_for_submission_on = marked_for_submission_on
        if method_type is not None:
            self.method_type = method_type
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if payment_method_snapshot_id is not None:
            self.payment_method_snapshot_id = payment_method_snapshot_id
        if reason_code is not None:
            self.reason_code = reason_code
        if reference_id is not None:
            self.reference_id = reference_id
        if refund_date is not None:
            self.refund_date = refund_date
        if refund_number is not None:
            self.refund_number = refund_number
        if refund_transaction_time is not None:
            self.refund_transaction_time = refund_transaction_time
        if second_refund_reference_id is not None:
            self.second_refund_reference_id = second_refund_reference_id
        if settled_on is not None:
            self.settled_on = settled_on
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if soft_descriptor_phone is not None:
            self.soft_descriptor_phone = soft_descriptor_phone
        if source_type is not None:
            self.source_type = source_type
        if status is not None:
            self.status = status
        if submitted_on is not None:
            self.submitted_on = submitted_on
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if type is not None:
            self.type = type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyGetRefund.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyGetRefund.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyGetRefund.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyGetRefund.  # noqa: E501

        Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyGetRefund.

        Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyGetRefund.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this ProxyGetRefund.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this ProxyGetRefund.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this ProxyGetRefund.  # noqa: E501
        :type: str
        """
        if origin__ns is not None and len(origin__ns) > 255:
            raise ValueError("Invalid value for `origin__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyGetRefund.  # noqa: E501

        Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyGetRefund.

        Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyGetRefund.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this ProxyGetRefund.  # noqa: E501

        Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The syncto_net_suite__ns of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this ProxyGetRefund.

        Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param syncto_net_suite__ns: The syncto_net_suite__ns of this ProxyGetRefund.  # noqa: E501
        :type: str
        """
        if syncto_net_suite__ns is not None and len(syncto_net_suite__ns) > 255:
            raise ValueError("Invalid value for `syncto_net_suite__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_id(self):
        """Gets the account_id of this ProxyGetRefund.  # noqa: E501

         The ID of the account associated with this refund. Specify a value for this field only if you're creating an electronic non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment. **Character limit**: 32 **Values**: a valid account ID   # noqa: E501

        :return: The account_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProxyGetRefund.

         The ID of the account associated with this refund. Specify a value for this field only if you're creating an electronic non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment. **Character limit**: 32 **Values**: a valid account ID   # noqa: E501

        :param account_id: The account_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyGetRefund.  # noqa: E501

         The accounting code for the payment or invoice line item that the refund applies to. If there is no accounting code, then this value is null. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 50 **Values**: automatically generated   # noqa: E501

        :return: The accounting_code of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyGetRefund.

         The accounting code for the payment or invoice line item that the refund applies to. If there is no accounting code, then this value is null. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 50 **Values**: automatically generated   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def amount(self):
        """Gets the amount of this ProxyGetRefund.  # noqa: E501

         The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice, then you can create a partial refund. However, if the payment was applies to multiple invoices, then you can only make a partial refund through the web-based UI, not through the API. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :return: The amount of this ProxyGetRefund.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProxyGetRefund.

         The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice, then you can create a partial refund. However, if the payment was applies to multiple invoices, then you can only make a partial refund through the web-based UI, not through the API. **Character limit**: 16 **Values**: a valid currency amount   # noqa: E501

        :param amount: The amount of this ProxyGetRefund.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this ProxyGetRefund.  # noqa: E501

         The date the refund was cancelled. **Values**: automatically generated   # noqa: E501

        :return: The cancelled_on of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this ProxyGetRefund.

         The date the refund was cancelled. **Values**: automatically generated   # noqa: E501

        :param cancelled_on: The cancelled_on of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._cancelled_on = cancelled_on

    @property
    def comment(self):
        """Gets the comment of this ProxyGetRefund.  # noqa: E501

         Use this field to record comments about the refund. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The comment of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ProxyGetRefund.

         Use this field to record comments about the refund. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param comment: The comment of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProxyGetRefund.  # noqa: E501

         The ID of the Zuora user who created the `Refund` object. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The created_by_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProxyGetRefund.

         The ID of the Zuora user who created the `Refund` object. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param created_by_id: The created_by_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this ProxyGetRefund.  # noqa: E501

         The date when the `Refund` object was created. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The created_date of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProxyGetRefund.

         The date when the `Refund` object was created. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param created_date: The created_date of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def gateway(self):
        """Gets the gateway of this ProxyGetRefund.  # noqa: E501

         The gateway that processed the original payment. Zuora uses this same gateway for the corresponding refund. If this payment gateway is no longer active, then the electronic refund fails. A gateway is an online service provider that connects an online shopping cart to a payment processor. **Values**: automatically inherited from the `Payment` object   # noqa: E501

        :return: The gateway of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ProxyGetRefund.

         The gateway that processed the original payment. Zuora uses this same gateway for the corresponding refund. If this payment gateway is no longer active, then the electronic refund fails. A gateway is an online service provider that connects an online shopping cart to a payment processor. **Values**: automatically inherited from the `Payment` object   # noqa: E501

        :param gateway: The gateway of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def gateway_response(self):
        """Gets the gateway_response of this ProxyGetRefund.  # noqa: E501

         The message returned from the payment gateway for the refund. This message is gateway-dependent. **Character limit**: 500 **Values**: automatically generated   # noqa: E501

        :return: The gateway_response of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response

    @gateway_response.setter
    def gateway_response(self, gateway_response):
        """Sets the gateway_response of this ProxyGetRefund.

         The message returned from the payment gateway for the refund. This message is gateway-dependent. **Character limit**: 500 **Values**: automatically generated   # noqa: E501

        :param gateway_response: The gateway_response of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._gateway_response = gateway_response

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this ProxyGetRefund.  # noqa: E501

         The code returned from the payment gateway for the payment. This code is gateway-dependent. **Character limit**: 20 **System****Values**: automatically generated   # noqa: E501

        :return: The gateway_response_code of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this ProxyGetRefund.

         The code returned from the payment gateway for the payment. This code is gateway-dependent. **Character limit**: 20 **System****Values**: automatically generated   # noqa: E501

        :param gateway_response_code: The gateway_response_code of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._gateway_response_code = gateway_response_code

    @property
    def gateway_state(self):
        """Gets the gateway_state of this ProxyGetRefund.  # noqa: E501

         The status of the payment in the gateway. **Character limit**: 19 **Values**: automatically generated   # noqa: E501

        :return: The gateway_state of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._gateway_state

    @gateway_state.setter
    def gateway_state(self, gateway_state):
        """Sets the gateway_state of this ProxyGetRefund.

         The status of the payment in the gateway. **Character limit**: 19 **Values**: automatically generated   # noqa: E501

        :param gateway_state: The gateway_state of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._gateway_state = gateway_state

    @property
    def id(self):
        """Gets the id of this ProxyGetRefund.  # noqa: E501

        Object identifier.  # noqa: E501

        :return: The id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProxyGetRefund.

        Object identifier.  # noqa: E501

        :param id: The id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def marked_for_submission_on(self):
        """Gets the marked_for_submission_on of this ProxyGetRefund.  # noqa: E501

         The date when a payment was marked and waiting for batch submission to the payment process. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The marked_for_submission_on of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._marked_for_submission_on

    @marked_for_submission_on.setter
    def marked_for_submission_on(self, marked_for_submission_on):
        """Sets the marked_for_submission_on of this ProxyGetRefund.

         The date when a payment was marked and waiting for batch submission to the payment process. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param marked_for_submission_on: The marked_for_submission_on of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._marked_for_submission_on = marked_for_submission_on

    @property
    def method_type(self):
        """Gets the method_type of this ProxyGetRefund.  # noqa: E501

         Indicates how an external refund was issued to a customer. This field is required for an external refund. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:  - `ACH` - `Cash` - `Check` - `CreditCard` - `Other` - `PayPal` - `WireTransfer` - `DebitCard` - `CreditCardReferenceTransaction`   # noqa: E501

        :return: The method_type of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._method_type

    @method_type.setter
    def method_type(self, method_type):
        """Sets the method_type of this ProxyGetRefund.

         Indicates how an external refund was issued to a customer. This field is required for an external refund. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:  - `ACH` - `Cash` - `Check` - `CreditCard` - `Other` - `PayPal` - `WireTransfer` - `DebitCard` - `CreditCardReferenceTransaction`   # noqa: E501

        :param method_type: The method_type of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._method_type = method_type

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this ProxyGetRefund.  # noqa: E501

         The unique ID of the payment method that the customer used to make the payment. Specify a value for this field only if you're creating an electronic non-referenced refund. **Character limit**: 32 **V****alues**: a valid payment method ID   # noqa: E501

        :return: The payment_method_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this ProxyGetRefund.

         The unique ID of the payment method that the customer used to make the payment. Specify a value for this field only if you're creating an electronic non-referenced refund. **Character limit**: 32 **V****alues**: a valid payment method ID   # noqa: E501

        :param payment_method_id: The payment_method_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_method_snapshot_id(self):
        """Gets the payment_method_snapshot_id of this ProxyGetRefund.  # noqa: E501

         The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction. **Character limit**: 32 **V****alues**: a valid payment method snapshot ID   # noqa: E501

        :return: The payment_method_snapshot_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_snapshot_id

    @payment_method_snapshot_id.setter
    def payment_method_snapshot_id(self, payment_method_snapshot_id):
        """Sets the payment_method_snapshot_id of this ProxyGetRefund.

         The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction. **Character limit**: 32 **V****alues**: a valid payment method snapshot ID   # noqa: E501

        :param payment_method_snapshot_id: The payment_method_snapshot_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._payment_method_snapshot_id = payment_method_snapshot_id

    @property
    def reason_code(self):
        """Gets the reason_code of this ProxyGetRefund.  # noqa: E501

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :return: The reason_code of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ProxyGetRefund.

         A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. **Character limit**: 32 **V****alues**: a valid reason code   # noqa: E501

        :param reason_code: The reason_code of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reference_id(self):
        """Gets the reference_id of this ProxyGetRefund.  # noqa: E501

         The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :return: The reference_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ProxyGetRefund.

         The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :param reference_id: The reference_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def refund_date(self):
        """Gets the refund_date of this ProxyGetRefund.  # noqa: E501

         The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds. **Character limit**: 29   # noqa: E501

        :return: The refund_date of this ProxyGetRefund.  # noqa: E501
        :rtype: date
        """
        return self._refund_date

    @refund_date.setter
    def refund_date(self, refund_date):
        """Sets the refund_date of this ProxyGetRefund.

         The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds. **Character limit**: 29   # noqa: E501

        :param refund_date: The refund_date of this ProxyGetRefund.  # noqa: E501
        :type: date
        """

        self._refund_date = refund_date

    @property
    def refund_number(self):
        """Gets the refund_number of this ProxyGetRefund.  # noqa: E501

         The unique identifier of the refund. **Character limit**: 50 **Values**: automatically generated   # noqa: E501

        :return: The refund_number of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_number

    @refund_number.setter
    def refund_number(self, refund_number):
        """Sets the refund_number of this ProxyGetRefund.

         The unique identifier of the refund. **Character limit**: 50 **Values**: automatically generated   # noqa: E501

        :param refund_number: The refund_number of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._refund_number = refund_number

    @property
    def refund_transaction_time(self):
        """Gets the refund_transaction_time of this ProxyGetRefund.  # noqa: E501

         The date and time when the refund was issued. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The refund_transaction_time of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._refund_transaction_time

    @refund_transaction_time.setter
    def refund_transaction_time(self, refund_transaction_time):
        """Sets the refund_transaction_time of this ProxyGetRefund.

         The date and time when the refund was issued. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param refund_transaction_time: The refund_transaction_time of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._refund_transaction_time = refund_transaction_time

    @property
    def second_refund_reference_id(self):
        """Gets the second_refund_reference_id of this ProxyGetRefund.  # noqa: E501

         The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :return: The second_refund_reference_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._second_refund_reference_id

    @second_refund_reference_id.setter
    def second_refund_reference_id(self, second_refund_reference_id):
        """Sets the second_refund_reference_id of this ProxyGetRefund.

         The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments. **Character limit**: 60 **Values**: a string of 60 characters or fewer   # noqa: E501

        :param second_refund_reference_id: The second_refund_reference_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._second_refund_reference_id = second_refund_reference_id

    @property
    def settled_on(self):
        """Gets the settled_on of this ProxyGetRefund.  # noqa: E501

         The date when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The settled_on of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._settled_on

    @settled_on.setter
    def settled_on(self, settled_on):
        """Sets the settled_on of this ProxyGetRefund.

         The date when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param settled_on: The settled_on of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._settled_on = settled_on

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this ProxyGetRefund.  # noqa: E501

         A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:  - 3-byte company identifier &quot;*&quot; 18-byte descriptor - 7-byte company identifier &quot;*&quot; 14-byte descriptor - 12-byte company identifier &quot;*&quot; 9-byte descriptor   # noqa: E501

        :return: The soft_descriptor of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this ProxyGetRefund.

         A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:  - 3-byte company identifier &quot;*&quot; 18-byte descriptor - 7-byte company identifier &quot;*&quot; 14-byte descriptor - 12-byte company identifier &quot;*&quot; 9-byte descriptor   # noqa: E501

        :param soft_descriptor: The soft_descriptor of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._soft_descriptor = soft_descriptor

    @property
    def soft_descriptor_phone(self):
        """Gets the soft_descriptor_phone of this ProxyGetRefund.  # noqa: E501

         A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:  - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA` - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate - Email address   # noqa: E501

        :return: The soft_descriptor_phone of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor_phone

    @soft_descriptor_phone.setter
    def soft_descriptor_phone(self, soft_descriptor_phone):
        """Sets the soft_descriptor_phone of this ProxyGetRefund.

         A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:  - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA` - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate - Email address   # noqa: E501

        :param soft_descriptor_phone: The soft_descriptor_phone of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._soft_descriptor_phone = soft_descriptor_phone

    @property
    def source_type(self):
        """Gets the source_type of this ProxyGetRefund.  # noqa: E501

         Specifies whether the refund is a refund payment or a credit balance. This field is required when creating an non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`. **Character limit**: 13 **Values**:  - `Payment` - `CreditBalance`   # noqa: E501

        :return: The source_type of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ProxyGetRefund.

         Specifies whether the refund is a refund payment or a credit balance. This field is required when creating an non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`. **Character limit**: 13 **Values**:  - `Payment` - `CreditBalance`   # noqa: E501

        :param source_type: The source_type of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this ProxyGetRefund.  # noqa: E501

         The status of the refund. **Character limit**: 10 **Values**: automatically generated:  - `Canceled` - `Error` - `Processed` - `Processing`   # noqa: E501

        :return: The status of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyGetRefund.

         The status of the refund. **Character limit**: 10 **Values**: automatically generated:  - `Canceled` - `Error` - `Processed` - `Processing`   # noqa: E501

        :param status: The status of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def submitted_on(self):
        """Gets the submitted_on of this ProxyGetRefund.  # noqa: E501

         The date when the payment was submitted. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The submitted_on of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_on

    @submitted_on.setter
    def submitted_on(self, submitted_on):
        """Sets the submitted_on of this ProxyGetRefund.

         The date when the payment was submitted. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param submitted_on: The submitted_on of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._submitted_on = submitted_on

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this ProxyGetRefund.  # noqa: E501

         Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite. **Character limit**: 10 **Values**: automatically generated:  - `Processing` - `Yes` - `Error` - `Ignore`   # noqa: E501

        :return: The transferred_to_accounting of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this ProxyGetRefund.

         Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite. **Character limit**: 10 **Values**: automatically generated:  - `Processing` - `Yes` - `Error` - `Ignore`   # noqa: E501

        :param transferred_to_accounting: The transferred_to_accounting of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def type(self):
        """Gets the type of this ProxyGetRefund.  # noqa: E501

         Specifies if the refund is electronic or external. **Character limit**: 10 **Values**:  - `Electronic` - External   # noqa: E501

        :return: The type of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProxyGetRefund.

         Specifies if the refund is electronic or external. **Character limit**: 10 **Values**:  - `Electronic` - External   # noqa: E501

        :param type: The type of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this ProxyGetRefund.  # noqa: E501

         The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The updated_by_id of this ProxyGetRefund.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this ProxyGetRefund.

         The ID of the last user to update the object. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param updated_by_id: The updated_by_id of this ProxyGetRefund.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this ProxyGetRefund.  # noqa: E501

         The date when the object was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :return: The updated_date of this ProxyGetRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ProxyGetRefund.

         The date when the object was last updated. **Character limit**: 29 **Values**: automatically generated   # noqa: E501

        :param updated_date: The updated_date of this ProxyGetRefund.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyGetRefund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyGetRefund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
