# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.account_object_custom_fields import AccountObjectCustomFields  # noqa: F401,E501
from zuora_client.models.account_object_ns_fields import AccountObjectNSFields  # noqa: F401,E501
from zuora_client.models.get_account_summary_type_basic_info_default_payment_method import GETAccountSummaryTypeBasicInfoDefaultPaymentMethod  # noqa: F401,E501


class GETAccountSummaryTypeBasicInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class__ns': 'str',
        'customer_type__ns': 'str',
        'department__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'location__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'str',
        'account_number': 'str',
        'additional_email_addresses': 'list[str]',
        'balance': 'str',
        'batch': 'str',
        'bill_cycle_day': 'str',
        'currency': 'str',
        'default_payment_method': 'GETAccountSummaryTypeBasicInfoDefaultPaymentMethod',
        'id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'last_invoice_date': 'date',
        'last_payment_amount': 'str',
        'last_payment_date': 'date',
        'name': 'str',
        'status': 'str',
        'tags': 'str'
    }

    attribute_map = {
        'class__ns': 'Class__NS',
        'customer_type__ns': 'CustomerType__NS',
        'department__ns': 'Department__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'location__ns': 'Location__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS',
        'account_number': 'accountNumber',
        'additional_email_addresses': 'additionalEmailAddresses',
        'balance': 'balance',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'currency': 'currency',
        'default_payment_method': 'defaultPaymentMethod',
        'id': 'id',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'last_invoice_date': 'lastInvoiceDate',
        'last_payment_amount': 'lastPaymentAmount',
        'last_payment_date': 'lastPaymentDate',
        'name': 'name',
        'status': 'status',
        'tags': 'tags'
    }

    def __init__(self, class__ns=None, customer_type__ns=None, department__ns=None, integration_id__ns=None, integration_status__ns=None, location__ns=None, subsidiary__ns=None, sync_date__ns=None, syncto_net_suite__ns=None, account_number=None, additional_email_addresses=None, balance=None, batch=None, bill_cycle_day=None, currency=None, default_payment_method=None, id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, last_invoice_date=None, last_payment_amount=None, last_payment_date=None, name=None, status=None, tags=None):  # noqa: E501
        """GETAccountSummaryTypeBasicInfo - a model defined in Swagger"""  # noqa: E501

        self._class__ns = None
        self._customer_type__ns = None
        self._department__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._location__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self._account_number = None
        self._additional_email_addresses = None
        self._balance = None
        self._batch = None
        self._bill_cycle_day = None
        self._currency = None
        self._default_payment_method = None
        self._id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._last_invoice_date = None
        self._last_payment_amount = None
        self._last_payment_date = None
        self._name = None
        self._status = None
        self._tags = None
        self.discriminator = None

        if class__ns is not None:
            self.class__ns = class__ns
        if customer_type__ns is not None:
            self.customer_type__ns = customer_type__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns
        if account_number is not None:
            self.account_number = account_number
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if balance is not None:
            self.balance = balance
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if currency is not None:
            self.currency = currency
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if id is not None:
            self.id = id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if last_invoice_date is not None:
            self.last_invoice_date = last_invoice_date
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags

    @property
    def class__ns(self):
        """Gets the class__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this GETAccountSummaryTypeBasicInfo.

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if class__ns is not None and len(class__ns) > 255:
            raise ValueError("Invalid value for `class__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._class__ns = class__ns

    @property
    def customer_type__ns(self):
        """Gets the customer_type__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The customer_type__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._customer_type__ns

    @customer_type__ns.setter
    def customer_type__ns(self, customer_type__ns):
        """Sets the customer_type__ns of this GETAccountSummaryTypeBasicInfo.

        Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param customer_type__ns: The customer_type__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Company", "Individual"]  # noqa: E501
        if customer_type__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type__ns, allowed_values)
            )

        self._customer_type__ns = customer_type__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this GETAccountSummaryTypeBasicInfo.

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if department__ns is not None and len(department__ns) > 255:
            raise ValueError("Invalid value for `department__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._department__ns = department__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this GETAccountSummaryTypeBasicInfo.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this GETAccountSummaryTypeBasicInfo.

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this GETAccountSummaryTypeBasicInfo.

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if location__ns is not None and len(location__ns) > 255:
            raise ValueError("Invalid value for `location__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._location__ns = location__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this GETAccountSummaryTypeBasicInfo.

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if subsidiary__ns is not None and len(subsidiary__ns) > 255:
            raise ValueError("Invalid value for `subsidiary__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this GETAccountSummaryTypeBasicInfo.

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The syncto_net_suite__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this GETAccountSummaryTypeBasicInfo.

        Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param syncto_net_suite__ns: The syncto_net_suite__ns of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if syncto_net_suite__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `syncto_net_suite__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(syncto_net_suite__ns, allowed_values)
            )

        self._syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_number(self):
        """Gets the account_number of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Account number.   # noqa: E501

        :return: The account_number of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GETAccountSummaryTypeBasicInfo.

        Account number.   # noqa: E501

        :param account_number: The account_number of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        A list of additional email addresses to receive emailed invoices.   # noqa: E501

        :return: The additional_email_addresses of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this GETAccountSummaryTypeBasicInfo.

        A list of additional email addresses to receive emailed invoices.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: list[str]
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def balance(self):
        """Gets the balance of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Current outstanding balance.   # noqa: E501

        :return: The balance of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GETAccountSummaryTypeBasicInfo.

        Current outstanding balance.   # noqa: E501

        :param balance: The balance of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def batch(self):
        """Gets the batch of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :return: The batch of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this GETAccountSummaryTypeBasicInfo.

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :param batch: The batch of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.   # noqa: E501

        :return: The bill_cycle_day of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this GETAccountSummaryTypeBasicInfo.

        Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def currency(self):
        """Gets the currency of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        A currency as defined in Billing Settings in the Zuora UI.   # noqa: E501

        :return: The currency of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GETAccountSummaryTypeBasicInfo.

        A currency as defined in Billing Settings in the Zuora UI.   # noqa: E501

        :param currency: The currency of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this GETAccountSummaryTypeBasicInfo.  # noqa: E501


        :return: The default_payment_method of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: GETAccountSummaryTypeBasicInfoDefaultPaymentMethod
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this GETAccountSummaryTypeBasicInfo.


        :param default_payment_method: The default_payment_method of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: GETAccountSummaryTypeBasicInfoDefaultPaymentMethod
        """

        self._default_payment_method = default_payment_method

    @property
    def id(self):
        """Gets the id of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Account ID.   # noqa: E501

        :return: The id of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GETAccountSummaryTypeBasicInfo.

        Account ID.   # noqa: E501

        :param id: The id of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :return: The invoice_delivery_prefs_email of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this GETAccountSummaryTypeBasicInfo.

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this GETAccountSummaryTypeBasicInfo.

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def last_invoice_date(self):
        """Gets the last_invoice_date of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Date of the most recent invoice for the account; null if no invoice has ever been generated.   # noqa: E501

        :return: The last_invoice_date of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: date
        """
        return self._last_invoice_date

    @last_invoice_date.setter
    def last_invoice_date(self, last_invoice_date):
        """Sets the last_invoice_date of this GETAccountSummaryTypeBasicInfo.

        Date of the most recent invoice for the account; null if no invoice has ever been generated.   # noqa: E501

        :param last_invoice_date: The last_invoice_date of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: date
        """

        self._last_invoice_date = last_invoice_date

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Amount of the most recent payment collected for the account; null if no payment has ever been collected.   # noqa: E501

        :return: The last_payment_amount of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this GETAccountSummaryTypeBasicInfo.

        Amount of the most recent payment collected for the account; null if no payment has ever been collected.   # noqa: E501

        :param last_payment_amount: The last_payment_amount of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Date of the most recent payment collected for the account. Null if no payment has ever been collected.   # noqa: E501

        :return: The last_payment_date of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: date
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this GETAccountSummaryTypeBasicInfo.

        Date of the most recent payment collected for the account. Null if no payment has ever been collected.   # noqa: E501

        :param last_payment_date: The last_payment_date of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: date
        """

        self._last_payment_date = last_payment_date

    @property
    def name(self):
        """Gets the name of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Account name.   # noqa: E501

        :return: The name of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GETAccountSummaryTypeBasicInfo.

        Account name.   # noqa: E501

        :param name: The name of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

        Account status; possible values are: `Active`, `Draft`, `Canceled`.   # noqa: E501

        :return: The status of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GETAccountSummaryTypeBasicInfo.

        Account status; possible values are: `Active`, `Draft`, `Canceled`.   # noqa: E501

        :param status: The status of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this GETAccountSummaryTypeBasicInfo.  # noqa: E501

          # noqa: E501

        :return: The tags of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GETAccountSummaryTypeBasicInfo.

          # noqa: E501

        :param tags: The tags of this GETAccountSummaryTypeBasicInfo.  # noqa: E501
        :type: str
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GETAccountSummaryTypeBasicInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GETAccountSummaryTypeBasicInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
