# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.actions_error_response import ActionsErrorResponse  # noqa: F401,E501
from zuora_client.models.charge_metrics_data import ChargeMetricsData  # noqa: F401,E501
from zuora_client.models.invoice_data import InvoiceData  # noqa: F401,E501


class AmendResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amendment_ids': 'list[str]',
        'charge_metrics_data': 'ChargeMetricsData',
        'errors': 'list[ActionsErrorResponse]',
        'gateway_response': 'str',
        'gateway_response_code': 'str',
        'invoice_datas': 'list[InvoiceData]',
        'invoice_id': 'str',
        'payment_id': 'str',
        'payment_transaction_number': 'str',
        'subscription_id': 'str',
        'success': 'bool',
        'total_delta_mrr': 'float',
        'total_delta_tcv': 'float'
    }

    attribute_map = {
        'amendment_ids': 'AmendmentIds',
        'charge_metrics_data': 'ChargeMetricsData',
        'errors': 'Errors',
        'gateway_response': 'GatewayResponse',
        'gateway_response_code': 'GatewayResponseCode',
        'invoice_datas': 'InvoiceDatas',
        'invoice_id': 'InvoiceId',
        'payment_id': 'PaymentId',
        'payment_transaction_number': 'PaymentTransactionNumber',
        'subscription_id': 'SubscriptionId',
        'success': 'Success',
        'total_delta_mrr': 'TotalDeltaMrr',
        'total_delta_tcv': 'TotalDeltaTcv'
    }

    def __init__(self, amendment_ids=None, charge_metrics_data=None, errors=None, gateway_response=None, gateway_response_code=None, invoice_datas=None, invoice_id=None, payment_id=None, payment_transaction_number=None, subscription_id=None, success=None, total_delta_mrr=None, total_delta_tcv=None):  # noqa: E501
        """AmendResult - a model defined in Swagger"""  # noqa: E501

        self._amendment_ids = None
        self._charge_metrics_data = None
        self._errors = None
        self._gateway_response = None
        self._gateway_response_code = None
        self._invoice_datas = None
        self._invoice_id = None
        self._payment_id = None
        self._payment_transaction_number = None
        self._subscription_id = None
        self._success = None
        self._total_delta_mrr = None
        self._total_delta_tcv = None
        self.discriminator = None

        if amendment_ids is not None:
            self.amendment_ids = amendment_ids
        if charge_metrics_data is not None:
            self.charge_metrics_data = charge_metrics_data
        if errors is not None:
            self.errors = errors
        if gateway_response is not None:
            self.gateway_response = gateway_response
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if invoice_datas is not None:
            self.invoice_datas = invoice_datas
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if payment_id is not None:
            self.payment_id = payment_id
        if payment_transaction_number is not None:
            self.payment_transaction_number = payment_transaction_number
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if success is not None:
            self.success = success
        if total_delta_mrr is not None:
            self.total_delta_mrr = total_delta_mrr
        if total_delta_tcv is not None:
            self.total_delta_tcv = total_delta_tcv

    @property
    def amendment_ids(self):
        """Gets the amendment_ids of this AmendResult.  # noqa: E501

        A list of the IDs of the associated amendments. There can be as many as three amendment IDs. Use a comma to separate each amendment ID.   # noqa: E501

        :return: The amendment_ids of this AmendResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._amendment_ids

    @amendment_ids.setter
    def amendment_ids(self, amendment_ids):
        """Sets the amendment_ids of this AmendResult.

        A list of the IDs of the associated amendments. There can be as many as three amendment IDs. Use a comma to separate each amendment ID.   # noqa: E501

        :param amendment_ids: The amendment_ids of this AmendResult.  # noqa: E501
        :type: list[str]
        """

        self._amendment_ids = amendment_ids

    @property
    def charge_metrics_data(self):
        """Gets the charge_metrics_data of this AmendResult.  # noqa: E501


        :return: The charge_metrics_data of this AmendResult.  # noqa: E501
        :rtype: ChargeMetricsData
        """
        return self._charge_metrics_data

    @charge_metrics_data.setter
    def charge_metrics_data(self, charge_metrics_data):
        """Sets the charge_metrics_data of this AmendResult.


        :param charge_metrics_data: The charge_metrics_data of this AmendResult.  # noqa: E501
        :type: ChargeMetricsData
        """

        self._charge_metrics_data = charge_metrics_data

    @property
    def errors(self):
        """Gets the errors of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The errors of this AmendResult.  # noqa: E501
        :rtype: list[ActionsErrorResponse]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this AmendResult.

          # noqa: E501

        :param errors: The errors of this AmendResult.  # noqa: E501
        :type: list[ActionsErrorResponse]
        """

        self._errors = errors

    @property
    def gateway_response(self):
        """Gets the gateway_response of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The gateway_response of this AmendResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response

    @gateway_response.setter
    def gateway_response(self, gateway_response):
        """Sets the gateway_response of this AmendResult.

          # noqa: E501

        :param gateway_response: The gateway_response of this AmendResult.  # noqa: E501
        :type: str
        """

        self._gateway_response = gateway_response

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The gateway_response_code of this AmendResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this AmendResult.

          # noqa: E501

        :param gateway_response_code: The gateway_response_code of this AmendResult.  # noqa: E501
        :type: str
        """

        self._gateway_response_code = gateway_response_code

    @property
    def invoice_datas(self):
        """Gets the invoice_datas of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The invoice_datas of this AmendResult.  # noqa: E501
        :rtype: list[InvoiceData]
        """
        return self._invoice_datas

    @invoice_datas.setter
    def invoice_datas(self, invoice_datas):
        """Sets the invoice_datas of this AmendResult.

          # noqa: E501

        :param invoice_datas: The invoice_datas of this AmendResult.  # noqa: E501
        :type: list[InvoiceData]
        """

        self._invoice_datas = invoice_datas

    @property
    def invoice_id(self):
        """Gets the invoice_id of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The invoice_id of this AmendResult.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this AmendResult.

          # noqa: E501

        :param invoice_id: The invoice_id of this AmendResult.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def payment_id(self):
        """Gets the payment_id of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The payment_id of this AmendResult.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this AmendResult.

          # noqa: E501

        :param payment_id: The payment_id of this AmendResult.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def payment_transaction_number(self):
        """Gets the payment_transaction_number of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The payment_transaction_number of this AmendResult.  # noqa: E501
        :rtype: str
        """
        return self._payment_transaction_number

    @payment_transaction_number.setter
    def payment_transaction_number(self, payment_transaction_number):
        """Sets the payment_transaction_number of this AmendResult.

          # noqa: E501

        :param payment_transaction_number: The payment_transaction_number of this AmendResult.  # noqa: E501
        :type: str
        """

        self._payment_transaction_number = payment_transaction_number

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The subscription_id of this AmendResult.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AmendResult.

          # noqa: E501

        :param subscription_id: The subscription_id of this AmendResult.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def success(self):
        """Gets the success of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The success of this AmendResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this AmendResult.

          # noqa: E501

        :param success: The success of this AmendResult.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def total_delta_mrr(self):
        """Gets the total_delta_mrr of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The total_delta_mrr of this AmendResult.  # noqa: E501
        :rtype: float
        """
        return self._total_delta_mrr

    @total_delta_mrr.setter
    def total_delta_mrr(self, total_delta_mrr):
        """Sets the total_delta_mrr of this AmendResult.

          # noqa: E501

        :param total_delta_mrr: The total_delta_mrr of this AmendResult.  # noqa: E501
        :type: float
        """

        self._total_delta_mrr = total_delta_mrr

    @property
    def total_delta_tcv(self):
        """Gets the total_delta_tcv of this AmendResult.  # noqa: E501

          # noqa: E501

        :return: The total_delta_tcv of this AmendResult.  # noqa: E501
        :rtype: float
        """
        return self._total_delta_tcv

    @total_delta_tcv.setter
    def total_delta_tcv(self, total_delta_tcv):
        """Sets the total_delta_tcv of this AmendResult.

          # noqa: E501

        :param total_delta_tcv: The total_delta_tcv of this AmendResult.  # noqa: E501
        :type: float
        """

        self._total_delta_tcv = total_delta_tcv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmendResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmendResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
