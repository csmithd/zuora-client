# coding: utf-8




import pprint
import re  # noqa: F401

import six

from zuora_client.models.product_rate_plan_charge_object_custom_fields import ProductRatePlanChargeObjectCustomFields  # noqa: F401,E501
from zuora_client.models.product_rate_plan_charge_object_ns_fields import ProductRatePlanChargeObjectNSFields  # noqa: F401,E501


class ProxyCreateProductRatePlanCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class__ns': 'str',
        'deferred_rev_account__ns': 'str',
        'department__ns': 'str',
        'include_children__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'str',
        'location__ns': 'str',
        'recognized_rev_account__ns': 'str',
        'rev_rec_end__ns': 'str',
        'rev_rec_start__ns': 'str',
        'rev_rec_template_type__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'accounting_code': 'str',
        'apply_discount_to': 'str',
        'bill_cycle_day': 'int',
        'bill_cycle_type': 'str',
        'billing_period': 'str',
        'billing_period_alignment': 'str',
        'billing_timing': 'str',
        'charge_model': 'str',
        'charge_type': 'str',
        'default_quantity': 'float',
        'deferred_revenue_account': 'str',
        'description': 'str',
        'discount_level': 'str',
        'end_date_condition': 'str',
        'included_units': 'float',
        'legacy_revenue_reporting': 'bool',
        'list_price_base': 'str',
        'max_quantity': 'float',
        'min_quantity': 'float',
        'name': 'str',
        'number_of_period': 'int',
        'overage_calculation_option': 'str',
        'overage_unused_units_credit_option': 'str',
        'price_change_option': 'str',
        'price_increase_option': 'str',
        'price_increase_percentage': 'float',
        'product_rate_plan_id': 'str',
        'rating_group': 'str',
        'recognized_revenue_account': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'str',
        'revenue_recognition_rule_name': 'str',
        'smoothing_model': 'str',
        'specific_billing_period': 'int',
        'tax_code': 'str',
        'tax_mode': 'str',
        'taxable': 'bool',
        'trigger_event': 'str',
        'uom': 'str',
        'up_to_periods': 'int',
        'up_to_periods_type': 'str',
        'usage_record_rating_option': 'str',
        'use_discount_specific_accounting_code': 'bool',
        'use_tenant_default_for_price_change': 'bool',
        'weekly_bill_cycle_day': 'str'
    }

    attribute_map = {
        'class__ns': 'Class__NS',
        'deferred_rev_account__ns': 'DeferredRevAccount__NS',
        'department__ns': 'Department__NS',
        'include_children__ns': 'IncludeChildren__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'location__ns': 'Location__NS',
        'recognized_rev_account__ns': 'RecognizedRevAccount__NS',
        'rev_rec_end__ns': 'RevRecEnd__NS',
        'rev_rec_start__ns': 'RevRecStart__NS',
        'rev_rec_template_type__ns': 'RevRecTemplateType__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'accounting_code': 'AccountingCode',
        'apply_discount_to': 'ApplyDiscountTo',
        'bill_cycle_day': 'BillCycleDay',
        'bill_cycle_type': 'BillCycleType',
        'billing_period': 'BillingPeriod',
        'billing_period_alignment': 'BillingPeriodAlignment',
        'billing_timing': 'BillingTiming',
        'charge_model': 'ChargeModel',
        'charge_type': 'ChargeType',
        'default_quantity': 'DefaultQuantity',
        'deferred_revenue_account': 'DeferredRevenueAccount',
        'description': 'Description',
        'discount_level': 'DiscountLevel',
        'end_date_condition': 'EndDateCondition',
        'included_units': 'IncludedUnits',
        'legacy_revenue_reporting': 'LegacyRevenueReporting',
        'list_price_base': 'ListPriceBase',
        'max_quantity': 'MaxQuantity',
        'min_quantity': 'MinQuantity',
        'name': 'Name',
        'number_of_period': 'NumberOfPeriod',
        'overage_calculation_option': 'OverageCalculationOption',
        'overage_unused_units_credit_option': 'OverageUnusedUnitsCreditOption',
        'price_change_option': 'PriceChangeOption',
        'price_increase_option': 'PriceIncreaseOption',
        'price_increase_percentage': 'PriceIncreasePercentage',
        'product_rate_plan_id': 'ProductRatePlanId',
        'rating_group': 'RatingGroup',
        'recognized_revenue_account': 'RecognizedRevenueAccount',
        'rev_rec_code': 'RevRecCode',
        'rev_rec_trigger_condition': 'RevRecTriggerCondition',
        'revenue_recognition_rule_name': 'RevenueRecognitionRuleName',
        'smoothing_model': 'SmoothingModel',
        'specific_billing_period': 'SpecificBillingPeriod',
        'tax_code': 'TaxCode',
        'tax_mode': 'TaxMode',
        'taxable': 'Taxable',
        'trigger_event': 'TriggerEvent',
        'uom': 'UOM',
        'up_to_periods': 'UpToPeriods',
        'up_to_periods_type': 'UpToPeriodsType',
        'usage_record_rating_option': 'UsageRecordRatingOption',
        'use_discount_specific_accounting_code': 'UseDiscountSpecificAccountingCode',
        'use_tenant_default_for_price_change': 'UseTenantDefaultForPriceChange',
        'weekly_bill_cycle_day': 'WeeklyBillCycleDay'
    }

    def __init__(self, class__ns=None, deferred_rev_account__ns=None, department__ns=None, include_children__ns=None, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, location__ns=None, recognized_rev_account__ns=None, rev_rec_end__ns=None, rev_rec_start__ns=None, rev_rec_template_type__ns=None, subsidiary__ns=None, sync_date__ns=None, accounting_code=None, apply_discount_to=None, bill_cycle_day=None, bill_cycle_type=None, billing_period=None, billing_period_alignment=None, billing_timing=None, charge_model=None, charge_type=None, default_quantity=None, deferred_revenue_account=None, description=None, discount_level=None, end_date_condition=None, included_units=None, legacy_revenue_reporting=None, list_price_base=None, max_quantity=None, min_quantity=None, name=None, number_of_period=None, overage_calculation_option=None, overage_unused_units_credit_option=None, price_change_option=None, price_increase_option=None, price_increase_percentage=None, product_rate_plan_id=None, rating_group=None, recognized_revenue_account=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, smoothing_model=None, specific_billing_period=None, tax_code=None, tax_mode=None, taxable=None, trigger_event=None, uom=None, up_to_periods=None, up_to_periods_type=None, usage_record_rating_option='EndOfBillingPeriod', use_discount_specific_accounting_code=None, use_tenant_default_for_price_change=None, weekly_bill_cycle_day=None):  # noqa: E501
        """ProxyCreateProductRatePlanCharge - a model defined in Swagger"""  # noqa: E501

        self._class__ns = None
        self._deferred_rev_account__ns = None
        self._department__ns = None
        self._include_children__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._location__ns = None
        self._recognized_rev_account__ns = None
        self._rev_rec_end__ns = None
        self._rev_rec_start__ns = None
        self._rev_rec_template_type__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._accounting_code = None
        self._apply_discount_to = None
        self._bill_cycle_day = None
        self._bill_cycle_type = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._charge_model = None
        self._charge_type = None
        self._default_quantity = None
        self._deferred_revenue_account = None
        self._description = None
        self._discount_level = None
        self._end_date_condition = None
        self._included_units = None
        self._legacy_revenue_reporting = None
        self._list_price_base = None
        self._max_quantity = None
        self._min_quantity = None
        self._name = None
        self._number_of_period = None
        self._overage_calculation_option = None
        self._overage_unused_units_credit_option = None
        self._price_change_option = None
        self._price_increase_option = None
        self._price_increase_percentage = None
        self._product_rate_plan_id = None
        self._rating_group = None
        self._recognized_revenue_account = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._smoothing_model = None
        self._specific_billing_period = None
        self._tax_code = None
        self._tax_mode = None
        self._taxable = None
        self._trigger_event = None
        self._uom = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._usage_record_rating_option = None
        self._use_discount_specific_accounting_code = None
        self._use_tenant_default_for_price_change = None
        self._weekly_bill_cycle_day = None
        self.discriminator = None

        if class__ns is not None:
            self.class__ns = class__ns
        if deferred_rev_account__ns is not None:
            self.deferred_rev_account__ns = deferred_rev_account__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if include_children__ns is not None:
            self.include_children__ns = include_children__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if recognized_rev_account__ns is not None:
            self.recognized_rev_account__ns = recognized_rev_account__ns
        if rev_rec_end__ns is not None:
            self.rev_rec_end__ns = rev_rec_end__ns
        if rev_rec_start__ns is not None:
            self.rev_rec_start__ns = rev_rec_start__ns
        if rev_rec_template_type__ns is not None:
            self.rev_rec_template_type__ns = rev_rec_template_type__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_cycle_type is not None:
            self.bill_cycle_type = bill_cycle_type
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charge_model is not None:
            self.charge_model = charge_model
        if charge_type is not None:
            self.charge_type = charge_type
        if default_quantity is not None:
            self.default_quantity = default_quantity
        if deferred_revenue_account is not None:
            self.deferred_revenue_account = deferred_revenue_account
        if description is not None:
            self.description = description
        if discount_level is not None:
            self.discount_level = discount_level
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if included_units is not None:
            self.included_units = included_units
        if legacy_revenue_reporting is not None:
            self.legacy_revenue_reporting = legacy_revenue_reporting
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if max_quantity is not None:
            self.max_quantity = max_quantity
        if min_quantity is not None:
            self.min_quantity = min_quantity
        if name is not None:
            self.name = name
        if number_of_period is not None:
            self.number_of_period = number_of_period
        if overage_calculation_option is not None:
            self.overage_calculation_option = overage_calculation_option
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_option is not None:
            self.price_increase_option = price_increase_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if rating_group is not None:
            self.rating_group = rating_group
        if recognized_revenue_account is not None:
            self.recognized_revenue_account = recognized_revenue_account
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if smoothing_model is not None:
            self.smoothing_model = smoothing_model
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if taxable is not None:
            self.taxable = taxable
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if uom is not None:
            self.uom = uom
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if usage_record_rating_option is not None:
            self.usage_record_rating_option = usage_record_rating_option
        if use_discount_specific_accounting_code is not None:
            self.use_discount_specific_accounting_code = use_discount_specific_accounting_code
        if use_tenant_default_for_price_change is not None:
            self.use_tenant_default_for_price_change = use_tenant_default_for_price_change
        if weekly_bill_cycle_day is not None:
            self.weekly_bill_cycle_day = weekly_bill_cycle_day

    @property
    def class__ns(self):
        """Gets the class__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this ProxyCreateProductRatePlanCharge.

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if class__ns is not None and len(class__ns) > 255:
            raise ValueError("Invalid value for `class__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._class__ns = class__ns

    @property
    def deferred_rev_account__ns(self):
        """Gets the deferred_rev_account__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The deferred_rev_account__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._deferred_rev_account__ns

    @deferred_rev_account__ns.setter
    def deferred_rev_account__ns(self, deferred_rev_account__ns):
        """Sets the deferred_rev_account__ns of this ProxyCreateProductRatePlanCharge.

        Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param deferred_rev_account__ns: The deferred_rev_account__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if deferred_rev_account__ns is not None and len(deferred_rev_account__ns) > 255:
            raise ValueError("Invalid value for `deferred_rev_account__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._deferred_rev_account__ns = deferred_rev_account__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this ProxyCreateProductRatePlanCharge.

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if department__ns is not None and len(department__ns) > 255:
            raise ValueError("Invalid value for `department__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._department__ns = department__ns

    @property
    def include_children__ns(self):
        """Gets the include_children__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The include_children__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._include_children__ns

    @include_children__ns.setter
    def include_children__ns(self, include_children__ns):
        """Sets the include_children__ns of this ProxyCreateProductRatePlanCharge.

        Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param include_children__ns: The include_children__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if include_children__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `include_children__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(include_children__ns, allowed_values)
            )

        self._include_children__ns = include_children__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this ProxyCreateProductRatePlanCharge.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if integration_id__ns is not None and len(integration_id__ns) > 255:
            raise ValueError("Invalid value for `integration_id__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this ProxyCreateProductRatePlanCharge.

        Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if integration_status__ns is not None and len(integration_status__ns) > 255:
            raise ValueError("Invalid value for `integration_status__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Type of item that is created in NetSuite for the product rate plan charge. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The item_type__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this ProxyCreateProductRatePlanCharge.

        Type of item that is created in NetSuite for the product rate plan charge. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param item_type__ns: The item_type__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["Inventory", "Non Inventory", "Service"]  # noqa: E501
        if item_type__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(item_type__ns, allowed_values)
            )

        self._item_type__ns = item_type__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this ProxyCreateProductRatePlanCharge.

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if location__ns is not None and len(location__ns) > 255:
            raise ValueError("Invalid value for `location__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._location__ns = location__ns

    @property
    def recognized_rev_account__ns(self):
        """Gets the recognized_rev_account__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The recognized_rev_account__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._recognized_rev_account__ns

    @recognized_rev_account__ns.setter
    def recognized_rev_account__ns(self, recognized_rev_account__ns):
        """Sets the recognized_rev_account__ns of this ProxyCreateProductRatePlanCharge.

        Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param recognized_rev_account__ns: The recognized_rev_account__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if recognized_rev_account__ns is not None and len(recognized_rev_account__ns) > 255:
            raise ValueError("Invalid value for `recognized_rev_account__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._recognized_rev_account__ns = recognized_rev_account__ns

    @property
    def rev_rec_end__ns(self):
        """Gets the rev_rec_end__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        End date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_end__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_end__ns

    @rev_rec_end__ns.setter
    def rev_rec_end__ns(self, rev_rec_end__ns):
        """Sets the rev_rec_end__ns of this ProxyCreateProductRatePlanCharge.

        End date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_end__ns: The rev_rec_end__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["Charge Period Start", "Rev Rec Trigger Date", "Use NetSuite Rev Rec Template"]  # noqa: E501
        if rev_rec_end__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `rev_rec_end__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(rev_rec_end__ns, allowed_values)
            )

        self._rev_rec_end__ns = rev_rec_end__ns

    @property
    def rev_rec_start__ns(self):
        """Gets the rev_rec_start__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Start date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_start__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_start__ns

    @rev_rec_start__ns.setter
    def rev_rec_start__ns(self, rev_rec_start__ns):
        """Sets the rev_rec_start__ns of this ProxyCreateProductRatePlanCharge.

        Start date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_start__ns: The rev_rec_start__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["Charge Period Start", "Rev Rec Trigger Date", "Use NetSuite Rev Rec Template"]  # noqa: E501
        if rev_rec_start__ns not in allowed_values:
            raise ValueError(
                "Invalid value for `rev_rec_start__ns` ({0}), must be one of {1}"  # noqa: E501
                .format(rev_rec_start__ns, allowed_values)
            )

        self._rev_rec_start__ns = rev_rec_start__ns

    @property
    def rev_rec_template_type__ns(self):
        """Gets the rev_rec_template_type__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_template_type__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_template_type__ns

    @rev_rec_template_type__ns.setter
    def rev_rec_template_type__ns(self, rev_rec_template_type__ns):
        """Sets the rev_rec_template_type__ns of this ProxyCreateProductRatePlanCharge.

        Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_template_type__ns: The rev_rec_template_type__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if rev_rec_template_type__ns is not None and len(rev_rec_template_type__ns) > 255:
            raise ValueError("Invalid value for `rev_rec_template_type__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._rev_rec_template_type__ns = rev_rec_template_type__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this ProxyCreateProductRatePlanCharge.

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if subsidiary__ns is not None and len(subsidiary__ns) > 255:
            raise ValueError("Invalid value for `subsidiary__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this ProxyCreateProductRatePlanCharge.

        Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        if sync_date__ns is not None and len(sync_date__ns) > 255:
            raise ValueError("Invalid value for `sync_date__ns`, length must be less than or equal to `255`")  # noqa: E501

        self._sync_date__ns = sync_date__ns

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts   # noqa: E501

        :return: The accounting_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyCreateProductRatePlanCharge.

        The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes. **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive: note that these values are in all-caps. **Character limit**: 21 **Values**: one of the following:  - `ONETIME (1)` - `RECURRING (2)` - `USAGE (4)` - `ONETIMERECURRING (3)` - `ONETIMEUSAGE (5)` - `RECURRINGUSAGE (6)` - `ONETIMERECURRINGUSAGE (7)`   # noqa: E501

        :return: The apply_discount_to of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this ProxyCreateProductRatePlanCharge.

        Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive: note that these values are in all-caps. **Character limit**: 21 **Values**: one of the following:  - `ONETIME (1)` - `RECURRING (2)` - `USAGE (4)` - `ONETIMERECURRING (3)` - `ONETIMEUSAGE (5)` - `RECURRINGUSAGE (6)` - `ONETIMERECURRINGUSAGE (7)`   # noqa: E501

        :param apply_discount_to: The apply_discount_to of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._apply_discount_to = apply_discount_to

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object. **Character limit**: 2 **Values**: a valid BCD integer, 1 - 31   # noqa: E501

        :return: The bill_cycle_day of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this ProxyCreateProductRatePlanCharge.

         Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object. **Character limit**: 2 **Values**: a valid BCD integer, 1 - 31   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_cycle_type(self):
        """Gets the bill_cycle_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies how to determine the billing day for the charge. **Character limit**: 20 **Values**: one of the following:  - `DefaultFromCustomer` - `SpecificDayofMonth:` - `SubscriptionStartDay` - `ChargeTriggerDay` - `SpecificDayofWeek` **Note**:  - If you set this field to `SpecificDayofMonth`, you must specify which day of the month as the billing day for the charge in the BillCycleDay field. - If you set this field to `SpecificDayofWeek`, you must specify which day of the week as the billing day for the charge in the WeeklyBillCycleDay field.   # noqa: E501

        :return: The bill_cycle_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_type

    @bill_cycle_type.setter
    def bill_cycle_type(self, bill_cycle_type):
        """Sets the bill_cycle_type of this ProxyCreateProductRatePlanCharge.

         Specifies how to determine the billing day for the charge. **Character limit**: 20 **Values**: one of the following:  - `DefaultFromCustomer` - `SpecificDayofMonth:` - `SubscriptionStartDay` - `ChargeTriggerDay` - `SpecificDayofWeek` **Note**:  - If you set this field to `SpecificDayofMonth`, you must specify which day of the month as the billing day for the charge in the BillCycleDay field. - If you set this field to `SpecificDayofWeek`, you must specify which day of the week as the billing day for the charge in the WeeklyBillCycleDay field.   # noqa: E501

        :param bill_cycle_type: The bill_cycle_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._bill_cycle_type = bill_cycle_type

    @property
    def billing_period(self):
        """Gets the billing_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD). **Character limit**: 15 **Values**: one of the following  - `Month` - `Quarter` - `Annual` - `Semi-Annual` - `Specific Months` - `Subscription Term` (This value is in **Limited Availability**.) - `Week` - `Specific Weeks` **Note**: Specify the number of months or weeks in the SpecificBillingPeriod field if you set this field to `Specific Months` or `Specific Weeks`.   # noqa: E501

        :return: The billing_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this ProxyCreateProductRatePlanCharge.

         The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD). **Character limit**: 15 **Values**: one of the following  - `Month` - `Quarter` - `Annual` - `Semi-Annual` - `Specific Months` - `Subscription Term` (This value is in **Limited Availability**.) - `Week` - `Specific Weeks` **Note**: Specify the number of months or weeks in the SpecificBillingPeriod field if you set this field to `Specific Months` or `Specific Weeks`.   # noqa: E501

        :param billing_period: The billing_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Aligns charges within the same subscription if multiple charges begin on different dates. **Character limit**: 24 **Values**: one of the following:  - `AlignToCharge` - `AlignToSubscriptionStart` - `AlignToTermStart`   # noqa: E501

        :return: The billing_period_alignment of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this ProxyCreateProductRatePlanCharge.

         Aligns charges within the same subscription if multiple charges begin on different dates. **Character limit**: 24 **Values**: one of the following:  - `AlignToCharge` - `AlignToSubscriptionStart` - `AlignToTermStart`   # noqa: E501

        :param billing_period_alignment: The billing_period_alignment of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types. **Character limit**: **Values**: one of the following:  - `In Advance` - `In Arrears`  This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The billing_timing of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this ProxyCreateProductRatePlanCharge.

         The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types. **Character limit**: **Values**: one of the following:  - `In Advance` - `In Arrears`  This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param billing_timing: The billing_timing of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._billing_timing = billing_timing

    @property
    def charge_model(self):
        """Gets the charge_model of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration. **Character limit**: 27 **Values**: one of the following:  - `Discount-Fixed Amount` - `Discount-Percentage` - `Flat Fee Pricing` - `Per Unit Pricing` - `Overage Pricing` - `Tiered Pricing` - `Tiered with Overage Pricing` - `Volume Pricing`   # noqa: E501

        :return: The charge_model of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """Sets the charge_model of this ProxyCreateProductRatePlanCharge.

         Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration. **Character limit**: 27 **Values**: one of the following:  - `Discount-Fixed Amount` - `Discount-Percentage` - `Flat Fee Pricing` - `Per Unit Pricing` - `Overage Pricing` - `Tiered Pricing` - `Tiered with Overage Pricing` - `Volume Pricing`   # noqa: E501

        :param charge_model: The charge_model of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._charge_model = charge_model

    @property
    def charge_type(self):
        """Gets the charge_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the type of charge. **Character limit**: 9 **Values**: one of the following:  - `OneTime` - `Recurring` - `Usage`   # noqa: E501

        :return: The charge_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this ProxyCreateProductRatePlanCharge.

         Specifies the type of charge. **Character limit**: 9 **Values**: one of the following:  - `OneTime` - `Recurring` - `Usage`   # noqa: E501

        :param charge_type: The charge_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def default_quantity(self):
        """Gets the default_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model. **Character limit**: 16 **Values**: a valid quantity value   # noqa: E501

        :return: The default_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._default_quantity

    @default_quantity.setter
    def default_quantity(self, default_quantity):
        """Sets the default_quantity of this ProxyCreateProductRatePlanCharge.

         The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model. **Character limit**: 16 **Values**: a valid quantity value   # noqa: E501

        :param default_quantity: The default_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._default_quantity = default_quantity

    @property
    def deferred_revenue_account(self):
        """Gets the deferred_revenue_account of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The name of the deferred revenue account for this charge. **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The deferred_revenue_account of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_account

    @deferred_revenue_account.setter
    def deferred_revenue_account(self, deferred_revenue_account):
        """Sets the deferred_revenue_account of this ProxyCreateProductRatePlanCharge.

         The name of the deferred revenue account for this charge. **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param deferred_revenue_account: The deferred_revenue_account of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_account = deferred_revenue_account

    @property
    def description(self):
        """Gets the description of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        A description of the charge. **Character limit**: 500 **Values**: a string of 500 characters or fewer   # noqa: E501

        :return: The description of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProxyCreateProductRatePlanCharge.

        A description of the charge. **Character limit**: 500 **Values**: a string of 500 characters or fewer   # noqa: E501

        :param description: The description of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_level(self):
        """Gets the discount_level of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. **Character limit**: 12 **Values**: one of the following:  - `rateplan` - `subscription`, `account`   # noqa: E501

        :return: The discount_level of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this ProxyCreateProductRatePlanCharge.

         Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. **Character limit**: 12 **Values**: one of the following:  - `rateplan` - `subscription`, `account`   # noqa: E501

        :param discount_level: The discount_level of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._discount_level = discount_level

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Defines when the charge ends after the charge trigger date. **Values**: one of the following:  - `SubscriptionEnd`: The charge ends on the subscription end date after a specified period based on the trigger date of the charge. This is the default value. - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.   # noqa: E501

        :return: The end_date_condition of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this ProxyCreateProductRatePlanCharge.

         Defines when the charge ends after the charge trigger date. **Values**: one of the following:  - `SubscriptionEnd`: The charge ends on the subscription end date after a specified period based on the trigger date of the charge. This is the default value. - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.   # noqa: E501

        :param end_date_condition: The end_date_condition of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._end_date_condition = end_date_condition

    @property
    def included_units(self):
        """Gets the included_units of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Specifies the number of units in the base set of units. **Character limit**: 16 **Values**: a positive decimal value   # noqa: E501

        :return: The included_units of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this ProxyCreateProductRatePlanCharge.

        Specifies the number of units in the base set of units. **Character limit**: 16 **Values**: a positive decimal value   # noqa: E501

        :param included_units: The included_units of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._included_units = included_units

    @property
    def legacy_revenue_reporting(self):
        """Gets the legacy_revenue_reporting of this ProxyCreateProductRatePlanCharge.  # noqa: E501

          # noqa: E501

        :return: The legacy_revenue_reporting of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_revenue_reporting

    @legacy_revenue_reporting.setter
    def legacy_revenue_reporting(self, legacy_revenue_reporting):
        """Sets the legacy_revenue_reporting of this ProxyCreateProductRatePlanCharge.

          # noqa: E501

        :param legacy_revenue_reporting: The legacy_revenue_reporting of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: bool
        """

        self._legacy_revenue_reporting = legacy_revenue_reporting

    @property
    def list_price_base(self):
        """Gets the list_price_base of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        The list price base for the product rate plan charge. **Values**: one of the following:  - `Per Month` - `Per Billing Period` - `Per Week`   # noqa: E501

        :return: The list_price_base of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this ProxyCreateProductRatePlanCharge.

        The list price base for the product rate plan charge. **Values**: one of the following:  - `Per Month` - `Per Billing Period` - `Per Week`   # noqa: E501

        :param list_price_base: The list_price_base of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._list_price_base = list_price_base

    @property
    def max_quantity(self):
        """Gets the max_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge. **Character limit**: 16 **Values**: a positive decimal value   # noqa: E501

        :return: The max_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this ProxyCreateProductRatePlanCharge.

         Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge. **Character limit**: 16 **Values**: a positive decimal value   # noqa: E501

        :param max_quantity: The max_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._max_quantity = max_quantity

    @property
    def min_quantity(self):
        """Gets the min_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge. **Character limit**: 16 **Values**: a positive decimal value   # noqa: E501

        :return: The min_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this ProxyCreateProductRatePlanCharge.

        Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge. **Character limit**: 16 **Values**: a positive decimal value   # noqa: E501

        :param min_quantity: The min_quantity of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._min_quantity = min_quantity

    @property
    def name(self):
        """Gets the name of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        The name of the product rate plan charge. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :return: The name of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProxyCreateProductRatePlanCharge.

        The name of the product rate plan charge. **Character limit**: 100 **Values**: a string of 100 characters or fewer   # noqa: E501

        :param name: The name of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_period(self):
        """Gets the number_of_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model. **Character limit**: **Values**: a positive whole number   # noqa: E501

        :return: The number_of_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._number_of_period

    @number_of_period.setter
    def number_of_period(self, number_of_period):
        """Sets the number_of_period of this ProxyCreateProductRatePlanCharge.

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model. **Character limit**: **Values**: a positive whole number   # noqa: E501

        :param number_of_period: The number_of_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._number_of_period = number_of_period

    @property
    def overage_calculation_option(self):
        """Gets the overage_calculation_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored. **Character limit**: 20 **Values**: one of the following:  - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period. - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.   # noqa: E501

        :return: The overage_calculation_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._overage_calculation_option

    @overage_calculation_option.setter
    def overage_calculation_option(self, overage_calculation_option):
        """Sets the overage_calculation_option of this ProxyCreateProductRatePlanCharge.

        Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored. **Character limit**: 20 **Values**: one of the following:  - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period. - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.   # noqa: E501

        :param overage_calculation_option: The overage_calculation_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._overage_calculation_option = overage_calculation_option

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Determines whether to credit the customer with unused units of usage. **Character limit**: 20 **Values**: one of the following:  - `NoCredit` - `CreditBySpecificRate`   # noqa: E501

        :return: The overage_unused_units_credit_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this ProxyCreateProductRatePlanCharge.

         Determines whether to credit the customer with unused units of usage. **Character limit**: 20 **Values**: one of the following:  - `NoCredit` - `CreditBySpecificRate`   # noqa: E501

        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def price_change_option(self):
        """Gets the price_change_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Applies an automatic price change when a termed subscription is renewed. **Character limit**: **Values**: one of the following:  - `NoChange` (default) - `SpecificPercentageValue` - `UseLatestProductCatalogPricing`   # noqa: E501

        :return: The price_change_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this ProxyCreateProductRatePlanCharge.

         Applies an automatic price change when a termed subscription is renewed. **Character limit**: **Values**: one of the following:  - `NoChange` (default) - `SpecificPercentageValue` - `UseLatestProductCatalogPricing`   # noqa: E501

        :param price_change_option: The price_change_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_option(self):
        """Gets the price_increase_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Applies an automatic price change when a termed subscription is renewed.   # noqa: E501

        :return: The price_increase_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._price_increase_option

    @price_increase_option.setter
    def price_increase_option(self, price_increase_option):
        """Sets the price_increase_option of this ProxyCreateProductRatePlanCharge.

        Applies an automatic price change when a termed subscription is renewed.   # noqa: E501

        :param price_increase_option: The price_increase_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["FromTenantPercentageValue", "SpecificPercentageValue"]  # noqa: E501
        if price_increase_option not in allowed_values:
            raise ValueError(
                "Invalid value for `price_increase_option` ({0}), must be one of {1}"  # noqa: E501
                .format(price_increase_option, allowed_values)
            )

        self._price_increase_option = price_increase_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`. **Character limit**: 16 **Values**: a decimal value between -100 and 100   # noqa: E501

        :return: The price_increase_percentage of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: float
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this ProxyCreateProductRatePlanCharge.

         Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`. **Character limit**: 16 **Values**: a decimal value between -100 and 100   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: float
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The ID of the product rate plan associated with this product rate plan charge. **Character limit**: 32 **Values**: a valid product rate plan ID   # noqa: E501

        :return: The product_rate_plan_id of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this ProxyCreateProductRatePlanCharge.

         The ID of the product rate plan associated with this product rate plan charge. **Character limit**: 32 **Values**: a valid product rate plan ID   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def rating_group(self):
        """Gets the rating_group of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Specifies a rating group based on which usage records are rated.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have [Active Rating](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/H_Active_Rating) feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :return: The rating_group of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this ProxyCreateProductRatePlanCharge.

        Specifies a rating group based on which usage records are rated.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have [Active Rating](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/H_Active_Rating) feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :param rating_group: The rating_group of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rating_group = rating_group

    @property
    def recognized_revenue_account(self):
        """Gets the recognized_revenue_account of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The name of the recognized revenue account for this charge.  - Required when the Allow Blank Accounting Code setting is No. - Optional when the Allow Blank Accounting Code setting is Yes.  **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The recognized_revenue_account of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_account

    @recognized_revenue_account.setter
    def recognized_revenue_account(self, recognized_revenue_account):
        """Sets the recognized_revenue_account of this ProxyCreateProductRatePlanCharge.

         The name of the recognized revenue account for this charge.  - Required when the Allow Blank Accounting Code setting is No. - Optional when the Allow Blank Accounting Code setting is Yes.  **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param recognized_revenue_account: The recognized_revenue_account of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_account = recognized_revenue_account

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Associates this product rate plan charge with a specific revenue recognition code. **Character limit**: 70 **Values**: a valid revenue recognition code   # noqa: E501

        :return: The rev_rec_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this ProxyCreateProductRatePlanCharge.

        Associates this product rate plan charge with a specific revenue recognition code. **Character limit**: 70 **Values**: a valid revenue recognition code   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies when revenue recognition begins. **Character limit**: 22 **Values**: one of the following:  - `ContractEffectiveDate` - `ServiceActivationDate` - `CustomerAcceptanceDate`   # noqa: E501

        :return: The rev_rec_trigger_condition of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this ProxyCreateProductRatePlanCharge.

         Specifies when revenue recognition begins. **Character limit**: 22 **Values**: one of the following:  - `ContractEffectiveDate` - `ServiceActivationDate` - `CustomerAcceptanceDate`   # noqa: E501

        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Determines when to recognize the revenue for this charge. **Character limit**: 25 **Values**: one of the following:  - `Recognize upon invoicing` - `Recognize daily over time`   # noqa: E501

        :return: The revenue_recognition_rule_name of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this ProxyCreateProductRatePlanCharge.

        Determines when to recognize the revenue for this charge. **Character limit**: 25 **Values**: one of the following:  - `Recognize upon invoicing` - `Recognize daily over time`   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def smoothing_model(self):
        """Gets the smoothing_model of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the smoothing model for an overage smoothing charge model. **Character limit**: 22 **Values**: one of the following:  - `RollingWindow` - `Rollover`   # noqa: E501

        :return: The smoothing_model of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._smoothing_model

    @smoothing_model.setter
    def smoothing_model(self, smoothing_model):
        """Sets the smoothing_model of this ProxyCreateProductRatePlanCharge.

         Specifies the smoothing model for an overage smoothing charge model. **Character limit**: 22 **Values**: one of the following:  - `RollingWindow` - `Rollover`   # noqa: E501

        :param smoothing_model: The smoothing_model of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._smoothing_model = smoothing_model

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`. **Values**: a positive integer   # noqa: E501

        :return: The specific_billing_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this ProxyCreateProductRatePlanCharge.

         Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`. **Values**: a positive integer   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def tax_code(self):
        """Gets the tax_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.  **Character limit**: 64  **Values**: a valid tax code  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :return: The tax_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this ProxyCreateProductRatePlanCharge.

         Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.  **Character limit**: 64  **Values**: a valid tax code  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :param tax_code: The tax_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Determines how to define taxation for the charge. Required when the Taxable field is set to `True`.  **Character limit**: 12  **Values**: one of the following:  - `TaxExclusive` - `TaxInclusive`  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :return: The tax_mode of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this ProxyCreateProductRatePlanCharge.

         Determines how to define taxation for the charge. Required when the Taxable field is set to `True`.  **Character limit**: 12  **Values**: one of the following:  - `TaxExclusive` - `TaxInclusive`  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :param tax_mode: The tax_mode of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._tax_mode = tax_mode

    @property
    def taxable(self):
        """Gets the taxable of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.  **Character limit**: 5  **Values**: `True`, `False`  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :return: The taxable of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this ProxyCreateProductRatePlanCharge.

         Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.  **Character limit**: 5  **Values**: `True`, `False`  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :param taxable: The taxable of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: bool
        """

        self._taxable = taxable

    @property
    def trigger_event(self):
        """Gets the trigger_event of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies when to start billing the customer for the charge. **Character limit**: 18 **Values**: one of the following:  - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.   # noqa: E501

        :return: The trigger_event of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this ProxyCreateProductRatePlanCharge.

         Specifies when to start billing the customer for the charge. **Character limit**: 18 **Values**: one of the following:  - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed. - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access. - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.   # noqa: E501

        :param trigger_event: The trigger_event of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._trigger_event = trigger_event

    @property
    def uom(self):
        """Gets the uom of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the units to measure usage. **Character limit**: 25 **Values**: a configured unit of measure **Note**: You must specify this field when creating the following charge models:  - Per Unit Pricing - Volume Pricing - Overage Pricing - Tiered Pricing - Tiered with Overage Pricing   # noqa: E501

        :return: The uom of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this ProxyCreateProductRatePlanCharge.

         Specifies the units to measure usage. **Character limit**: 25 **Values**: a configured unit of measure **Note**: You must specify this field when creating the following charge models:  - Per Unit Pricing - Volume Pricing - Overage Pricing - Tiered Pricing - Tiered with Overage Pricing   # noqa: E501

        :param uom: The uom of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends. **Character limit**: 5 **Values**: a whole number between 0 and 65535, exclusive **Note**:  - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :return: The up_to_periods of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this ProxyCreateProductRatePlanCharge.

         Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends. **Character limit**: 5 **Values**: a whole number between 0 and 65535, exclusive **Note**:  - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :param up_to_periods: The up_to_periods of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         The period type used to define when the charge ends. **Character limit**: -- **Values**: one of the following:  - `Billing Periods` (default) - `Days` - `Weeks` - `Months` - Years **Note**:  - You must use this field together with the `UpToPeriods` field to specify the time period. - This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.   # noqa: E501

        :return: The up_to_periods_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this ProxyCreateProductRatePlanCharge.

         The period type used to define when the charge ends. **Character limit**: -- **Values**: one of the following:  - `Billing Periods` (default) - `Days` - `Weeks` - `Months` - Years **Note**:  - You must use this field together with the `UpToPeriods` field to specify the time period. - This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.   # noqa: E501

        :param up_to_periods_type: The up_to_periods_type of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def usage_record_rating_option(self):
        """Gets the usage_record_rating_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Determines how Zuora processes usage records for per-unit usage charges.    # noqa: E501

        :return: The usage_record_rating_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._usage_record_rating_option

    @usage_record_rating_option.setter
    def usage_record_rating_option(self, usage_record_rating_option):
        """Sets the usage_record_rating_option of this ProxyCreateProductRatePlanCharge.

        Determines how Zuora processes usage records for per-unit usage charges.    # noqa: E501

        :param usage_record_rating_option: The usage_record_rating_option of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["EndOfBillingPeriod", "OnDemand"]  # noqa: E501
        if usage_record_rating_option not in allowed_values:
            raise ValueError(
                "Invalid value for `usage_record_rating_option` ({0}), must be one of {1}"  # noqa: E501
                .format(usage_record_rating_option, allowed_values)
            )

        self._usage_record_rating_option = usage_record_rating_option

    @property
    def use_discount_specific_accounting_code(self):
        """Gets the use_discount_specific_accounting_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501

        Determines whether to define a new accounting code for the new discount charge. **Character limit**: 5 **Values**: `True`, `False`   # noqa: E501

        :return: The use_discount_specific_accounting_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: bool
        """
        return self._use_discount_specific_accounting_code

    @use_discount_specific_accounting_code.setter
    def use_discount_specific_accounting_code(self, use_discount_specific_accounting_code):
        """Sets the use_discount_specific_accounting_code of this ProxyCreateProductRatePlanCharge.

        Determines whether to define a new accounting code for the new discount charge. **Character limit**: 5 **Values**: `True`, `False`   # noqa: E501

        :param use_discount_specific_accounting_code: The use_discount_specific_accounting_code of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: bool
        """

        self._use_discount_specific_accounting_code = use_discount_specific_accounting_code

    @property
    def use_tenant_default_for_price_change(self):
        """Gets the use_tenant_default_for_price_change of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. **Character limit**: 5 **Values**: `true`, `false`   # noqa: E501

        :return: The use_tenant_default_for_price_change of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: bool
        """
        return self._use_tenant_default_for_price_change

    @use_tenant_default_for_price_change.setter
    def use_tenant_default_for_price_change(self, use_tenant_default_for_price_change):
        """Sets the use_tenant_default_for_price_change of this ProxyCreateProductRatePlanCharge.

         Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. **Character limit**: 5 **Values**: `true`, `false`   # noqa: E501

        :param use_tenant_default_for_price_change: The use_tenant_default_for_price_change of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: bool
        """

        self._use_tenant_default_for_price_change = use_tenant_default_for_price_change

    @property
    def weekly_bill_cycle_day(self):
        """Gets the weekly_bill_cycle_day of this ProxyCreateProductRatePlanCharge.  # noqa: E501

         Specifies which day of the week as the bill cycle day (BCD) for the charge. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Values**: one of the following:  - `Sunday` - `Monday` - `Tuesday` - `Wednesday` - `Thursday` - `Friday` - `Saturday`   # noqa: E501

        :return: The weekly_bill_cycle_day of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :rtype: str
        """
        return self._weekly_bill_cycle_day

    @weekly_bill_cycle_day.setter
    def weekly_bill_cycle_day(self, weekly_bill_cycle_day):
        """Sets the weekly_bill_cycle_day of this ProxyCreateProductRatePlanCharge.

         Specifies which day of the week as the bill cycle day (BCD) for the charge. This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  **Values**: one of the following:  - `Sunday` - `Monday` - `Tuesday` - `Wednesday` - `Thursday` - `Friday` - `Saturday`   # noqa: E501

        :param weekly_bill_cycle_day: The weekly_bill_cycle_day of this ProxyCreateProductRatePlanCharge.  # noqa: E501
        :type: str
        """

        self._weekly_bill_cycle_day = weekly_bill_cycle_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCreateProductRatePlanCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCreateProductRatePlanCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
