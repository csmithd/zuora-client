# coding: utf-8




from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zuora_client.api_client import ApiClient


class PaymentRunsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def d_elete_payment_run(self, payment_run_id, **kwargs):  # noqa: E501
        """Delete payment run  # noqa: E501

        Deletes a payment run. Only payment runs with the Canceled or Error status can be deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_elete_payment_run(payment_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :return: CommonResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.d_elete_payment_run_with_http_info(payment_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_elete_payment_run_with_http_info(payment_run_id, **kwargs)  # noqa: E501
            return data

    def d_elete_payment_run_with_http_info(self, payment_run_id, **kwargs):  # noqa: E501
        """Delete payment run  # noqa: E501

        Deletes a payment run. Only payment runs with the Canceled or Error status can be deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_elete_payment_run_with_http_info(payment_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :return: CommonResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_elete_payment_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_run_id' is set
        if ('payment_run_id' not in params or
                params['payment_run_id'] is None):
            raise ValueError("Missing the required parameter `payment_run_id` when calling `d_elete_payment_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_run_id' in params:
            path_params['paymentRunId'] = params['payment_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment-runs/{paymentRunId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_payment_run(self, payment_run_id, **kwargs):  # noqa: E501
        """Get payment run  # noqa: E501

        Retrives the information about a specific payment run.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_payment_run(payment_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETPaymentRunType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_payment_run_with_http_info(payment_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_payment_run_with_http_info(payment_run_id, **kwargs)  # noqa: E501
            return data

    def g_et_payment_run_with_http_info(self, payment_run_id, **kwargs):  # noqa: E501
        """Get payment run  # noqa: E501

        Retrives the information about a specific payment run.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_payment_run_with_http_info(payment_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETPaymentRunType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_run_id', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_payment_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_run_id' is set
        if ('payment_run_id' not in params or
                params['payment_run_id'] is None):
            raise ValueError("Missing the required parameter `payment_run_id` when calling `g_et_payment_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_run_id' in params:
            path_params['paymentRunId'] = params['payment_run_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment-runs/{paymentRunId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETPaymentRunType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_payment_run_summary(self, payment_run_id, **kwargs):  # noqa: E501
        """Get payment run summary  # noqa: E501

        Retrives the summary of a payment run.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_payment_run_summary(payment_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :return: GETPaymentRunSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_payment_run_summary_with_http_info(payment_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_payment_run_summary_with_http_info(payment_run_id, **kwargs)  # noqa: E501
            return data

    def g_et_payment_run_summary_with_http_info(self, payment_run_id, **kwargs):  # noqa: E501
        """Get payment run summary  # noqa: E501

        Retrives the summary of a payment run.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_payment_run_summary_with_http_info(payment_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :return: GETPaymentRunSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_payment_run_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_run_id' is set
        if ('payment_run_id' not in params or
                params['payment_run_id'] is None):
            raise ValueError("Missing the required parameter `payment_run_id` when calling `g_et_payment_run_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_run_id' in params:
            path_params['paymentRunId'] = params['payment_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment-runs/{paymentRunId}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETPaymentRunSummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_payment_runs(self, **kwargs):  # noqa: E501
        """Get payment runs  # noqa: E501

        Retrieves the information about all payment runs. You can define filterable fields to restrict the data returned in the response.  ### Filtering  You can use query parameters to restrict the data returned in the response. Each query parameter corresponds to one field in the response body.  If the value of a filterable field is string, you can set the corresponding query parameter to `null` when filtering. Then, you can get the response data with this field value being `null`.   Examples:  - /v1/payment-runs?status=Processed  - /v1/payment-runs?targetDate=2017-10-10&status=Pending  - /v1/payment-runs?status=Completed&sort=+updatedDate   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_payment_runs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :param int page_size: Number of rows returned per page.
        :param str created_by_id: This parameter filters the response based on the `createdById` field.
        :param datetime created_date: This parameter filters the response based on the `createdDate` field.
        :param str status: This parameter filters the response based on the `status` field.
        :param date target_date: This parameter filters the response based on the `targetDate` field.
        :param str updated_by_id: This parameter filters the response based on the `updatedById` field.
        :param datetime updated_date: This parameter filters the response based on the `updatedDate` field.
        :param str sort: This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.  A sortable field uses the following form:   *operator* *field_name*  You can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*    *operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.    - The `-` operator indicates an ascending order.   - The `+` operator indicates a descending order.  By default, the response data is displayed in descending order by payment run number.  *field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:    - targetDate   - status   - createdDate   - createdById   - updatedDate   - updatedById  Examples:  - /v1/payment-runs?sort=+createdDate  - /v1/payment-runs?status=Processing&sort=-createdById,+targetDate
        :return: GETPaymentRunCollectionType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_payment_runs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.g_et_payment_runs_with_http_info(**kwargs)  # noqa: E501
            return data

    def g_et_payment_runs_with_http_info(self, **kwargs):  # noqa: E501
        """Get payment runs  # noqa: E501

        Retrieves the information about all payment runs. You can define filterable fields to restrict the data returned in the response.  ### Filtering  You can use query parameters to restrict the data returned in the response. Each query parameter corresponds to one field in the response body.  If the value of a filterable field is string, you can set the corresponding query parameter to `null` when filtering. Then, you can get the response data with this field value being `null`.   Examples:  - /v1/payment-runs?status=Processed  - /v1/payment-runs?targetDate=2017-10-10&status=Pending  - /v1/payment-runs?status=Completed&sort=+updatedDate   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_payment_runs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :param int page_size: Number of rows returned per page.
        :param str created_by_id: This parameter filters the response based on the `createdById` field.
        :param datetime created_date: This parameter filters the response based on the `createdDate` field.
        :param str status: This parameter filters the response based on the `status` field.
        :param date target_date: This parameter filters the response based on the `targetDate` field.
        :param str updated_by_id: This parameter filters the response based on the `updatedById` field.
        :param datetime updated_date: This parameter filters the response based on the `updatedDate` field.
        :param str sort: This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.  A sortable field uses the following form:   *operator* *field_name*  You can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*    *operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.    - The `-` operator indicates an ascending order.   - The `+` operator indicates a descending order.  By default, the response data is displayed in descending order by payment run number.  *field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:    - targetDate   - status   - createdDate   - createdById   - updatedDate   - updatedById  Examples:  - /v1/payment-runs?sort=+createdDate  - /v1/payment-runs?status=Processing&sort=-createdById,+targetDate
        :return: GETPaymentRunCollectionType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zuora_entity_ids', 'page_size', 'created_by_id', 'created_date', 'status', 'target_date', 'updated_by_id', 'updated_date', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_payment_runs" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 40:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `g_et_payment_runs`, must be a value less than or equal to `40`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'created_by_id' in params:
            query_params.append(('createdById', params['created_by_id']))  # noqa: E501
        if 'created_date' in params:
            query_params.append(('createdDate', params['created_date']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'target_date' in params:
            query_params.append(('targetDate', params['target_date']))  # noqa: E501
        if 'updated_by_id' in params:
            query_params.append(('updatedById', params['updated_by_id']))  # noqa: E501
        if 'updated_date' in params:
            query_params.append(('updatedDate', params['updated_date']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETPaymentRunCollectionType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ost_payment_run(self, body, **kwargs):  # noqa: E501
        """Create payment run  # noqa: E501

        Creates a payment run. You can create a payment run to be executed immediately after it is created, or a scheduced payment run to be executed in future.  The `accountId`, `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields are used to determine which receivables to be paid in the payment run. If none of these fields is specified in the request body, the corresponding payment run collects payments for all accounts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ost_payment_run(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param POSTPaymentRunRequest body:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETPaymentRunType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ost_payment_run_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ost_payment_run_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def p_ost_payment_run_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create payment run  # noqa: E501

        Creates a payment run. You can create a payment run to be executed immediately after it is created, or a scheduced payment run to be executed in future.  The `accountId`, `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields are used to determine which receivables to be paid in the payment run. If none of these fields is specified in the request body, the corresponding payment run collects payments for all accounts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ost_payment_run_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param POSTPaymentRunRequest body:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETPaymentRunType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ost_payment_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `p_ost_payment_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment-runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETPaymentRunType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_payment_run(self, payment_run_id, body, **kwargs):  # noqa: E501
        """Update payment run  # noqa: E501

        Updates the information about an unexecuted payment run. Only pending payment runs can be updated.  If none of the **accountId**, **batch**, **billCycleDay**, **currency**, **paymentGatewayId**, and **billingRunId** fields is specified in the request body, the corresponding payment run collects payments for all accounts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_payment_run(payment_run_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :param PUTPaymentRunRequest body:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETPaymentRunType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_payment_run_with_http_info(payment_run_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_payment_run_with_http_info(payment_run_id, body, **kwargs)  # noqa: E501
            return data

    def p_ut_payment_run_with_http_info(self, payment_run_id, body, **kwargs):  # noqa: E501
        """Update payment run  # noqa: E501

        Updates the information about an unexecuted payment run. Only pending payment runs can be updated.  If none of the **accountId**, **batch**, **billCycleDay**, **currency**, **paymentGatewayId**, and **billingRunId** fields is specified in the request body, the corresponding payment run collects payments for all accounts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_payment_run_with_http_info(payment_run_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_run_id: The unique ID of a payment run. For example, 402890245f097f39015f0f074a2e0566.  (required)
        :param PUTPaymentRunRequest body:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETPaymentRunType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_run_id', 'body', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_payment_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_run_id' is set
        if ('payment_run_id' not in params or
                params['payment_run_id'] is None):
            raise ValueError("Missing the required parameter `payment_run_id` when calling `p_ut_payment_run`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `p_ut_payment_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_run_id' in params:
            path_params['paymentRunId'] = params['payment_run_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment-runs/{paymentRunId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETPaymentRunType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
