# coding: utf-8




from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from zuora_client.api_client import ApiClient


class RevenueSchedulesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def d_eleters(self, rs_number, **kwargs):  # noqa: E501
        """Delete revenue schedule  # noqa: E501

        Deletes a revenue schedule by specifying its revenue schedule number ## Prerequisites You must have the Delete Custom Revenue Schedule permissions in Zuora Finance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_eleters(rs_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number:  Revenue schedule number of the revenue schedule you want to delete, for example, RS-00000256. To be deleted, the revenue schedule: * Must be using a custom unlimited recognition rule. * Cannot have any revenue in a closed accounting period. * Cannot be included in a summary journal entry. * Cannot have a revenue schedule date in a closed accounting period.  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: CommonResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.d_eleters_with_http_info(rs_number, **kwargs)  # noqa: E501
        else:
            (data) = self.d_eleters_with_http_info(rs_number, **kwargs)  # noqa: E501
            return data

    def d_eleters_with_http_info(self, rs_number, **kwargs):  # noqa: E501
        """Delete revenue schedule  # noqa: E501

        Deletes a revenue schedule by specifying its revenue schedule number ## Prerequisites You must have the Delete Custom Revenue Schedule permissions in Zuora Finance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_eleters_with_http_info(rs_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number:  Revenue schedule number of the revenue schedule you want to delete, for example, RS-00000256. To be deleted, the revenue schedule: * Must be using a custom unlimited recognition rule. * Cannot have any revenue in a closed accounting period. * Cannot be included in a summary journal entry. * Cannot have a revenue schedule date in a closed accounting period.  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: CommonResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rs_number', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_eleters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rs_number' is set
        if ('rs_number' not in params or
                params['rs_number'] is None):
            raise ValueError("Missing the required parameter `rs_number` when calling `d_eleters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rs_number' in params:
            path_params['rs-number'] = params['rs_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/{rs-number}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etr_sby_credit_memo_item(self, cmi_id, **kwargs):  # noqa: E501
        """Get revenue schedule by credit memo item ID   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Retrieves the details about a revenue schedule by specifying a valid credit memo item ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_credit_memo_item(cmi_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cmi_id: The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).  (required)
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etr_sby_credit_memo_item_with_http_info(cmi_id, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etr_sby_credit_memo_item_with_http_info(cmi_id, **kwargs)  # noqa: E501
            return data

    def g_etr_sby_credit_memo_item_with_http_info(self, cmi_id, **kwargs):  # noqa: E501
        """Get revenue schedule by credit memo item ID   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Retrieves the details about a revenue schedule by specifying a valid credit memo item ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_credit_memo_item_with_http_info(cmi_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cmi_id: The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).  (required)
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cmi_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etr_sby_credit_memo_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cmi_id' is set
        if ('cmi_id' not in params or
                params['cmi_id'] is None):
            raise ValueError("Missing the required parameter `cmi_id` when calling `g_etr_sby_credit_memo_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cmi_id' in params:
            path_params['cmi-id'] = params['cmi_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/credit-memo-items/{cmi-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etr_sby_debit_memo_item(self, dmi_id, **kwargs):  # noqa: E501
        """Get revenue schedule by debit memo item ID   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Retrieves the details about a revenue schedule by specifying a valid debit memo item ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_debit_memo_item(dmi_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dmi_id: The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).  (required)
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etr_sby_debit_memo_item_with_http_info(dmi_id, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etr_sby_debit_memo_item_with_http_info(dmi_id, **kwargs)  # noqa: E501
            return data

    def g_etr_sby_debit_memo_item_with_http_info(self, dmi_id, **kwargs):  # noqa: E501
        """Get revenue schedule by debit memo item ID   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Retrieves the details about a revenue schedule by specifying a valid debit memo item ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_debit_memo_item_with_http_info(dmi_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dmi_id: The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).  (required)
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dmi_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etr_sby_debit_memo_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dmi_id' is set
        if ('dmi_id' not in params or
                params['dmi_id'] is None):
            raise ValueError("Missing the required parameter `dmi_id` when calling `g_etr_sby_debit_memo_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dmi_id' in params:
            path_params['dmi-id'] = params['dmi_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/debit-memo-items/{dmi-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etr_sby_invoice_item(self, invoice_item_id, **kwargs):  # noqa: E501
        """Get revenue schedule by invoice item ID  # noqa: E501

        Retrieves the details of a revenue schedule by specifying the invoice item ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_invoice_item(invoice_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_id: A valid Invoice Item ID. (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etr_sby_invoice_item_with_http_info(invoice_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etr_sby_invoice_item_with_http_info(invoice_item_id, **kwargs)  # noqa: E501
            return data

    def g_etr_sby_invoice_item_with_http_info(self, invoice_item_id, **kwargs):  # noqa: E501
        """Get revenue schedule by invoice item ID  # noqa: E501

        Retrieves the details of a revenue schedule by specifying the invoice item ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_invoice_item_with_http_info(invoice_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_id: A valid Invoice Item ID. (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_item_id', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etr_sby_invoice_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_item_id' is set
        if ('invoice_item_id' not in params or
                params['invoice_item_id'] is None):
            raise ValueError("Missing the required parameter `invoice_item_id` when calling `g_etr_sby_invoice_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_item_id' in params:
            path_params['invoice-item-id'] = params['invoice_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/invoice-items/{invoice-item-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etr_sby_invoice_item_adjustment(self, invoice_item_adj_key, **kwargs):  # noqa: E501
        """Get revenue schedule by invoice item adjustment  # noqa: E501

        Retrieves the details of a revenue schedule by specifying a valid invoice item adjustment identifier. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_invoice_item_adjustment(invoice_item_adj_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_adj_key: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72. (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etr_sby_invoice_item_adjustment_with_http_info(invoice_item_adj_key, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etr_sby_invoice_item_adjustment_with_http_info(invoice_item_adj_key, **kwargs)  # noqa: E501
            return data

    def g_etr_sby_invoice_item_adjustment_with_http_info(self, invoice_item_adj_key, **kwargs):  # noqa: E501
        """Get revenue schedule by invoice item adjustment  # noqa: E501

        Retrieves the details of a revenue schedule by specifying a valid invoice item adjustment identifier. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_invoice_item_adjustment_with_http_info(invoice_item_adj_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_adj_key: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72. (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_item_adj_key', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etr_sby_invoice_item_adjustment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_item_adj_key' is set
        if ('invoice_item_adj_key' not in params or
                params['invoice_item_adj_key'] is None):
            raise ValueError("Missing the required parameter `invoice_item_adj_key` when calling `g_etr_sby_invoice_item_adjustment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_item_adj_key' in params:
            path_params['invoice-item-adj-key'] = params['invoice_item_adj_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etr_sby_product_charge_and_billing_account(self, account_key, charge_key, **kwargs):  # noqa: E501
        """Get all revenue schedules of product charge by charge ID and billing account ID   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Retrieves the details about all revenue schedules of a product rate plan charge by specifying the charge ID and billing account ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_product_charge_and_billing_account(account_key, charge_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_key: The account number or account ID.  (required)
        :param str charge_key: The unique ID of a product rate plan charge. For example, 8a8082e65ba86084015bb323d3c61d82.  (required)
        :param int page_size: Number of rows returned per page.
        :return: GETRSDetailsByProductChargeType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etr_sby_product_charge_and_billing_account_with_http_info(account_key, charge_key, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etr_sby_product_charge_and_billing_account_with_http_info(account_key, charge_key, **kwargs)  # noqa: E501
            return data

    def g_etr_sby_product_charge_and_billing_account_with_http_info(self, account_key, charge_key, **kwargs):  # noqa: E501
        """Get all revenue schedules of product charge by charge ID and billing account ID   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Retrieves the details about all revenue schedules of a product rate plan charge by specifying the charge ID and billing account ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sby_product_charge_and_billing_account_with_http_info(account_key, charge_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_key: The account number or account ID.  (required)
        :param str charge_key: The unique ID of a product rate plan charge. For example, 8a8082e65ba86084015bb323d3c61d82.  (required)
        :param int page_size: Number of rows returned per page.
        :return: GETRSDetailsByProductChargeType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_key', 'charge_key', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etr_sby_product_charge_and_billing_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_key' is set
        if ('account_key' not in params or
                params['account_key'] is None):
            raise ValueError("Missing the required parameter `account_key` when calling `g_etr_sby_product_charge_and_billing_account`")  # noqa: E501
        # verify the required parameter 'charge_key' is set
        if ('charge_key' not in params or
                params['charge_key'] is None):
            raise ValueError("Missing the required parameter `charge_key` when calling `g_etr_sby_product_charge_and_billing_account`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 300:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `g_etr_sby_product_charge_and_billing_account`, must be a value less than or equal to `300`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_key' in params:
            path_params['account-key'] = params['account_key']  # noqa: E501
        if 'charge_key' in params:
            path_params['charge-key'] = params['charge_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/product-charges/{charge-key}/{account-key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailsByProductChargeType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etr_sfor_subsc_charge(self, charge_key, **kwargs):  # noqa: E501
        """Get revenue schedule by subscription charge  # noqa: E501

        Retrieves the revenue schedule details by specifying subscription charge ID. Request and response field descriptions and sample code are provided   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sfor_subsc_charge(charge_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str charge_key: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012. (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :param int page_size: Number of rows returned per page.
        :return: GETRSDetailsByChargeType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etr_sfor_subsc_charge_with_http_info(charge_key, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etr_sfor_subsc_charge_with_http_info(charge_key, **kwargs)  # noqa: E501
            return data

    def g_etr_sfor_subsc_charge_with_http_info(self, charge_key, **kwargs):  # noqa: E501
        """Get revenue schedule by subscription charge  # noqa: E501

        Retrieves the revenue schedule details by specifying subscription charge ID. Request and response field descriptions and sample code are provided   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etr_sfor_subsc_charge_with_http_info(charge_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str charge_key: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012. (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :param int page_size: Number of rows returned per page.
        :return: GETRSDetailsByChargeType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['charge_key', 'zuora_entity_ids', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etr_sfor_subsc_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'charge_key' is set
        if ('charge_key' not in params or
                params['charge_key'] is None):
            raise ValueError("Missing the required parameter `charge_key` when calling `g_etr_sfor_subsc_charge`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 300:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `g_etr_sfor_subsc_charge`, must be a value less than or equal to `300`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'charge_key' in params:
            path_params['charge-key'] = params['charge_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/subscription-charges/{charge-key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailsByChargeType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_etrs(self, rs_number, **kwargs):  # noqa: E501
        """Get revenue schedule details  # noqa: E501

        Retrieves the details of a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etrs(rs_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_etrs_with_http_info(rs_number, **kwargs)  # noqa: E501
        else:
            (data) = self.g_etrs_with_http_info(rs_number, **kwargs)  # noqa: E501
            return data

    def g_etrs_with_http_info(self, rs_number, **kwargs):  # noqa: E501
        """Get revenue schedule details  # noqa: E501

        Retrieves the details of a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_etrs_with_http_info(rs_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: GETRSDetailType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rs_number', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_etrs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rs_number' is set
        if ('rs_number' not in params or
                params['rs_number'] is None):
            raise ValueError("Missing the required parameter `rs_number` when calling `g_etrs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rs_number' in params:
            path_params['rs-number'] = params['rs_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/{rs-number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETRSDetailType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_credit_memo_item_distribute_by_date_range(self, cmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for credit memo item (distribute by date range)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a credit memo item, and automatically distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_credit_memo_item_distribute_by_date_range(cmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cmi_id: The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionRatablyType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_credit_memo_item_distribute_by_date_range_with_http_info(cmi_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_credit_memo_item_distribute_by_date_range_with_http_info(cmi_id, body, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_credit_memo_item_distribute_by_date_range_with_http_info(self, cmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for credit memo item (distribute by date range)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a credit memo item, and automatically distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_credit_memo_item_distribute_by_date_range_with_http_info(cmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cmi_id: The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionRatablyType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cmi_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_credit_memo_item_distribute_by_date_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cmi_id' is set
        if ('cmi_id' not in params or
                params['cmi_id'] is None):
            raise ValueError("Missing the required parameter `cmi_id` when calling `p_ostr_sfor_credit_memo_item_distribute_by_date_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `p_ostr_sfor_credit_memo_item_distribute_by_date_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cmi_id' in params:
            path_params['cmi-id'] = params['cmi_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/credit-memo-items/{cmi-id}/distribute-revenue-with-date-range', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_credit_memo_item_manual_distribution(self, cmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for credit memo item (manual distribution)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a credit memo item, and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_credit_memo_item_manual_distribution(cmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cmi_id: The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_credit_memo_item_manual_distribution_with_http_info(cmi_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_credit_memo_item_manual_distribution_with_http_info(cmi_id, body, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_credit_memo_item_manual_distribution_with_http_info(self, cmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for credit memo item (manual distribution)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a credit memo item, and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_credit_memo_item_manual_distribution_with_http_info(cmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cmi_id: The unique ID of a credit memo item. You can get the credit memo item ID from the response of [Get credit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_CreditMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cmi_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_credit_memo_item_manual_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cmi_id' is set
        if ('cmi_id' not in params or
                params['cmi_id'] is None):
            raise ValueError("Missing the required parameter `cmi_id` when calling `p_ostr_sfor_credit_memo_item_manual_distribution`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `p_ostr_sfor_credit_memo_item_manual_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cmi_id' in params:
            path_params['cmi-id'] = params['cmi_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/credit-memo-items/{cmi-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_debit_memo_item_distribute_by_date_range(self, dmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for debit memo item (distribute by date range)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a debit memo item, and automatically distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_debit_memo_item_distribute_by_date_range(dmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dmi_id: The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionRatablyType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_debit_memo_item_distribute_by_date_range_with_http_info(dmi_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_debit_memo_item_distribute_by_date_range_with_http_info(dmi_id, body, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_debit_memo_item_distribute_by_date_range_with_http_info(self, dmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for debit memo item (distribute by date range)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a debit memo item, and automatically distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_debit_memo_item_distribute_by_date_range_with_http_info(dmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dmi_id: The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionRatablyType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dmi_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_debit_memo_item_distribute_by_date_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dmi_id' is set
        if ('dmi_id' not in params or
                params['dmi_id'] is None):
            raise ValueError("Missing the required parameter `dmi_id` when calling `p_ostr_sfor_debit_memo_item_distribute_by_date_range`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `p_ostr_sfor_debit_memo_item_distribute_by_date_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dmi_id' in params:
            path_params['dmi-id'] = params['dmi_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/debit-memo-items/{dmi-id}/distribute-revenue-with-date-range', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_debit_memo_item_manual_distribution(self, dmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for debit memo item (manual distribution)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a debit memo item, and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_debit_memo_item_manual_distribution(dmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dmi_id: The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_debit_memo_item_manual_distribution_with_http_info(dmi_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_debit_memo_item_manual_distribution_with_http_info(dmi_id, body, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_debit_memo_item_manual_distribution_with_http_info(self, dmi_id, body, **kwargs):  # noqa: E501
        """Create revenue schedule for debit memo item (manual distribution)   # noqa: E501

        **Note:** This feature is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  Creates a revenue schedule for a debit memo item, and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_debit_memo_item_manual_distribution_with_http_info(dmi_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dmi_id: The unique ID of a debit memo item. You can get the debit memo item ID from the response of [Get debit memo items](https://www.zuora.com/developer/api-reference/#operation/GET_DebitMemoItems).  (required)
        :param POSTRevenueScheduleByTransactionType body:  (required)
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dmi_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_debit_memo_item_manual_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dmi_id' is set
        if ('dmi_id' not in params or
                params['dmi_id'] is None):
            raise ValueError("Missing the required parameter `dmi_id` when calling `p_ostr_sfor_debit_memo_item_manual_distribution`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `p_ostr_sfor_debit_memo_item_manual_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dmi_id' in params:
            path_params['dmi-id'] = params['dmi_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/debit-memo-items/{dmi-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range(self, invoice_item_adj_key, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item Adjustment (distribute by date range)  # noqa: E501

        Creates a revenue schedule for an Invoice Item Adjustment and distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range(invoice_item_adj_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_adj_key: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72. If the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByDateRangeType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range_with_http_info(invoice_item_adj_key, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range_with_http_info(invoice_item_adj_key, request, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range_with_http_info(self, invoice_item_adj_key, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item Adjustment (distribute by date range)  # noqa: E501

        Creates a revenue schedule for an Invoice Item Adjustment and distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range_with_http_info(invoice_item_adj_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_adj_key: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72. If the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByDateRangeType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_item_adj_key', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_item_adj_key' is set
        if ('invoice_item_adj_key' not in params or
                params['invoice_item_adj_key'] is None):
            raise ValueError("Missing the required parameter `invoice_item_adj_key` when calling `p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ostr_sfor_invoice_item_adjustment_distribute_by_date_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_item_adj_key' in params:
            path_params['invoice-item-adj-key'] = params['invoice_item_adj_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_invoice_item_adjustment_manual_distribution(self, invoice_item_adj_key, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item Adjustment (manual distribution)  # noqa: E501

        Creates a revenue schedule for an Invoice Item Adjustment and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_adjustment_manual_distribution(invoice_item_adj_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_adj_key: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72. If the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByTransactionType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_invoice_item_adjustment_manual_distribution_with_http_info(invoice_item_adj_key, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_invoice_item_adjustment_manual_distribution_with_http_info(invoice_item_adj_key, request, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_invoice_item_adjustment_manual_distribution_with_http_info(self, invoice_item_adj_key, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item Adjustment (manual distribution)  # noqa: E501

        Creates a revenue schedule for an Invoice Item Adjustment and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_adjustment_manual_distribution_with_http_info(invoice_item_adj_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_adj_key: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72. If the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByTransactionType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_item_adj_key', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_invoice_item_adjustment_manual_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_item_adj_key' is set
        if ('invoice_item_adj_key' not in params or
                params['invoice_item_adj_key'] is None):
            raise ValueError("Missing the required parameter `invoice_item_adj_key` when calling `p_ostr_sfor_invoice_item_adjustment_manual_distribution`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ostr_sfor_invoice_item_adjustment_manual_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_item_adj_key' in params:
            path_params['invoice-item-adj-key'] = params['invoice_item_adj_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_invoice_item_distribute_by_date_range(self, invoice_item_id, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item (distribute by date range)  # noqa: E501

        Creates a revenue schedule for an Invoice Item and distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_distribute_by_date_range(invoice_item_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_id: ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75. If the specified Invoice Item is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByDateRangeType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_invoice_item_distribute_by_date_range_with_http_info(invoice_item_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_invoice_item_distribute_by_date_range_with_http_info(invoice_item_id, request, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_invoice_item_distribute_by_date_range_with_http_info(self, invoice_item_id, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item (distribute by date range)  # noqa: E501

        Creates a revenue schedule for an Invoice Item and distribute the revenue by specifying the recognition start and end dates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_distribute_by_date_range_with_http_info(invoice_item_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_id: ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75. If the specified Invoice Item is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByDateRangeType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_item_id', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_invoice_item_distribute_by_date_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_item_id' is set
        if ('invoice_item_id' not in params or
                params['invoice_item_id'] is None):
            raise ValueError("Missing the required parameter `invoice_item_id` when calling `p_ostr_sfor_invoice_item_distribute_by_date_range`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ostr_sfor_invoice_item_distribute_by_date_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_item_id' in params:
            path_params['invoice-item-id'] = params['invoice_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_invoice_item_manual_distribution(self, invoice_item_id, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item (manual distribution)  # noqa: E501

        Creates a revenue schedule for an Invoice Item and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_manual_distribution(invoice_item_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_id: ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75. If the specified Invoice Item is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByTransactionType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_invoice_item_manual_distribution_with_http_info(invoice_item_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_invoice_item_manual_distribution_with_http_info(invoice_item_id, request, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_invoice_item_manual_distribution_with_http_info(self, invoice_item_id, request, **kwargs):  # noqa: E501
        """Create revenue schedule for Invoice Item (manual distribution)  # noqa: E501

        Creates a revenue schedule for an Invoice Item and manually distribute the revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_invoice_item_manual_distribution_with_http_info(invoice_item_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_item_id: ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75. If the specified Invoice Item is already associated with a revenue schedule, the call will fail.  (required)
        :param POSTRevenueScheduleByTransactionType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByTransactionResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_item_id', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_invoice_item_manual_distribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_item_id' is set
        if ('invoice_item_id' not in params or
                params['invoice_item_id'] is None):
            raise ValueError("Missing the required parameter `invoice_item_id` when calling `p_ostr_sfor_invoice_item_manual_distribution`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ostr_sfor_invoice_item_manual_distribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_item_id' in params:
            path_params['invoice-item-id'] = params['invoice_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/invoice-items/{invoice-item-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByTransactionResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ostr_sfor_subsc_charge(self, charge_key, request, **kwargs):  # noqa: E501
        """Create revenue schedule on subscription charge  # noqa: E501

        Creates a revenue schedule by specifying the subscription charge. This method is for custom unlimited revenue recognition only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_subsc_charge(charge_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str charge_key: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012. (required)
        :param POSTRevenueScheduleByChargeType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByChargeResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ostr_sfor_subsc_charge_with_http_info(charge_key, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ostr_sfor_subsc_charge_with_http_info(charge_key, request, **kwargs)  # noqa: E501
            return data

    def p_ostr_sfor_subsc_charge_with_http_info(self, charge_key, request, **kwargs):  # noqa: E501
        """Create revenue schedule on subscription charge  # noqa: E501

        Creates a revenue schedule by specifying the subscription charge. This method is for custom unlimited revenue recognition only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ostr_sfor_subsc_charge_with_http_info(charge_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str charge_key: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012. (required)
        :param POSTRevenueScheduleByChargeType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: POSTRevenueScheduleByChargeResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['charge_key', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ostr_sfor_subsc_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'charge_key' is set
        if ('charge_key' not in params or
                params['charge_key'] is None):
            raise ValueError("Missing the required parameter `charge_key` when calling `p_ostr_sfor_subsc_charge`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ostr_sfor_subsc_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'charge_key' in params:
            path_params['charge-key'] = params['charge_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/subscription-charges/{charge-key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='POSTRevenueScheduleByChargeResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_revenue_across_ap(self, rs_number, request, **kwargs):  # noqa: E501
        """Distribute revenue across accounting periods  # noqa: E501

        Distributes revenue by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_revenue_across_ap(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTAllocateManuallyType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: PUTRevenueScheduleResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_revenue_across_ap_with_http_info(rs_number, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_revenue_across_ap_with_http_info(rs_number, request, **kwargs)  # noqa: E501
            return data

    def p_ut_revenue_across_ap_with_http_info(self, rs_number, request, **kwargs):  # noqa: E501
        """Distribute revenue across accounting periods  # noqa: E501

        Distributes revenue by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_revenue_across_ap_with_http_info(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTAllocateManuallyType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: PUTRevenueScheduleResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rs_number', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_revenue_across_ap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rs_number' is set
        if ('rs_number' not in params or
                params['rs_number'] is None):
            raise ValueError("Missing the required parameter `rs_number` when calling `p_ut_revenue_across_ap`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ut_revenue_across_ap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rs_number' in params:
            path_params['rs-number'] = params['rs_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PUTRevenueScheduleResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_revenue_by_recognition_startand_end_dates(self, rs_number, request, **kwargs):  # noqa: E501
        """Distribute revenue by recognition start and end dates  # noqa: E501

        Distributes revenue by specifying the recognition start and end dates. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_revenue_by_recognition_startand_end_dates(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. Specify the revenue schedule whose revenue you want to distribute.    The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTRSTermType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: PUTRevenueScheduleResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_revenue_by_recognition_startand_end_dates_with_http_info(rs_number, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_revenue_by_recognition_startand_end_dates_with_http_info(rs_number, request, **kwargs)  # noqa: E501
            return data

    def p_ut_revenue_by_recognition_startand_end_dates_with_http_info(self, rs_number, request, **kwargs):  # noqa: E501
        """Distribute revenue by recognition start and end dates  # noqa: E501

        Distributes revenue by specifying the recognition start and end dates. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_revenue_by_recognition_startand_end_dates_with_http_info(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. Specify the revenue schedule whose revenue you want to distribute.    The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTRSTermType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: PUTRevenueScheduleResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rs_number', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_revenue_by_recognition_startand_end_dates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rs_number' is set
        if ('rs_number' not in params or
                params['rs_number'] is None):
            raise ValueError("Missing the required parameter `rs_number` when calling `p_ut_revenue_by_recognition_startand_end_dates`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ut_revenue_by_recognition_startand_end_dates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rs_number' in params:
            path_params['rs-number'] = params['rs_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PUTRevenueScheduleResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_revenue_specific_date(self, rs_number, request, **kwargs):  # noqa: E501
        """Distribute revenue on specific date  # noqa: E501

        Distributes revenue on a specific recognition date. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_revenue_specific_date(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTSpecificDateAllocationType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: PUTRevenueScheduleResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_revenue_specific_date_with_http_info(rs_number, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_revenue_specific_date_with_http_info(rs_number, request, **kwargs)  # noqa: E501
            return data

    def p_ut_revenue_specific_date_with_http_info(self, rs_number, request, **kwargs):  # noqa: E501
        """Distribute revenue on specific date  # noqa: E501

        Distributes revenue on a specific recognition date. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_revenue_specific_date_with_http_info(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTSpecificDateAllocationType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: PUTRevenueScheduleResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rs_number', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_revenue_specific_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rs_number' is set
        if ('rs_number' not in params or
                params['rs_number'] is None):
            raise ValueError("Missing the required parameter `rs_number` when calling `p_ut_revenue_specific_date`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_ut_revenue_specific_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rs_number' in params:
            path_params['rs-number'] = params['rs_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PUTRevenueScheduleResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_utrs_basic_info(self, rs_number, request, **kwargs):  # noqa: E501
        """Update revenue schedule basic information  # noqa: E501

        Retrieves basic information of a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_utrs_basic_info(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTRSBasicInfoType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: CommonResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_utrs_basic_info_with_http_info(rs_number, request, **kwargs)  # noqa: E501
        else:
            (data) = self.p_utrs_basic_info_with_http_info(rs_number, request, **kwargs)  # noqa: E501
            return data

    def p_utrs_basic_info_with_http_info(self, rs_number, request, **kwargs):  # noqa: E501
        """Update revenue schedule basic information  # noqa: E501

        Retrieves basic information of a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_utrs_basic_info_with_http_info(rs_number, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rs_number: Revenue schedule number. The revenue schedule number is always prefixed with \"RS\", for example, \"RS-00000001\".  (required)
        :param PUTRSBasicInfoType request:  (required)
        :param str zuora_entity_ids: An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.
        :return: CommonResponseType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rs_number', 'request', 'zuora_entity_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_utrs_basic_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rs_number' is set
        if ('rs_number' not in params or
                params['rs_number'] is None):
            raise ValueError("Missing the required parameter `rs_number` when calling `p_utrs_basic_info`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `p_utrs_basic_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rs_number' in params:
            path_params['rs-number'] = params['rs_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'zuora_entity_ids' in params:
            header_params['Zuora-Entity-Ids'] = params['zuora_entity_ids']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/revenue-schedules/{rs-number}/basic-information', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommonResponseType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
